
lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af5c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b134  0800b134  0001b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b150  0800b150  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b150  0800b150  0001b150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b158  0800b158  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b158  0800b158  0001b158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  20000090  0800b1f0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800b1f0  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023292  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004704  00000000  00000000  00043352  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b60  00000000  00000000  00047a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  000495b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282e6  00000000  00000000  0004af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019e71  00000000  00000000  000731e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3cc2  00000000  00000000  0008d057  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007598  00000000  00000000  00170d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b11c 	.word	0x0800b11c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800b11c 	.word	0x0800b11c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f001 fb75 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f887 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fb57 	bl	8000bd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800052a:	f000 f923 	bl	8000774 <MX_ADC1_Init>
  MX_DAC_Init();
 800052e:	f000 f973 	bl	8000818 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000532:	f000 f99b 	bl	800086c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000536:	f000 f9d1 	bl	80008dc <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800053a:	f000 fa39 	bl	80009b0 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800053e:	f000 fce1 	bl	8000f04 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000542:	f000 fa6b 	bl	8000a1c <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000546:	f000 fa97 	bl	8000a78 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800054a:	f000 fac1 	bl	8000ad0 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800054e:	f000 faef 	bl	8000b30 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000552:	f000 fb17 	bl	8000b84 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000556:	f00a f9dd 	bl	800a914 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int delay = 500;
 800055a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800055e:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	4830      	ldr	r0, [pc, #192]	; (8000628 <main+0x110>)
 8000566:	f002 fbb0 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fbbf 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000572:	2108      	movs	r1, #8
 8000574:	482d      	ldr	r0, [pc, #180]	; (800062c <main+0x114>)
 8000576:	f002 fba8 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800057a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057e:	482a      	ldr	r0, [pc, #168]	; (8000628 <main+0x110>)
 8000580:	f002 fba3 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fbb2 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4825      	ldr	r0, [pc, #148]	; (8000628 <main+0x110>)
 8000592:	f002 fb9a 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fba9 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800059e:	2120      	movs	r1, #32
 80005a0:	4823      	ldr	r0, [pc, #140]	; (8000630 <main+0x118>)
 80005a2:	f002 fb92 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80005a6:	2108      	movs	r1, #8
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0x114>)
 80005aa:	f002 fb8e 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	481d      	ldr	r0, [pc, #116]	; (8000628 <main+0x110>)
 80005b4:	f002 fb89 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fb98 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <main+0x110>)
 80005c6:	f002 fb80 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fb8f 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80005d2:	2108      	movs	r1, #8
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <main+0x114>)
 80005d6:	f002 fb78 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80005da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <main+0x110>)
 80005e0:	f002 fb73 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fb82 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0x110>)
 80005f2:	f002 fb6a 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fb79 	bl	8001cf0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80005fe:	2120      	movs	r1, #32
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <main+0x118>)
 8000602:	f002 fb62 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000606:	2108      	movs	r1, #8
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0x114>)
 800060a:	f002 fb5e 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x110>)
 8000614:	f002 fb59 	bl	8002cca <HAL_GPIO_TogglePin>
	  HAL_Delay(delay);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fb68 	bl	8001cf0 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000620:	f00a f99e 	bl	800a960 <MX_USB_HOST_Process>
  {
 8000624:	e799      	b.n	800055a <main+0x42>
 8000626:	bf00      	nop
 8000628:	40020400 	.word	0x40020400
 800062c:	40021000 	.word	0x40021000
 8000630:	40020800 	.word	0x40020800

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0aa      	sub	sp, #168	; 0xa8
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00a fca8 	bl	800af98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2258      	movs	r2, #88	; 0x58
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00a fc99 	bl	800af98 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b40      	ldr	r3, [pc, #256]	; (800076c <SystemClock_Config+0x138>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a3f      	ldr	r2, [pc, #252]	; (800076c <SystemClock_Config+0x138>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <SystemClock_Config+0x138>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <SystemClock_Config+0x13c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a39      	ldr	r2, [pc, #228]	; (8000770 <SystemClock_Config+0x13c>)
 800068c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <SystemClock_Config+0x13c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800069e:	2303      	movs	r3, #3
 80006a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006c2:	230f      	movs	r3, #15
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 faa1 	bl	8005c2c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 fcba 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f004 fce4 	bl	80050dc <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800071a:	f000 fca5 	bl	8001068 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800071e:	f240 1371 	movw	r3, #369	; 0x171
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000728:	230c      	movs	r3, #12
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 800073c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000742:	2300      	movs	r3, #0
 8000744:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800074a:	2300      	movs	r3, #0
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fe8e 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800075e:	f000 fc83 	bl	8001068 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	37a8      	adds	r7, #168	; 0xa8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0x98>)
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <MX_ADC1_Init+0x9c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_ADC1_Init+0x98>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_ADC1_Init+0xa0>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0x98>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_ADC1_Init+0x98>)
 80007d4:	f001 faae 	bl	8001d34 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fc43 	bl	8001068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0x98>)
 80007f4:	f001 fae2 	bl	8001dbc <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 fc33 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000023c 	.word	0x2000023c
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DAC_Init+0x4c>)
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_DAC_Init+0x50>)
 800082a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_DAC_Init+0x4c>)
 800082e:	f001 fe04 	bl	800243a <HAL_DAC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000838:	f000 fc16 	bl	8001068 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_DAC_Init+0x4c>)
 800084c:	f001 fe17 	bl	800247e <HAL_DAC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000856:	f000 fc07 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000284 	.word	0x20000284
 8000868:	40007400 	.word	0x40007400

0800086c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000872:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <MX_DFSDM1_Init+0x6c>)
 8000874:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000878:	2201      	movs	r2, #1
 800087a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 800089c:	2202      	movs	r2, #2
 800089e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_DFSDM1_Init+0x68>)
 80008c0:	f001 fe2a 	bl	8002518 <HAL_DFSDM_ChannelInit>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008ca:	f000 fbcd 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000104 	.word	0x20000104
 80008d8:	40016020 	.word	0x40016020

080008dc <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 80008e2:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <MX_DFSDM2_Init+0xc8>)
 80008e4:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 800090c:	2202      	movs	r2, #2
 800090e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 800091e:	2201      	movs	r2, #1
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800092e:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_DFSDM2_Init+0xc4>)
 8000930:	f001 fdf2 	bl	8002518 <HAL_DFSDM_ChannelInit>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800093a:	f000 fb95 	bl	8001068 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <MX_DFSDM2_Init+0xd0>)
 8000942:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000952:	2202      	movs	r2, #2
 8000954:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 800096a:	2202      	movs	r2, #2
 800096c:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 800097c:	2201      	movs	r2, #1
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_DFSDM2_Init+0xcc>)
 800098e:	f001 fdc3 	bl	8002518 <HAL_DFSDM_ChannelInit>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000998:	f000 fb66 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000204 	.word	0x20000204
 80009a4:	40016420 	.word	0x40016420
 80009a8:	2000013c 	.word	0x2000013c
 80009ac:	400164e0 	.word	0x400164e0

080009b0 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_FMPI2C1_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <MX_FMPI2C1_Init+0x68>)
 80009be:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009ec:	f001 fee8 	bl	80027c0 <HAL_FMPI2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 fb37 	bl	8001068 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_FMPI2C1_Init+0x60>)
 80009fe:	f001 ff6e 	bl	80028de <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fb2e 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000298 	.word	0x20000298
 8000a14:	40006000 	.word	0x40006000
 8000a18:	00303d5b 	.word	0x00303d5b

08000a1c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <MX_I2S2_Init+0x58>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a48:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2S2_Init+0x54>)
 8000a5e:	f003 fdb7 	bl	80045d0 <HAL_I2S_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a68:	f000 fafe 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200003f8 	.word	0x200003f8
 8000a74:	40003800 	.word	0x40003800

08000a78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_QUADSPI_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_QUADSPI_Init+0x50>)
 8000ab4:	f004 fa4e 	bl	8004f54 <HAL_QSPI_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 fad3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000440 	.word	0x20000440
 8000acc:	a0001000 	.word	0xa0001000

08000ad0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_SDIO_SD_Init+0x5c>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000b00:	f005 fad6 	bl	80060b0 <HAL_SD_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b0a:	f000 faad 	bl	8001068 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_SDIO_SD_Init+0x58>)
 8000b14:	f005 fd00 	bl	8006518 <HAL_SD_ConfigWideBusOperation>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 faa3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000334 	.word	0x20000334
 8000b2c:	40012c00 	.word	0x40012c00

08000b30 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_UART10_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_UART10_Init+0x4c>)
 8000b68:	f006 f852 	bl	8006c10 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 fa79 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	40011c00 	.word	0x40011c00

08000b84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART6_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART6_UART_Init+0x4c>)
 8000bbc:	f006 f828 	bl	8006c10 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 fa4f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200003b8 	.word	0x200003b8
 8000bd4:	40011400 	.word	0x40011400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
 8000bf2:	4bb0      	ldr	r3, [pc, #704]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4aaf      	ldr	r2, [pc, #700]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4bad      	ldr	r3, [pc, #692]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	4ba9      	ldr	r3, [pc, #676]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4aa8      	ldr	r2, [pc, #672]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4ba6      	ldr	r3, [pc, #664]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4ba2      	ldr	r3, [pc, #648]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4aa1      	ldr	r2, [pc, #644]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b9f      	ldr	r3, [pc, #636]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b9b      	ldr	r3, [pc, #620]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a9a      	ldr	r2, [pc, #616]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b98      	ldr	r3, [pc, #608]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b94      	ldr	r3, [pc, #592]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a93      	ldr	r2, [pc, #588]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b91      	ldr	r3, [pc, #580]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b8d      	ldr	r3, [pc, #564]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a8c      	ldr	r2, [pc, #560]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b8a      	ldr	r3, [pc, #552]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a85      	ldr	r2, [pc, #532]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b83      	ldr	r3, [pc, #524]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b7f      	ldr	r3, [pc, #508]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a7e      	ldr	r2, [pc, #504]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b7c      	ldr	r3, [pc, #496]	; (8000eb4 <MX_GPIO_Init+0x2dc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2138      	movs	r1, #56	; 0x38
 8000cd2:	4879      	ldr	r0, [pc, #484]	; (8000eb8 <MX_GPIO_Init+0x2e0>)
 8000cd4:	f001 ffe0 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4877      	ldr	r0, [pc, #476]	; (8000ebc <MX_GPIO_Init+0x2e4>)
 8000cde:	f001 ffdb 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ce8:	4875      	ldr	r0, [pc, #468]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000cea:	f001 ffd5 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <MX_GPIO_Init+0x2ec>)
 8000cf6:	f001 ffcf 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000cfa:	2338      	movs	r3, #56	; 0x38
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4869      	ldr	r0, [pc, #420]	; (8000eb8 <MX_GPIO_Init+0x2e0>)
 8000d12:	f001 fe2f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d26:	2303      	movs	r3, #3
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4861      	ldr	r0, [pc, #388]	; (8000eb8 <MX_GPIO_Init+0x2e0>)
 8000d32:	f001 fe1f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	485d      	ldr	r0, [pc, #372]	; (8000ec8 <MX_GPIO_Init+0x2f0>)
 8000d54:	f001 fe0e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5c:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <MX_GPIO_Init+0x2f4>)
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4854      	ldr	r0, [pc, #336]	; (8000ebc <MX_GPIO_Init+0x2e4>)
 8000d6c:	f001 fe02 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d74:	4b55      	ldr	r3, [pc, #340]	; (8000ecc <MX_GPIO_Init+0x2f4>)
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4853      	ldr	r0, [pc, #332]	; (8000ed0 <MX_GPIO_Init+0x2f8>)
 8000d84:	f001 fdf6 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4847      	ldr	r0, [pc, #284]	; (8000ebc <MX_GPIO_Init+0x2e4>)
 8000da0:	f001 fde8 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000da4:	2301      	movs	r3, #1
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000db4:	2302      	movs	r3, #2
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4840      	ldr	r0, [pc, #256]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000dc0:	f001 fdd8 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <MX_GPIO_Init+0x2f4>)
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <MX_GPIO_Init+0x2f0>)
 8000dda:	f001 fdcb 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000df0:	2304      	movs	r3, #4
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000dfc:	f001 fdba 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000e00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4829      	ldr	r0, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000e1a:	f001 fdab 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000e1e:	f248 0380 	movw	r3, #32896	; 0x8080
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_GPIO_Init+0x2f4>)
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <MX_GPIO_Init+0x2ec>)
 8000e34:	f001 fd9e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000e38:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0x2ec>)
 8000e52:	f001 fd8f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0x2f8>)
 8000e74:	f001 fd7e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e78:	2330      	movs	r3, #48	; 0x30
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e88:	2306      	movs	r3, #6
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000e94:	f001 fd6e 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_GPIO_Init+0x2f4>)
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_GPIO_Init+0x2e8>)
 8000eac:	f001 fd62 	bl	8002974 <HAL_GPIO_Init>
 8000eb0:	e010      	b.n	8000ed4 <MX_GPIO_Init+0x2fc>
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	40020000 	.word	0x40020000

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_GPIO_Init+0x328>)
 8000ef2:	f001 fd3f 	bl	8002974 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020400 	.word	0x40020400

08000f04 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	; (800105c <MX_FSMC_Init+0x158>)
 8000f1e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f22:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f24:	4b4d      	ldr	r3, [pc, #308]	; (800105c <MX_FSMC_Init+0x158>)
 8000f26:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <MX_FSMC_Init+0x15c>)
 8000f28:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <MX_FSMC_Init+0x158>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f30:	4b4a      	ldr	r3, [pc, #296]	; (800105c <MX_FSMC_Init+0x158>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <MX_FSMC_Init+0x158>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <MX_FSMC_Init+0x158>)
 8000f3e:	2210      	movs	r2, #16
 8000f40:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <MX_FSMC_Init+0x158>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_FSMC_Init+0x158>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <MX_FSMC_Init+0x158>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <MX_FSMC_Init+0x158>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_FSMC_Init+0x158>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f60:	4b3e      	ldr	r3, [pc, #248]	; (800105c <MX_FSMC_Init+0x158>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_FSMC_Init+0x158>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <MX_FSMC_Init+0x158>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <MX_FSMC_Init+0x158>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <MX_FSMC_Init+0x158>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_FSMC_Init+0x158>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f84:	230f      	movs	r3, #15
 8000f86:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f90:	230f      	movs	r3, #15
 8000f92:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f94:	2310      	movs	r3, #16
 8000f96:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f98:	2311      	movs	r3, #17
 8000f9a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482d      	ldr	r0, [pc, #180]	; (800105c <MX_FSMC_Init+0x158>)
 8000fa8:	f005 fdee 	bl	8006b88 <HAL_SRAM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000fb2:	f000 f859 	bl	8001068 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fb8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fbc:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <MX_FSMC_Init+0x15c>)
 8000fc2:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fd8:	2210      	movs	r2, #16
 8000fda:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_FSMC_Init+0x160>)
 8001004:	2200      	movs	r2, #0
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_FSMC_Init+0x160>)
 800100a:	2200      	movs	r2, #0
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_FSMC_Init+0x160>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_FSMC_Init+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_FSMC_Init+0x160>)
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001020:	230f      	movs	r3, #15
 8001022:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001024:	230f      	movs	r3, #15
 8001026:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800102c:	230f      	movs	r3, #15
 800102e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001030:	2310      	movs	r3, #16
 8001032:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001034:	2311      	movs	r3, #17
 8001036:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <MX_FSMC_Init+0x160>)
 8001044:	f005 fda0 	bl	8006b88 <HAL_SRAM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800104e:	f000 f80b 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001b4 	.word	0x200001b4
 8001060:	a0000104 	.word	0xa0000104
 8001064:	200002e4 	.word	0x200002e4

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_ADC_MspInit+0xe4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d15b      	bne.n	80011a2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800115a:	2311      	movs	r3, #17
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <HAL_ADC_MspInit+0xec>)
 800116e:	f001 fc01 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001172:	2326      	movs	r3, #38	; 0x26
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_ADC_MspInit+0xf0>)
 8001186:	f001 fbf5 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <HAL_ADC_MspInit+0xf4>)
 800119e:	f001 fbe9 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400

080011c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_DAC_MspInit+0x7c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d127      	bne.n	8001232 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800121a:	2310      	movs	r3, #16
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_DAC_MspInit+0x84>)
 800122e:	f001 fba1 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40007400 	.word	0x40007400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000

08001248 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00e      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d009      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a74      	ldr	r2, [pc, #464]	; (800144c <HAL_DFSDM_ChannelMspInit+0x204>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d004      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a73      	ldr	r2, [pc, #460]	; (8001450 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d154      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0xea>
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d150      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	4b62      	ldr	r3, [pc, #392]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a61      	ldr	r2, [pc, #388]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration    
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4856      	ldr	r0, [pc, #344]	; (800145c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001302:	f001 fb37 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001316:	2306      	movs	r3, #6
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	484f      	ldr	r0, [pc, #316]	; (8001460 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001322:	f001 fb27 	bl	8002974 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800132e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001330:	e084      	b.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d07f      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d07a      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_DFSDM_ChannelMspInit+0x204>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d075      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d070      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d16c      	bne.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 800136c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80013e2:	2307      	movs	r3, #7
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	481b      	ldr	r0, [pc, #108]	; (800145c <HAL_DFSDM_ChannelMspInit+0x214>)
 80013ee:	f001 fac1 	bl	8002974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80013f2:	2304      	movs	r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001402:	2303      	movs	r3, #3
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <HAL_DFSDM_ChannelMspInit+0x218>)
 800140e:	f001 fab1 	bl	8002974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001422:	2306      	movs	r3, #6
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <HAL_DFSDM_ChannelMspInit+0x220>)
 800142e:	f001 faa1 	bl	8002974 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40016000 	.word	0x40016000
 8001448:	40016020 	.word	0x40016020
 800144c:	40016040 	.word	0x40016040
 8001450:	40016060 	.word	0x40016060
 8001454:	200000ac 	.word	0x200000ac
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	200000b0 	.word	0x200000b0
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_FMPI2C_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12b      	bne.n	80014e6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration    
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_FMPI2C_MspInit+0x8c>)
 80014c6:	f001 fa55 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40006000 	.word	0x40006000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_I2S_MspInit+0x15c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	f040 8097 	bne.w	800164e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_I2S_MspInit+0x160>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a45      	ldr	r2, [pc, #276]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <HAL_I2S_MspInit+0x160>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_I2S_MspInit+0x160>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_I2S_MspInit+0x160>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_I2S_MspInit+0x160>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <HAL_I2S_MspInit+0x160>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_I2S_MspInit+0x160>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_I2S_MspInit+0x160>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80015ac:	2304      	movs	r3, #4
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80015bc:	2306      	movs	r3, #6
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <HAL_I2S_MspInit+0x164>)
 80015c8:	f001 f9d4 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80015cc:	2308      	movs	r3, #8
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <HAL_I2S_MspInit+0x164>)
 80015e8:	f001 f9c4 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80015ec:	2308      	movs	r3, #8
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015fc:	2305      	movs	r3, #5
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <HAL_I2S_MspInit+0x168>)
 8001608:	f001 f9b4 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 800160c:	2308      	movs	r3, #8
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <HAL_I2S_MspInit+0x16c>)
 8001628:	f001 f9a4 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163e:	2305      	movs	r3, #5
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <HAL_I2S_MspInit+0x170>)
 800164a:	f001 f993 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40003800 	.word	0x40003800
 800165c:	40023800 	.word	0x40023800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_QSPI_MspInit+0x178>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 80a6 	bne.w	80017e0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	4a53      	ldr	r2, [pc, #332]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6393      	str	r3, [r2, #56]	; 0x38
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a45      	ldr	r2, [pc, #276]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a3e      	ldr	r2, [pc, #248]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4a37      	ldr	r2, [pc, #220]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800174c:	2309      	movs	r3, #9
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4826      	ldr	r0, [pc, #152]	; (80017f0 <HAL_QSPI_MspInit+0x180>)
 8001758:	f001 f90c 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800175c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800176e:	230a      	movs	r3, #10
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	481e      	ldr	r0, [pc, #120]	; (80017f4 <HAL_QSPI_MspInit+0x184>)
 800177a:	f001 f8fb 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800177e:	2304      	movs	r3, #4
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800178e:	2309      	movs	r3, #9
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <HAL_QSPI_MspInit+0x188>)
 800179a:	f001 f8eb 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017b0:	2309      	movs	r3, #9
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <HAL_QSPI_MspInit+0x18c>)
 80017bc:	f001 f8da 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017d0:	230a      	movs	r3, #10
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_QSPI_MspInit+0x190>)
 80017dc:	f001 f8ca 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3738      	adds	r7, #56	; 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	a0001000 	.word	0xa0001000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021800 	.word	0x40021800

08001804 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_SD_MspInit+0xc0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d14a      	bne.n	80018bc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK 
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800188a:	230c      	movs	r3, #12
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <HAL_SD_MspInit+0xc8>)
 8001896:	f001 f86d 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin 
 800189a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800189e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018ac:	230c      	movs	r3, #12
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_SD_MspInit+0xcc>)
 80018b8:	f001 f85c 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020800 	.word	0x40020800

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <HAL_UART_MspInit+0xec>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12d      	bne.n	8001952 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800192e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001940:	230b      	movs	r3, #11
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	481f      	ldr	r0, [pc, #124]	; (80019c8 <HAL_UART_MspInit+0xf4>)
 800194c:	f001 f812 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001950:	e031      	b.n	80019b6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_UART_MspInit+0xf8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d12c      	bne.n	80019b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 8001982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_UART_MspInit+0xf0>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001994:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019a6:	2308      	movs	r3, #8
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_MspInit+0xf4>)
 80019b2:	f000 ffdf 	bl	8002974 <HAL_GPIO_Init>
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40011c00 	.word	0x40011c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40011400 	.word	0x40011400

080019d0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_FSMC_MspInit+0xc8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d151      	bne.n	8001a90 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_FSMC_MspInit+0xc8>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_FSMC_MspInit+0xcc>)
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <HAL_FSMC_MspInit+0xcc>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6393      	str	r3, [r2, #56]	; 0x38
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_FSMC_MspInit+0xcc>)
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8001a0e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a12:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin 
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a20:	230c      	movs	r3, #12
 8001a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <HAL_FSMC_MspInit+0xd0>)
 8001a2a:	f000 ffa3 	bl	8002974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8001a2e:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a32:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a40:	230c      	movs	r3, #12
 8001a42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <HAL_FSMC_MspInit+0xd4>)
 8001a4a:	f000 ff93 	bl	8002974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8001a4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a52:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin 
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a60:	230c      	movs	r3, #12
 8001a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <HAL_FSMC_MspInit+0xd8>)
 8001a6a:	f000 ff83 	bl	8002974 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8001a6e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a72:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin 
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a80:	230c      	movs	r3, #12
 8001a82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <HAL_FSMC_MspInit+0xdc>)
 8001a8a:	f000 ff73 	bl	8002974 <HAL_GPIO_Init>
 8001a8e:	e000      	b.n	8001a92 <HAL_FSMC_MspInit+0xc2>
    return;
 8001a90:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200000b4 	.word	0x200000b4
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40020c00 	.word	0x40020c00

08001ab0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ab8:	f7ff ff8a 	bl	80019d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <MemManage_Handler+0x4>

08001ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 f8ca 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <OTG_FS_IRQHandler+0x10>)
 8001b26:	f001 fb71 	bl	800320c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000085c 	.word	0x2000085c

08001b34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x50>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x16>
		heap_end = &end;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <_sbrk+0x50>)
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <_sbrk+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <_sbrk+0x50>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <_sbrk+0x50>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	466a      	mov	r2, sp
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d907      	bls.n	8001b6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b5e:	f009 f9e1 	bl	800af24 <__errno>
 8001b62:	4602      	mov	r2, r0
 8001b64:	230c      	movs	r3, #12
 8001b66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	e006      	b.n	8001b7c <_sbrk+0x48>
	}

	heap_end += incr;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <_sbrk+0x50>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <_sbrk+0x50>)
 8001b78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000b8 	.word	0x200000b8
 8001b88:	20000b28 	.word	0x20000b28

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SystemInit+0x28>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x28>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SystemInit+0x28>)
 8001ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bbe:	e003      	b.n	8001bc8 <LoopCopyDataInit>

08001bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bc6:	3104      	adds	r1, #4

08001bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bd0:	d3f6      	bcc.n	8001bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bd4:	e002      	b.n	8001bdc <LoopFillZerobss>

08001bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bd8:	f842 3b04 	str.w	r3, [r2], #4

08001bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001be0:	d3f9      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd3 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f009 f9a3 	bl	800af30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7fe fc95 	bl	8000518 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bf0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001bf4:	0800b160 	.word	0x0800b160
  ldr  r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bfc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001c00:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001c04:	20000b24 	.word	0x20000b24

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 fbbf 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fa1a 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fbd7 	bl	8002422 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 fb9f 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	2000048c 	.word	0x2000048c

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	2000048c 	.word	0x2000048c

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_Delay+0x40>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000008 	.word	0x20000008

08001d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e033      	b.n	8001db2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff f9b8 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d7a:	f023 0302 	bic.w	r3, r3, #2
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f94a 	bl	8002020 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f023 0303 	bic.w	r3, r3, #3
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
 8001da2:	e001      	b.n	8001da8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e113      	b.n	8002000 <HAL_ADC_ConfigChannel+0x244>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d925      	bls.n	8001e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b1e      	subs	r3, #30
 8001dfe:	2207      	movs	r2, #7
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68d9      	ldr	r1, [r3, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4403      	add	r3, r0
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	e022      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	2207      	movs	r2, #7
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4403      	add	r3, r0
 8001e70:	409a      	lsls	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d824      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b05      	subs	r3, #5
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b05      	subs	r3, #5
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eca:	e04c      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d824      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b23      	subs	r3, #35	; 0x23
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b23      	subs	r3, #35	; 0x23
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	e023      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b41      	subs	r3, #65	; 0x41
 8001f30:	221f      	movs	r2, #31
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b41      	subs	r3, #65	; 0x41
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_ADC_ConfigChannel+0x250>)
 8001f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a28      	ldr	r2, [pc, #160]	; (8002010 <HAL_ADC_ConfigChannel+0x254>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10f      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1d8>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d10b      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_ADC_ConfigChannel+0x254>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12b      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x23a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_ADC_ConfigChannel+0x258>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x1f4>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b11      	cmp	r3, #17
 8001fae:	d122      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_ADC_ConfigChannel+0x258>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_ADC_ConfigChannel+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <HAL_ADC_ConfigChannel+0x260>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9a      	lsrs	r2, r3, #18
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40012300 	.word	0x40012300
 8002010:	40012000 	.word	0x40012000
 8002014:	10000012 	.word	0x10000012
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83

08002020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002028:	4b79      	ldr	r3, [pc, #484]	; (8002210 <ADC_Init+0x1f0>)
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	4a58      	ldr	r2, [pc, #352]	; (8002214 <ADC_Init+0x1f4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d022      	beq.n	80020fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e00f      	b.n	800211e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800211c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0202 	bic.w	r2, r2, #2
 800212c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
 8002138:	005a      	lsls	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800216a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	3b01      	subs	r3, #1
 8002178:	035a      	lsls	r2, r3, #13
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	e007      	b.n	8002194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	051a      	lsls	r2, r3, #20
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d6:	025a      	lsls	r2, r3, #9
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	029a      	lsls	r2, r3, #10
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40012300 	.word	0x40012300
 8002214:	0f000001 	.word	0x0f000001

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	; (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff8e 	bl	80022b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff29 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff3e 	bl	8002260 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff8e 	bl	800230c <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5d 	bl	80022b8 <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff31 	bl	800227c <__NVIC_EnableIRQ>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffa2 	bl	8002374 <SysTick_Config>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e014      	b.n	8002476 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe feaf 	bl	80011c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_DAC_ConfigChannel+0x20>
 800249a:	2302      	movs	r3, #2
 800249c:	e036      	b.n	800250c <HAL_DAC_ConfigChannel+0x8e>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2202      	movs	r2, #2
 80024a8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	22c0      	movs	r2, #192	; 0xc0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	400a      	ands	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0cf      	b.n	80026ca <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00e      	beq.n	8002552 <HAL_DFSDM_ChannelInit+0x3a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_DFSDM_ChannelInit+0x1c0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_DFSDM_ChannelInit+0x3a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_DFSDM_ChannelInit+0x1c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d004      	beq.n	8002552 <HAL_DFSDM_ChannelInit+0x3a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_DFSDM_ChannelInit+0x1c8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d106      	bne.n	8002560 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002552:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002554:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002556:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002558:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <HAL_DFSDM_ChannelInit+0x1bc>)
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e005      	b.n	800256c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002560:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_DFSDM_ChannelInit+0x1d4>)
 8002562:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002564:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002566:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002568:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_DFSDM_ChannelInit+0x1dc>)
 800256a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f8c1 	bl	80026f8 <DFSDM_GetChannelFromInstance>
 8002576:	4603      	mov	r3, r0
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0a0      	b.n	80026ca <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fe fe5d 	bl	8001248 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d125      	bne.n	80025ec <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80025fa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800260a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002610:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 020f 	bic.w	r2, r2, #15
 8002628:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002650:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 0207 	and.w	r2, r2, #7
 800267c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f81e 	bl	80026f8 <DFSDM_GetChannelFromInstance>
 80026bc:	4603      	mov	r3, r0
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40016000 	.word	0x40016000
 80026d8:	40016020 	.word	0x40016020
 80026dc:	40016040 	.word	0x40016040
 80026e0:	40016060 	.word	0x40016060
 80026e4:	200000bc 	.word	0x200000bc
 80026e8:	200000c0 	.word	0x200000c0
 80026ec:	200000d0 	.word	0x200000d0
 80026f0:	200000d4 	.word	0x200000d4
 80026f4:	40016400 	.word	0x40016400

080026f8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <DFSDM_GetChannelFromInstance+0x9c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <DFSDM_GetChannelFromInstance+0x18>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <DFSDM_GetChannelFromInstance+0xa0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e037      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <DFSDM_GetChannelFromInstance+0xa4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <DFSDM_GetChannelFromInstance+0x2e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d102      	bne.n	800272c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e02c      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <DFSDM_GetChannelFromInstance+0xac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <DFSDM_GetChannelFromInstance+0x44>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d102      	bne.n	8002742 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800273c:	2302      	movs	r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e021      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <DFSDM_GetChannelFromInstance+0xb4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d003      	beq.n	8002752 <DFSDM_GetChannelFromInstance+0x5a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <DFSDM_GetChannelFromInstance+0xb8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d102      	bne.n	8002758 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002752:	2303      	movs	r3, #3
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e016      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <DFSDM_GetChannelFromInstance+0xbc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002760:	2304      	movs	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e00f      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <DFSDM_GetChannelFromInstance+0xc0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d102      	bne.n	8002774 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800276e:	2305      	movs	r3, #5
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	e008      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <DFSDM_GetChannelFromInstance+0xc4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d102      	bne.n	8002782 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800277c:	2306      	movs	r3, #6
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e001      	b.n	8002786 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002782:	2307      	movs	r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40016000 	.word	0x40016000
 8002798:	40016400 	.word	0x40016400
 800279c:	40016020 	.word	0x40016020
 80027a0:	40016420 	.word	0x40016420
 80027a4:	40016040 	.word	0x40016040
 80027a8:	40016440 	.word	0x40016440
 80027ac:	40016060 	.word	0x40016060
 80027b0:	40016460 	.word	0x40016460
 80027b4:	40016480 	.word	0x40016480
 80027b8:	400164a0 	.word	0x400164a0
 80027bc:	400164c0 	.word	0x400164c0

080027c0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e081      	b.n	80028d6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fe40 	bl	800146c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	; 0x24
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002810:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002820:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	e006      	b.n	8002848 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d104      	bne.n	800285a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002858:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	ea42 0103 	orr.w	r1, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69d9      	ldr	r1, [r3, #28]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d138      	bne.n	8002966 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80028fe:	2302      	movs	r3, #2
 8002900:	e032      	b.n	8002968 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2224      	movs	r2, #36	; 0x24
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002930:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e165      	b.n	8002c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 8154 	bne.w	8002c56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d00b      	beq.n	80029ce <HAL_GPIO_Init+0x5a>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029c2:	2b11      	cmp	r3, #17
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b12      	cmp	r3, #18
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0xfc>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ae 	beq.w	8002c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a5b      	ldr	r2, [pc, #364]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x21a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4d      	ldr	r2, [pc, #308]	; (8002c7c <HAL_GPIO_Init+0x308>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4c      	ldr	r2, [pc, #304]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x212>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_GPIO_Init+0x310>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4a      	ldr	r2, [pc, #296]	; (8002c88 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x20a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a49      	ldr	r2, [pc, #292]	; (8002c8c <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a48      	ldr	r2, [pc, #288]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x202>
 8002b72:	2306      	movs	r3, #6
 8002b74:	e00c      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e00a      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e008      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e006      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e004      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e002      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f002 0203 	and.w	r2, r2, #3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4093      	lsls	r3, r2
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba0:	4934      	ldr	r1, [pc, #208]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd2:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c26:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c50:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	f67f ae96 	bls.w	8002990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	3724      	adds	r7, #36	; 0x24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40013800 	.word	0x40013800
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	40020400 	.word	0x40020400
 8002c80:	40020800 	.word	0x40020800
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40021400 	.word	0x40021400
 8002c90:	40021800 	.word	0x40021800
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca8:	787b      	ldrb	r3, [r7, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb4:	e003      	b.n	8002cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	041a      	lsls	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	401a      	ands	r2, r3
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d104      	bne.n	8002cee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	041a      	lsls	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b08f      	sub	sp, #60	; 0x3c
 8002d04:	af0a      	add	r7, sp, #40	; 0x28
 8002d06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e054      	b.n	8002dbc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f007 fe4f 	bl	800a9d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 f941 	bl	8007fd8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	687e      	ldr	r6, [r7, #4]
 8002d5e:	466d      	mov	r5, sp
 8002d60:	f106 0410 	add.w	r4, r6, #16
 8002d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d74:	1d33      	adds	r3, r6, #4
 8002d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	f005 f8bb 	bl	8007ef4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f005 f938 	bl	8007ffa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	687e      	ldr	r6, [r7, #4]
 8002d92:	466d      	mov	r5, sp
 8002d94:	f106 0410 	add.w	r4, r6, #16
 8002d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da8:	1d33      	adds	r3, r6, #4
 8002daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dac:	6838      	ldr	r0, [r7, #0]
 8002dae:	f005 fa4b 	bl	8008248 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	70fb      	strb	r3, [r7, #3]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70bb      	strb	r3, [r7, #2]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_HCD_HC_Init+0x28>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e07f      	b.n	8002eec <HAL_HCD_HC_Init+0x128>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	333d      	adds	r3, #61	; 0x3d
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	3338      	adds	r3, #56	; 0x38
 8002e18:	787a      	ldrb	r2, [r7, #1]
 8002e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3340      	adds	r3, #64	; 0x40
 8002e2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3339      	adds	r3, #57	; 0x39
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	333f      	adds	r3, #63	; 0x3f
 8002e54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	78bb      	ldrb	r3, [r7, #2]
 8002e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e62:	b2d8      	uxtb	r0, r3
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	333a      	adds	r3, #58	; 0x3a
 8002e72:	4602      	mov	r2, r0
 8002e74:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da0a      	bge.n	8002e94 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	333b      	adds	r3, #59	; 0x3b
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e009      	b.n	8002ea8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333b      	adds	r3, #59	; 0x3b
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333c      	adds	r3, #60	; 0x3c
 8002eb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ebc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	787c      	ldrb	r4, [r7, #1]
 8002ec4:	78ba      	ldrb	r2, [r7, #2]
 8002ec6:	78f9      	ldrb	r1, [r7, #3]
 8002ec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	4623      	mov	r3, r4
 8002eda:	f005 fb31 	bl	8008540 <USB_HC_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}

08002ef4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_HCD_HC_Halt+0x1e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00f      	b.n	8002f32 <HAL_HCD_HC_Halt+0x3e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fd6b 	bl	80089fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	70fb      	strb	r3, [r7, #3]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70bb      	strb	r3, [r7, #2]
 8002f52:	4613      	mov	r3, r2
 8002f54:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333b      	adds	r3, #59	; 0x3b
 8002f66:	78ba      	ldrb	r2, [r7, #2]
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	787a      	ldrb	r2, [r7, #1]
 8002f7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f7e:	7c3b      	ldrb	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f200 80d6 	bhi.w	8003162 <HAL_HCD_HC_SubmitRequest+0x226>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x80>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800314d 	.word	0x0800314d
 8002fc4:	08003039 	.word	0x08003039
 8002fc8:	080030c3 	.word	0x080030c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80c9 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c5 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3351      	adds	r3, #81	; 0x51
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3351      	adds	r3, #81	; 0x51
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003020:	e0a1      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e096      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d120      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3351      	adds	r3, #81	; 0x51
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003068:	e07e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e073      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3342      	adds	r3, #66	; 0x42
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e05d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3351      	adds	r3, #81	; 0x51
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f2:	e039      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3342      	adds	r3, #66	; 0x42
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e02e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e018      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e002      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	; 0x44
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	8b39      	ldrh	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3348      	adds	r3, #72	; 0x48
 800318e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	f005 faaa 	bl	8008754 <USB_HC_StartXfer>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 ffcd 	bl	80081c2 <USB_GetMode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80f1 	bne.w	8003412 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 ffb1 	bl	800819c <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e7 	beq.w	8003410 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 ffa8 	bl	800819c <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 ff98 	bl	800819c <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d104      	bne.n	8003282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f004 ff88 	bl	800819c <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d104      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 ff78 	bl	800819c <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 ff6a 	bl	800819c <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d117      	bne.n	8003304 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80032e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032e6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f007 fbef 	bl	800aacc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 f85d 	bl	80083b4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 ff47 	bl	800819c <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d102      	bne.n	8003320 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 f8c8 	bl	80044b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 ff39 	bl	800819c <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d106      	bne.n	8003342 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f007 fbad 	bl	800aa94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 ff28 	bl	800819c <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	d138      	bne.n	80033ca <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 fb3d 	bl	80089dc <USB_HC_ReadInterrupt>
 8003362:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e025      	b.n	80033b6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d106      	bne.n	80033a4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8cf 	bl	8003540 <HCD_HC_IN_IRQHandler>
 80033a2:	e005      	b.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fc5f 	bl	8003c6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3d4      	bcc.n	800336a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fee4 	bl	800819c <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_IRQHandler+0x1d6>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_HCD_IRQHandler+0x1d8>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 ffad 	bl	8004358 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	619a      	str	r2, [r3, #24]
 800340e:	e000      	b.n	8003412 <HAL_HCD_IRQHandler+0x206>
      return;
 8003410:	bf00      	nop
    }
  }
}
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_HCD_Start+0x16>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_HCD_Start+0x3e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fdbb 	bl	8007fb6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f005 f818 	bl	800847c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_HCD_Stop+0x16>
 8003470:	2302      	movs	r3, #2
 8003472:	e00d      	b.n	8003490 <HAL_HCD_Stop+0x32>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f005 fbf7 	bl	8008c74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 ffbf 	bl	8008428 <USB_ResetPort>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	; 0x4c
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f005 f801 	bl	800851c <USB_GetCurrentFrame>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 ffdc 	bl	80084ee <USB_GetHostSpeed>
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d119      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2304      	movs	r3, #4
 8003580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60d3      	str	r3, [r2, #12]
 80035a2:	e095      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d109      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2320      	movs	r3, #32
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e080      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d134      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335d      	adds	r3, #93	; 0x5d
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2310      	movs	r3, #16
 8003628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2308      	movs	r3, #8
 800363a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f005 f9d9 	bl	80089fe <USB_HC_Halt>
 800364c:	e040      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d134      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f005 f9b4 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2310      	movs	r3, #16
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	335d      	adds	r3, #93	; 0x5d
 80036b8:	2208      	movs	r2, #8
 80036ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d122      	bne.n	800372e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f005 f973 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800372c:	e29b      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80c1 	bne.w	80038c8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01b      	beq.n	8003786 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	440b      	add	r3, r1
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003772:	1ad1      	subs	r1, r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4403      	add	r3, r0
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	335d      	adds	r3, #93	; 0x5d
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	333f      	adds	r3, #63	; 0x3f
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	333f      	adds	r3, #63	; 0x3f
 80037e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d121      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f005 f8f1 	bl	80089fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2310      	movs	r3, #16
 800382c:	6093      	str	r3, [r2, #8]
 800382e:	e034      	b.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d129      	bne.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003864:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4601      	mov	r1, r0
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f007 f927 	bl	800aae8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3350      	adds	r3, #80	; 0x50
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3350      	adds	r3, #80	; 0x50
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
}
 80038c6:	e1ce      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80f1 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	335d      	adds	r3, #93	; 0x5d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10a      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e0b0      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335d      	adds	r3, #93	; 0x5d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10a      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	335c      	adds	r3, #92	; 0x5c
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09a      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335d      	adds	r3, #93	; 0x5d
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	335d      	adds	r3, #93	; 0x5d
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d156      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	3358      	adds	r3, #88	; 0x58
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4403      	add	r3, r0
 80039a6:	3358      	adds	r3, #88	; 0x58
 80039a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d914      	bls.n	80039ea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	3358      	adds	r3, #88	; 0x58
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e009      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02d      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335d      	adds	r3, #93	; 0x5d
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d122      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4601      	mov	r1, r0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f007 f814 	bl	800aae8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac0:	e0d1      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d13e      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	3358      	adds	r3, #88	; 0x58
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4403      	add	r3, r0
 8003b1a:	3358      	adds	r3, #88	; 0x58
 8003b1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	335d      	adds	r3, #93	; 0x5d
 8003b2e:	2206      	movs	r2, #6
 8003b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 ff5e 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	6093      	str	r3, [r2, #8]
}
 8003b54:	e087      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d17c      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d122      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3358      	adds	r3, #88	; 0x58
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 ff1c 	bl	80089fe <USB_HC_Halt>
 8003bc6:	e045      	b.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333f      	adds	r3, #63	; 0x3f
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d12f      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3358      	adds	r3, #88	; 0x58
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	335d      	adds	r3, #93	; 0x5d
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 fed5 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d119      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd0:	e33e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d141      	bne.n	8003d6c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 831f 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	333d      	adds	r3, #61	; 0x3d
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 fe4a 	bl	80089fe <USB_HC_Halt>
}
 8003d6a:	e2f1      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d13f      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	335d      	adds	r3, #93	; 0x5d
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	; 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3358      	adds	r3, #88	; 0x58
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f004 fe08 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	e2a6      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d122      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 fdda 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	6093      	str	r3, [r2, #8]
}
 8003e5e:	e277      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d135      	bne.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3358      	adds	r3, #88	; 0x58
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 fda2 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	335d      	adds	r3, #93	; 0x5d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
}
 8003ee0:	e236      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d12b      	bne.n	8003f50 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f004 fd62 	bl	80089fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	335d      	adds	r3, #93	; 0x5d
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	e1ff      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d155      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3358      	adds	r3, #88	; 0x58
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	335d      	adds	r3, #93	; 0x5d
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 fd00 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2310      	movs	r3, #16
 800400e:	6093      	str	r3, [r2, #8]
}
 8004010:	e19e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d12b      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f004 fcd3 	bl	80089fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335d      	adds	r3, #93	; 0x5d
 8004068:	2206      	movs	r2, #6
 800406a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	6093      	str	r3, [r2, #8]
}
 800407e:	e167      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d135      	bne.n	8004104 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f004 fc9b 	bl	80089fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2310      	movs	r3, #16
 80040d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	e125      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	f040 811a 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004136:	f023 0302 	bic.w	r3, r3, #2
 800413a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	335d      	adds	r3, #93	; 0x5d
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d137      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335c      	adds	r3, #92	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00b      	beq.n	8004194 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418e:	2b03      	cmp	r3, #3
 8004190:	f040 80c5 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	3351      	adds	r3, #81	; 0x51
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2d8      	uxtb	r0, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3351      	adds	r3, #81	; 0x51
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e0ad      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	335d      	adds	r3, #93	; 0x5d
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d10a      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e097      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	335d      	adds	r3, #93	; 0x5d
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d10a      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e081      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	335d      	adds	r3, #93	; 0x5d
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10a      	bne.n	8004246 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2205      	movs	r2, #5
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e06b      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	335d      	adds	r3, #93	; 0x5d
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d00a      	beq.n	8004272 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	335d      	adds	r3, #93	; 0x5d
 800426c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800426e:	2b08      	cmp	r3, #8
 8004270:	d155      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4403      	add	r3, r0
 8004294:	3358      	adds	r3, #88	; 0x58
 8004296:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3358      	adds	r3, #88	; 0x58
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d914      	bls.n	80042d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	3358      	adds	r3, #88	; 0x58
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	335c      	adds	r3, #92	; 0x5c
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e009      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004302:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b2d8      	uxtb	r0, r3
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4601      	mov	r1, r0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f006 fbcc 	bl	800aae8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	0c5b      	lsrs	r3, r3, #17
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d003      	beq.n	800439c <HCD_RXQLVL_IRQHandler+0x44>
 8004394:	2b05      	cmp	r3, #5
 8004396:	f000 8082 	beq.w	800449e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800439a:	e083      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07f      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d074      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3344      	adds	r3, #68	; 0x44
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f003 feb9 	bl	800814a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3344      	adds	r3, #68	; 0x44
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4403      	add	r3, r0
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HCD_RXQLVL_IRQHandler+0x154>)
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d031      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004454:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	3350      	adds	r3, #80	; 0x50
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	4602      	mov	r2, r0
 800449a:	701a      	strb	r2, [r3, #0]
      break;
 800449c:	e001      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044a2:	bf00      	nop
  }
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	1ff80000 	.word	0x1ff80000

080044b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10a      	bne.n	8004508 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004500:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f006 fad4 	bl	800aab0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d147      	bne.n	80045aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d129      	bne.n	8004580 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d113      	bne.n	800455c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453e:	d106      	bne.n	800454e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f003 ff34 	bl	80083b4 <USB_InitFSLSPClkSel>
 800454c:	e011      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f003 ff2d 	bl	80083b4 <USB_InitFSLSPClkSel>
 800455a:	e00a      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	461a      	mov	r2, r3
 800456c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004570:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f006 fac6 	bl	800ab04 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f006 fa99 	bl	800aab0 <HAL_HCD_Connect_Callback>
 800457e:	e014      	b.n	80045aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f006 facd 	bl	800ab20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004594:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004598:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80045a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d103      	bne.n	80045bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e154      	b.n	800488c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a98      	ldr	r2, [pc, #608]	; (800485c <HAL_I2S_Init+0x28c>)
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fc ff7d 	bl	80014fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004618:	f023 030f 	bic.w	r3, r3, #15
 800461c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2202      	movs	r2, #2
 8004624:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d06f      	beq.n	800470e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004636:	2310      	movs	r3, #16
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e001      	b.n	8004640 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b20      	cmp	r3, #32
 8004646:	d802      	bhi.n	800464e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_I2S_Init+0x290>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_I2S_Init+0x92>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a81      	ldr	r2, [pc, #516]	; (8004864 <HAL_I2S_Init+0x294>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d104      	bne.n	800466c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004662:	2001      	movs	r0, #1
 8004664:	f001 f992 	bl	800598c <HAL_RCCEx_GetPeriphCLKFreq>
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	e003      	b.n	8004674 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800466c:	2002      	movs	r0, #2
 800466e:	f001 f98d 	bl	800598c <HAL_RCCEx_GetPeriphCLKFreq>
 8004672:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d125      	bne.n	80046ca <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	3305      	adds	r3, #5
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e01f      	b.n	80046e8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	3305      	adds	r3, #5
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e00e      	b.n	80046e8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	3305      	adds	r3, #5
 80046e6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4a5f      	ldr	r2, [pc, #380]	; (8004868 <HAL_I2S_Init+0x298>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e003      	b.n	8004716 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800470e:	2302      	movs	r3, #2
 8004710:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d902      	bls.n	8004722 <HAL_I2S_Init+0x152>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2bff      	cmp	r3, #255	; 0xff
 8004720:	d907      	bls.n	8004732 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0ac      	b.n	800488c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	430a      	orrs	r2, r1
 8004744:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004750:	f023 030f 	bic.w	r3, r3, #15
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6851      	ldr	r1, [r2, #4]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6892      	ldr	r2, [r2, #8]
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68d2      	ldr	r2, [r2, #12]
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6992      	ldr	r2, [r2, #24]
 8004768:	430a      	orrs	r2, r1
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004774:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d003      	beq.n	8004786 <HAL_I2S_Init+0x1b6>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2bb0      	cmp	r3, #176	; 0xb0
 8004784:	d107      	bne.n	8004796 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004794:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d16e      	bne.n	800487c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a32      	ldr	r2, [pc, #200]	; (800486c <HAL_I2S_Init+0x29c>)
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_I2S_Init+0x290>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d101      	bne.n	80047b2 <HAL_I2S_Init+0x1e2>
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <HAL_I2S_Init+0x2a0>)
 80047b0:	e001      	b.n	80047b6 <HAL_I2S_Init+0x1e6>
 80047b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4928      	ldr	r1, [pc, #160]	; (8004860 <HAL_I2S_Init+0x290>)
 80047be:	428a      	cmp	r2, r1
 80047c0:	d101      	bne.n	80047c6 <HAL_I2S_Init+0x1f6>
 80047c2:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <HAL_I2S_Init+0x2a0>)
 80047c4:	e001      	b.n	80047ca <HAL_I2S_Init+0x1fa>
 80047c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047ce:	f023 030f 	bic.w	r3, r3, #15
 80047d2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a21      	ldr	r2, [pc, #132]	; (8004860 <HAL_I2S_Init+0x290>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_I2S_Init+0x212>
 80047de:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_I2S_Init+0x2a0>)
 80047e0:	e001      	b.n	80047e6 <HAL_I2S_Init+0x216>
 80047e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e6:	2202      	movs	r2, #2
 80047e8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <HAL_I2S_Init+0x290>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_I2S_Init+0x228>
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_I2S_Init+0x2a0>)
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x22c>
 80047f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d003      	beq.n	8004812 <HAL_I2S_Init+0x242>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e001      	b.n	800481e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	b299      	uxth	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004834:	4303      	orrs	r3, r0
 8004836:	b29b      	uxth	r3, r3
 8004838:	430b      	orrs	r3, r1
 800483a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800483c:	4313      	orrs	r3, r2
 800483e:	b29a      	uxth	r2, r3
 8004840:	897b      	ldrh	r3, [r7, #10]
 8004842:	4313      	orrs	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800484a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a03      	ldr	r2, [pc, #12]	; (8004860 <HAL_I2S_Init+0x290>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d10e      	bne.n	8004874 <HAL_I2S_Init+0x2a4>
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_I2S_Init+0x2a0>)
 8004858:	e00e      	b.n	8004878 <HAL_I2S_Init+0x2a8>
 800485a:	bf00      	nop
 800485c:	0800498b 	.word	0x0800498b
 8004860:	40003800 	.word	0x40003800
 8004864:	40003c00 	.word	0x40003c00
 8004868:	cccccccd 	.word	0xcccccccd
 800486c:	08004aa1 	.word	0x08004aa1
 8004870:	40003400 	.word	0x40003400
 8004874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004878:	897a      	ldrh	r2, [r7, #10]
 800487a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004914:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffb8 	bl	8004894 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	b292      	uxth	r2, r2
 8004940:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10e      	bne.n	8004982 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004972:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff93 	bl	80048a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d13a      	bne.n	8004a1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d109      	bne.n	80049c4 <I2S_IRQHandler+0x3a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d102      	bne.n	80049c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffb4 	bl	800492c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d126      	bne.n	8004a1c <I2S_IRQHandler+0x92>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d11f      	bne.n	8004a1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff50 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d136      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d109      	bne.n	8004a46 <I2S_IRQHandler+0xbc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d102      	bne.n	8004a46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff45 	bl	80048d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d122      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d11b      	bne.n	8004a96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff13 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4aa2      	ldr	r2, [pc, #648]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004aba:	4ba2      	ldr	r3, [pc, #648]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004abc:	e001      	b.n	8004ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a9b      	ldr	r2, [pc, #620]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ad8:	4b9a      	ldr	r3, [pc, #616]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ada:	e001      	b.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d004      	beq.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8099 	bne.w	8004c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d107      	bne.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f925 	bl	8004d5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9c8 	bl	8004ebc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d13a      	bne.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d035      	beq.n	8004bac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a7e      	ldr	r2, [pc, #504]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b4a:	4b7e      	ldr	r3, [pc, #504]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b4c:	e001      	b.n	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4979      	ldr	r1, [pc, #484]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b5e:	4b79      	ldr	r3, [pc, #484]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b60:	e001      	b.n	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f043 0202 	orr.w	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fe88 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	f040 80be 	bne.w	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80b8 	beq.w	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a59      	ldr	r2, [pc, #356]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bde:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004be0:	e001      	b.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4954      	ldr	r1, [pc, #336]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bee:	428b      	cmp	r3, r1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004bf2:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bf4:	e001      	b.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bfe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fe4a 	bl	80048bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c28:	e084      	b.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8be 	bl	8004dc0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8fd 	bl	8004e58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d12f      	bne.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02a      	beq.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c8e:	e001      	b.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4929      	ldr	r1, [pc, #164]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca2:	e001      	b.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fdfa 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d131      	bne.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02c      	beq.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004ce6:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ce8:	e001      	b.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4912      	ldr	r1, [pc, #72]	; (8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d101      	bne.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cfc:	e001      	b.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fdc5 	bl	80048bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d32:	e000      	b.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d34:	bf00      	nop
}
 8004d36:	bf00      	nop
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40003800 	.word	0x40003800
 8004d44:	40003400 	.word	0x40003400

08004d48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c99      	adds	r1, r3, #2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d113      	bne.n	8004db6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffc9 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	1c99      	adds	r1, r3, #2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6251      	str	r1, [r2, #36]	; 0x24
 8004dd2:	8819      	ldrh	r1, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <I2SEx_TxISR_I2SExt+0x22>
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004de0:	e001      	b.n	8004de6 <I2SEx_TxISR_I2SExt+0x26>
 8004de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de6:	460a      	mov	r2, r1
 8004de8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d121      	bne.n	8004e46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <I2SEx_TxISR_I2SExt+0x50>
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004e0e:	e001      	b.n	8004e14 <I2SEx_TxISR_I2SExt+0x54>
 8004e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	490d      	ldr	r1, [pc, #52]	; (8004e50 <I2SEx_TxISR_I2SExt+0x90>)
 8004e1c:	428b      	cmp	r3, r1
 8004e1e:	d101      	bne.n	8004e24 <I2SEx_TxISR_I2SExt+0x64>
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <I2SEx_TxISR_I2SExt+0x94>)
 8004e22:	e001      	b.n	8004e28 <I2SEx_TxISR_I2SExt+0x68>
 8004e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff81 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40003800 	.word	0x40003800
 8004e54:	40003400 	.word	0x40003400

08004e58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	1c99      	adds	r1, r3, #2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e70:	b282      	uxth	r2, r0
 8004e72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d113      	bne.n	8004eb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ff4a 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <I2SEx_RxISR_I2SExt+0x16>
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004ed0:	e001      	b.n	8004ed6 <I2SEx_RxISR_I2SExt+0x1a>
 8004ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed6:	68d8      	ldr	r0, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	1c99      	adds	r1, r3, #2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ee2:	b282      	uxth	r2, r0
 8004ee4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d121      	bne.n	8004f42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <I2SEx_RxISR_I2SExt+0x50>
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004f0a:	e001      	b.n	8004f10 <I2SEx_RxISR_I2SExt+0x54>
 8004f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <I2SEx_RxISR_I2SExt+0x90>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d101      	bne.n	8004f20 <I2SEx_RxISR_I2SExt+0x64>
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <I2SEx_RxISR_I2SExt+0x94>)
 8004f1e:	e001      	b.n	8004f24 <I2SEx_RxISR_I2SExt+0x68>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff03 	bl	8004d48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40003800 	.word	0x40003800
 8004f50:	40003400 	.word	0x40003400

08004f54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7fc feba 	bl	8001cd8 <HAL_GetTick>
 8004f64:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e069      	b.n	8005044 <HAL_QSPI_Init+0xf0>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_QSPI_Init+0x40>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fc fb73 	bl	8001670 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004f8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f85e 	bl	8005050 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2120      	movs	r1, #32
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f856 	bl	800506c <QSPI_WaitFlagStateUntilTimeout>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d137      	bne.n	800503a <HAL_QSPI_Init+0xe6>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fd4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6852      	ldr	r2, [r2, #4]
 8004fdc:	0611      	lsls	r1, r2, #24
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68d2      	ldr	r2, [r2, #12]
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	69d2      	ldr	r2, [r2, #28]
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6a12      	ldr	r2, [r2, #32]
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <HAL_QSPI_Init+0xf8>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6912      	ldr	r2, [r2, #16]
 8005006:	0411      	lsls	r1, r2, #16
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6952      	ldr	r2, [r2, #20]
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6992      	ldr	r2, [r2, #24]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	430b      	orrs	r3, r1
 800501a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16U) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	ffe0f8fe 	.word	0xffe0f8fe

08005050 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800507c:	e01a      	b.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d016      	beq.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800508c:	f7fc fe24 	bl	8001cd8 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d20b      	bcs.n	80050b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2204      	movs	r2, #4
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e00e      	b.n	80050d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf14      	ite	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	2300      	moveq	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d1d6      	bne.n	800507e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0cc      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b68      	ldr	r3, [pc, #416]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d90c      	bls.n	8005118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b65      	ldr	r3, [pc, #404]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0b8      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d020      	beq.n	8005166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005130:	4b59      	ldr	r3, [pc, #356]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a58      	ldr	r2, [pc, #352]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800513a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005148:	4b53      	ldr	r3, [pc, #332]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a52      	ldr	r2, [pc, #328]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b50      	ldr	r3, [pc, #320]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	494d      	ldr	r1, [pc, #308]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d044      	beq.n	80051fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517a:	4b47      	ldr	r3, [pc, #284]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d119      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e07f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d003      	beq.n	800519a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005196:	2b03      	cmp	r3, #3
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e06f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e067      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b37      	ldr	r3, [pc, #220]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4934      	ldr	r1, [pc, #208]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fc fd84 	bl	8001cd8 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fc fd80 	bl	8001cd8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e04f      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d20c      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_RCC_ClockConfig+0x1b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d001      	beq.n	8005224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e032      	b.n	800528a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005230:	4b19      	ldr	r3, [pc, #100]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4916      	ldr	r1, [pc, #88]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	490e      	ldr	r1, [pc, #56]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005262:	f000 f821 	bl	80052a8 <HAL_RCC_GetSysClockFreq>
 8005266:	4601      	mov	r1, r0
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	5cd3      	ldrb	r3, [r2, r3]
 8005276:	fa21 f303 	lsr.w	r3, r1, r3
 800527a:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527e:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fc fce4 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023c00 	.word	0x40023c00
 8005298:	40023800 	.word	0x40023800
 800529c:	0800b138 	.word	0x0800b138
 80052a0:	20000000 	.word	0x20000000
 80052a4:	20000004 	.word	0x20000004

080052a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	2300      	movs	r3, #0
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d007      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x32>
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d008      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0x38>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 808d 	bne.w	80053ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d4:	4b4b      	ldr	r3, [pc, #300]	; (8005404 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052d6:	60bb      	str	r3, [r7, #8]
       break;
 80052d8:	e08c      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052da:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_RCC_GetSysClockFreq+0x160>)
 80052dc:	60bb      	str	r3, [r7, #8]
      break;
 80052de:	e089      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e0:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d023      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f6:	4b42      	ldr	r3, [pc, #264]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	099b      	lsrs	r3, r3, #6
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	ea03 0501 	and.w	r5, r3, r1
 800530c:	ea04 0602 	and.w	r6, r4, r2
 8005310:	4a3d      	ldr	r2, [pc, #244]	; (8005408 <HAL_RCC_GetSysClockFreq+0x160>)
 8005312:	fb02 f106 	mul.w	r1, r2, r6
 8005316:	2200      	movs	r2, #0
 8005318:	fb02 f205 	mul.w	r2, r2, r5
 800531c:	440a      	add	r2, r1
 800531e:	493a      	ldr	r1, [pc, #232]	; (8005408 <HAL_RCC_GetSysClockFreq+0x160>)
 8005320:	fba5 0101 	umull	r0, r1, r5, r1
 8005324:	1853      	adds	r3, r2, r1
 8005326:	4619      	mov	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f04f 0400 	mov.w	r4, #0
 800532e:	461a      	mov	r2, r3
 8005330:	4623      	mov	r3, r4
 8005332:	f7fa ff71 	bl	8000218 <__aeabi_uldivmod>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e049      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	f240 11ff 	movw	r1, #511	; 0x1ff
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	ea03 0501 	and.w	r5, r3, r1
 8005354:	ea04 0602 	and.w	r6, r4, r2
 8005358:	4629      	mov	r1, r5
 800535a:	4632      	mov	r2, r6
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	0154      	lsls	r4, r2, #5
 8005366:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800536a:	014b      	lsls	r3, r1, #5
 800536c:	4619      	mov	r1, r3
 800536e:	4622      	mov	r2, r4
 8005370:	1b49      	subs	r1, r1, r5
 8005372:	eb62 0206 	sbc.w	r2, r2, r6
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	f04f 0400 	mov.w	r4, #0
 800537e:	0194      	lsls	r4, r2, #6
 8005380:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005384:	018b      	lsls	r3, r1, #6
 8005386:	1a5b      	subs	r3, r3, r1
 8005388:	eb64 0402 	sbc.w	r4, r4, r2
 800538c:	f04f 0100 	mov.w	r1, #0
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	00e2      	lsls	r2, r4, #3
 8005396:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800539a:	00d9      	lsls	r1, r3, #3
 800539c:	460b      	mov	r3, r1
 800539e:	4614      	mov	r4, r2
 80053a0:	195b      	adds	r3, r3, r5
 80053a2:	eb44 0406 	adc.w	r4, r4, r6
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	02a2      	lsls	r2, r4, #10
 80053b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053b4:	0299      	lsls	r1, r3, #10
 80053b6:	460b      	mov	r3, r1
 80053b8:	4614      	mov	r4, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	4621      	mov	r1, r4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f04f 0400 	mov.w	r4, #0
 80053c4:	461a      	mov	r2, r3
 80053c6:	4623      	mov	r3, r4
 80053c8:	f7fa ff26 	bl	8000218 <__aeabi_uldivmod>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_GetSysClockFreq+0x158>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	3301      	adds	r3, #1
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	60bb      	str	r3, [r7, #8]
      break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetSysClockFreq+0x15c>)
 80053f0:	60bb      	str	r3, [r7, #8]
      break;
 80053f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f4:	68bb      	ldr	r3, [r7, #8]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
 8005404:	00f42400 	.word	0x00f42400
 8005408:	017d7840 	.word	0x017d7840

0800540c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCC_GetHCLKFreq+0x14>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000000 	.word	0x20000000

08005424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005428:	f7ff fff0 	bl	800540c <HAL_RCC_GetHCLKFreq>
 800542c:	4601      	mov	r1, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0a9b      	lsrs	r3, r3, #10
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4a03      	ldr	r2, [pc, #12]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800b148 	.word	0x0800b148

0800544c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005450:	f7ff ffdc 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8005454:	4601      	mov	r1, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0b5b      	lsrs	r3, r3, #13
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4a03      	ldr	r2, [pc, #12]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	0800b148 	.word	0x0800b148

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005498:	4b7a      	ldr	r3, [pc, #488]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4977      	ldr	r1, [pc, #476]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d010      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80054c6:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	496b      	ldr	r1, [pc, #428]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80054f4:	4b63      	ldr	r3, [pc, #396]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	4960      	ldr	r1, [pc, #384]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005512:	2301      	movs	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005520:	4b58      	ldr	r3, [pc, #352]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005526:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	3b01      	subs	r3, #1
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	4954      	ldr	r1, [pc, #336]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d022      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005546:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	494b      	ldr	r1, [pc, #300]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005564:	2301      	movs	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005570:	d10c      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005572:	4b44      	ldr	r3, [pc, #272]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	3b01      	subs	r3, #1
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	493f      	ldr	r1, [pc, #252]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 808a 	beq.w	80056ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b39      	ldr	r3, [pc, #228]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6413      	str	r3, [r2, #64]	; 0x40
 80055aa:	4b36      	ldr	r3, [pc, #216]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055b6:	4b34      	ldr	r3, [pc, #208]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a33      	ldr	r2, [pc, #204]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055c2:	f7fc fb89 	bl	8001cd8 <HAL_GetTick>
 80055c6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055ca:	f7fc fb85 	bl	8001cd8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e1d1      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055e8:	4b26      	ldr	r3, [pc, #152]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	429a      	cmp	r2, r3
 8005604:	d028      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d114      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800562e:	f7fc fb53 	bl	8001cd8 <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fc fb4f 	bl	8001cd8 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e199      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005664:	d114      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	4902      	ldr	r1, [pc, #8]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
 8005680:	e00c      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	40007000 	.word	0x40007000
 800568c:	42470e40 	.word	0x42470e40
 8005690:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	4a88      	ldr	r2, [pc, #544]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005696:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800569a:	6093      	str	r3, [r2, #8]
 800569c:	4b86      	ldr	r3, [pc, #536]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800569e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a8:	4983      	ldr	r1, [pc, #524]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80056c0:	4b7e      	ldr	r3, [pc, #504]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80056c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0310 	and.w	r3, r3, #16
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80056d0:	4b79      	ldr	r3, [pc, #484]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	4976      	ldr	r1, [pc, #472]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d011      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056f2:	4b71      	ldr	r3, [pc, #452]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	496d      	ldr	r1, [pc, #436]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005710:	d101      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005712:	2301      	movs	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005728:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	4961      	ldr	r1, [pc, #388]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d004      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	f040 80c6 	bne.w	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005748:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574e:	f7fc fac3 	bl	8001cd8 <HAL_GetTick>
 8005752:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005756:	f7fc fabf 	bl	8001cd8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e10b      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005768:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005774:	4a53      	ldr	r2, [pc, #332]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d019      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b8:	d00e      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d019      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d115      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d6:	d110      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	061b      	lsls	r3, r3, #24
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	071b      	lsls	r3, r3, #28
 80057f2:	4931      	ldr	r1, [pc, #196]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005816:	2b00      	cmp	r3, #0
 8005818:	d026      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d122      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	431a      	orrs	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	071b      	lsls	r3, r3, #28
 8005848:	491b      	ldr	r1, [pc, #108]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005856:	f023 021f 	bic.w	r2, r3, #31
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	3b01      	subs	r3, #1
 8005860:	4915      	ldr	r1, [pc, #84]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	071b      	lsls	r3, r3, #28
 800588e:	490a      	ldr	r1, [pc, #40]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800589c:	f7fc fa1c 	bl	8001cd8 <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058a4:	f7fc fa18 	bl	8001cd8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d90a      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e064      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800
 80058bc:	424711e0 	.word	0x424711e0
 80058c0:	42470068 	.word	0x42470068
 80058c4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0e7      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	4926      	ldr	r1, [pc, #152]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005902:	4b21      	ldr	r3, [pc, #132]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005908:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	491d      	ldr	r1, [pc, #116]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005924:	4b18      	ldr	r3, [pc, #96]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	4915      	ldr	r1, [pc, #84]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	490c      	ldr	r1, [pc, #48]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005968:	4b07      	ldr	r3, [pc, #28]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800596a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800596e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	4904      	ldr	r1, [pc, #16]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40023800 	.word	0x40023800

0800598c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d003      	beq.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	f000 8098 	beq.w	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80059b0:	e12d      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80059b2:	4b9a      	ldr	r3, [pc, #616]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80059bc:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ca:	d802      	bhi.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80059d0:	e082      	b.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80059d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d6:	d047      	beq.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80059d8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80059dc:	d06f      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80059de:	e07b      	b.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e0:	4b8f      	ldr	r3, [pc, #572]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059e2:	617b      	str	r3, [r7, #20]
          break;
 80059e4:	e07b      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80059e6:	4b8d      	ldr	r3, [pc, #564]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f4:	d109      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80059f6:	4b89      	ldr	r3, [pc, #548]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a00:	4a87      	ldr	r2, [pc, #540]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e019      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a0a:	4b84      	ldr	r3, [pc, #528]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a16:	d109      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a18:	4b80      	ldr	r3, [pc, #512]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a22:	4a80      	ldr	r2, [pc, #512]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e008      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005a2c:	4b7b      	ldr	r3, [pc, #492]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a36:	4a7c      	ldr	r2, [pc, #496]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a3e:	4b77      	ldr	r3, [pc, #476]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a58:	0f1b      	lsrs	r3, r3, #28
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
          break;
 8005a66:	e03a      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a68:	4b6c      	ldr	r3, [pc, #432]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d108      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a76:	4b69      	ldr	r3, [pc, #420]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a7e:	4a69      	ldr	r2, [pc, #420]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e007      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a88:	4b64      	ldr	r3, [pc, #400]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	4a65      	ldr	r2, [pc, #404]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005a98:	4b60      	ldr	r3, [pc, #384]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005aaa:	4b5c      	ldr	r3, [pc, #368]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	0f1b      	lsrs	r3, r3, #28
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
          break;
 8005abc:	e00f      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005abe:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aca:	d102      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005acc:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ace:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005ad0:	e005      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005ad2:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005ad4:	617b      	str	r3, [r7, #20]
          break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
          break;
 8005adc:	bf00      	nop
        }
      }
      break;
 8005ade:	e096      	b.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005ae0:	4b4e      	ldr	r3, [pc, #312]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005aea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d00c      	beq.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d802      	bhi.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005afe:	e082      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b04:	d047      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005b06:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005b0a:	d06f      	beq.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005b0c:	e07b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b0e:	4b44      	ldr	r3, [pc, #272]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b10:	617b      	str	r3, [r7, #20]
          break;
 8005b12:	e07b      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b22:	d109      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b24:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b2e:	4a3c      	ldr	r2, [pc, #240]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e019      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b44:	d109      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b46:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b50:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	e008      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b5a:	4b30      	ldr	r3, [pc, #192]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b64:	4a30      	ldr	r2, [pc, #192]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b80:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b86:	0f1b      	lsrs	r3, r3, #28
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	617b      	str	r3, [r7, #20]
          break;
 8005b94:	e03a      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ba2:	d108      	bne.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	e007      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	099b      	lsrs	r3, r3, #6
 8005bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0f1b      	lsrs	r3, r3, #28
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
          break;
 8005bea:	e00f      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf8:	d102      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bfc:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005bfe:	e005      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c02:	617b      	str	r3, [r7, #20]
          break;
 8005c04:	e002      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
          break;
 8005c0a:	bf00      	nop
        }
      }
      break;
 8005c0c:	bf00      	nop
    }
  }
  return frequency;
 8005c0e:	697b      	ldr	r3, [r7, #20]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	00bb8000 	.word	0x00bb8000
 8005c24:	017d7840 	.word	0x017d7840
 8005c28:	00f42400 	.word	0x00f42400

08005c2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d075      	beq.n	8005d30 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c44:	4ba2      	ldr	r3, [pc, #648]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d00c      	beq.n	8005c6a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c50:	4b9f      	ldr	r3, [pc, #636]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d112      	bne.n	8005c82 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c5c:	4b9c      	ldr	r3, [pc, #624]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c68:	d10b      	bne.n	8005c82 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6a:	4b99      	ldr	r3, [pc, #612]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d05b      	beq.n	8005d2e <HAL_RCC_OscConfig+0x102>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d157      	bne.n	8005d2e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e20b      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8a:	d106      	bne.n	8005c9a <HAL_RCC_OscConfig+0x6e>
 8005c8c:	4b90      	ldr	r3, [pc, #576]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a8f      	ldr	r2, [pc, #572]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e01d      	b.n	8005cd6 <HAL_RCC_OscConfig+0xaa>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca2:	d10c      	bne.n	8005cbe <HAL_RCC_OscConfig+0x92>
 8005ca4:	4b8a      	ldr	r3, [pc, #552]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a89      	ldr	r2, [pc, #548]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005caa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b87      	ldr	r3, [pc, #540]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a86      	ldr	r2, [pc, #536]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e00b      	b.n	8005cd6 <HAL_RCC_OscConfig+0xaa>
 8005cbe:	4b84      	ldr	r3, [pc, #528]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a83      	ldr	r2, [pc, #524]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a80      	ldr	r2, [pc, #512]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d013      	beq.n	8005d06 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cde:	f7fb fffb 	bl	8001cd8 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce6:	f7fb fff7 	bl	8001cd8 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b64      	cmp	r3, #100	; 0x64
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1d0      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf8:	4b75      	ldr	r3, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0xba>
 8005d04:	e014      	b.n	8005d30 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fb ffe7 	bl	8001cd8 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0e:	f7fb ffe3 	bl	8001cd8 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b64      	cmp	r3, #100	; 0x64
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e1bc      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d20:	4b6b      	ldr	r3, [pc, #428]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0xe2>
 8005d2c:	e000      	b.n	8005d30 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d063      	beq.n	8005e04 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d3c:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d48:	4b61      	ldr	r3, [pc, #388]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d11c      	bne.n	8005d8e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d54:	4b5e      	ldr	r3, [pc, #376]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d60:	4b5b      	ldr	r3, [pc, #364]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_OscConfig+0x14c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e190      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d78:	4b55      	ldr	r3, [pc, #340]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4952      	ldr	r1, [pc, #328]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8c:	e03a      	b.n	8005e04 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d020      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d96:	4b4f      	ldr	r3, [pc, #316]	; (8005ed4 <HAL_RCC_OscConfig+0x2a8>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fb ff9c 	bl	8001cd8 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da4:	f7fb ff98 	bl	8001cd8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e171      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc2:	4b43      	ldr	r3, [pc, #268]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	493f      	ldr	r1, [pc, #252]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]
 8005dd6:	e015      	b.n	8005e04 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd8:	4b3e      	ldr	r3, [pc, #248]	; (8005ed4 <HAL_RCC_OscConfig+0x2a8>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fb ff7b 	bl	8001cd8 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de6:	f7fb ff77 	bl	8001cd8 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e150      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df8:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f0      	bne.n	8005de6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d030      	beq.n	8005e72 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d016      	beq.n	8005e46 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e18:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_RCC_OscConfig+0x2ac>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fb ff5b 	bl	8001cd8 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e26:	f7fb ff57 	bl	8001cd8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e130      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x1fa>
 8005e44:	e015      	b.n	8005e72 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e46:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4c:	f7fb ff44 	bl	8001cd8 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e54:	f7fb ff40 	bl	8001cd8 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e119      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e66:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 809f 	beq.w	8005fbe <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e80:	2300      	movs	r3, #0
 8005e82:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10f      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_OscConfig+0x2a4>)
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <HAL_RCC_OscConfig+0x2b0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d120      	bne.n	8005efe <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ebc:	4b07      	ldr	r3, [pc, #28]	; (8005edc <HAL_RCC_OscConfig+0x2b0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a06      	ldr	r2, [pc, #24]	; (8005edc <HAL_RCC_OscConfig+0x2b0>)
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec8:	f7fb ff06 	bl	8001cd8 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	e010      	b.n	8005ef2 <HAL_RCC_OscConfig+0x2c6>
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	42470000 	.word	0x42470000
 8005ed8:	42470e80 	.word	0x42470e80
 8005edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee0:	f7fb fefa 	bl	8001cd8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e0d3      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef2:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <HAL_RCC_OscConfig+0x478>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d106      	bne.n	8005f14 <HAL_RCC_OscConfig+0x2e8>
 8005f06:	4b68      	ldr	r3, [pc, #416]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a67      	ldr	r2, [pc, #412]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70
 8005f12:	e01c      	b.n	8005f4e <HAL_RCC_OscConfig+0x322>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCC_OscConfig+0x30a>
 8005f1c:	4b62      	ldr	r3, [pc, #392]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a61      	ldr	r2, [pc, #388]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f22:	f043 0304 	orr.w	r3, r3, #4
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	4b5f      	ldr	r3, [pc, #380]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a5e      	ldr	r2, [pc, #376]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
 8005f34:	e00b      	b.n	8005f4e <HAL_RCC_OscConfig+0x322>
 8005f36:	4b5c      	ldr	r3, [pc, #368]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a5b      	ldr	r2, [pc, #364]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a58      	ldr	r2, [pc, #352]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f48:	f023 0304 	bic.w	r3, r3, #4
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d015      	beq.n	8005f82 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fb febf 	bl	8001cd8 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fb febb 	bl	8001cd8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e092      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f74:	4b4c      	ldr	r3, [pc, #304]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ee      	beq.n	8005f5e <HAL_RCC_OscConfig+0x332>
 8005f80:	e014      	b.n	8005fac <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fb fea9 	bl	8001cd8 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fb fea5 	bl	8001cd8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e07c      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa0:	4b41      	ldr	r3, [pc, #260]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ee      	bne.n	8005f8a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d068      	beq.n	8006098 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d060      	beq.n	8006094 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d145      	bne.n	8006066 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fda:	4b34      	ldr	r3, [pc, #208]	; (80060ac <HAL_RCC_OscConfig+0x480>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fb fe7a 	bl	8001cd8 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fb fe76 	bl	8001cd8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e04f      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	019b      	lsls	r3, r3, #6
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	3b01      	subs	r3, #1
 8006020:	041b      	lsls	r3, r3, #16
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	061b      	lsls	r3, r3, #24
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	071b      	lsls	r3, r3, #28
 8006032:	491d      	ldr	r1, [pc, #116]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <HAL_RCC_OscConfig+0x480>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fb fe4b 	bl	8001cd8 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006046:	f7fb fe47 	bl	8001cd8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e020      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x41a>
 8006064:	e018      	b.n	8006098 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_RCC_OscConfig+0x480>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb fe34 	bl	8001cd8 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006074:	f7fb fe30 	bl	8001cd8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e009      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_RCC_OscConfig+0x47c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x448>
 8006092:	e001      	b.n	8006098 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40007000 	.word	0x40007000
 80060a8:	40023800 	.word	0x40023800
 80060ac:	42470060 	.word	0x42470060

080060b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e022      	b.n	8006108 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fb fb95 	bl	8001804 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2203      	movs	r2, #3
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f814 	bl	8006110 <HAL_SD_InitCard>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00a      	b.n	8006108 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006110:	b5b0      	push	{r4, r5, r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af04      	add	r7, sp, #16
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800612c:	2376      	movs	r3, #118	; 0x76
 800612e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681d      	ldr	r5, [r3, #0]
 8006134:	466c      	mov	r4, sp
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800613e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006148:	4628      	mov	r0, r5
 800614a:	f001 fa4b 	bl	80075e4 <SDIO_Init>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e031      	b.n	80061c4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_SD_InitCard+0xbc>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa72 	bl	8007654 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006170:	4b16      	ldr	r3, [pc, #88]	; (80061cc <HAL_SD_InitCard+0xbc>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb18 	bl	80067ac <SD_PowerON>
 800617c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e013      	b.n	80061c4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fa37 	bl	8006610 <SD_InitCard>
 80061a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bdb0      	pop	{r4, r5, r7, pc}
 80061cc:	422580a0 	.word	0x422580a0

080061d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061de:	0f9b      	lsrs	r3, r3, #30
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ea:	0e9b      	lsrs	r3, r3, #26
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fc:	0e1b      	lsrs	r3, r3, #24
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	b2da      	uxtb	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	b2da      	uxtb	r2, r3
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006226:	b2da      	uxtb	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	0d1b      	lsrs	r3, r3, #20
 8006232:	b29a      	uxth	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	b2da      	uxtb	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624e:	0bdb      	lsrs	r3, r3, #15
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006260:	0b9b      	lsrs	r3, r3, #14
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	b2da      	uxtb	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006272:	0b5b      	lsrs	r3, r3, #13
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006284:	0b1b      	lsrs	r3, r3, #12
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	2b00      	cmp	r3, #0
 800629e:	d163      	bne.n	8006368 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a4:	009a      	lsls	r2, r3, #2
 80062a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062aa:	4013      	ands	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062b0:	0f92      	lsrs	r2, r2, #30
 80062b2:	431a      	orrs	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062bc:	0edb      	lsrs	r3, r3, #27
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ce:	0e1b      	lsrs	r3, r3, #24
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e0:	0d5b      	lsrs	r3, r3, #21
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f2:	0c9b      	lsrs	r3, r3, #18
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006304:	0bdb      	lsrs	r3, r3, #15
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	b2da      	uxtb	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	7e1b      	ldrb	r3, [r3, #24]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	3302      	adds	r3, #2
 8006328:	2201      	movs	r2, #1
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006332:	fb02 f203 	mul.w	r2, r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	7a1b      	ldrb	r3, [r3, #8]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	2201      	movs	r2, #1
 8006346:	409a      	lsls	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006354:	0a52      	lsrs	r2, r2, #9
 8006356:	fb02 f203 	mul.w	r2, r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006364:	661a      	str	r2, [r3, #96]	; 0x60
 8006366:	e031      	b.n	80063cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636c:	2b01      	cmp	r3, #1
 800636e:	d11d      	bne.n	80063ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	431a      	orrs	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	3301      	adds	r3, #1
 800638c:	029a      	lsls	r2, r3, #10
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	661a      	str	r2, [r3, #96]	; 0x60
 80063aa:	e00f      	b.n	80063cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a58      	ldr	r2, [pc, #352]	; (8006514 <HAL_SD_GetCardCSD+0x344>)
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e09d      	b.n	8006508 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d0:	0b9b      	lsrs	r3, r3, #14
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	09db      	lsrs	r3, r3, #7
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	0fdb      	lsrs	r3, r3, #31
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006410:	0f5b      	lsrs	r3, r3, #29
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	0e9b      	lsrs	r3, r3, #26
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	b2da      	uxtb	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	0d9b      	lsrs	r3, r3, #22
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	0d5b      	lsrs	r3, r3, #21
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	b2da      	uxtb	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	0c1b      	lsrs	r3, r3, #16
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	0bdb      	lsrs	r3, r3, #15
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	0b9b      	lsrs	r3, r3, #14
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	0b5b      	lsrs	r3, r3, #13
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	0b1b      	lsrs	r3, r3, #12
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	0a9b      	lsrs	r3, r3, #10
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	004005ff 	.word	0x004005ff

08006518 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af04      	add	r7, sp, #16
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2203      	movs	r2, #3
 8006526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	2b03      	cmp	r3, #3
 8006530:	d02e      	beq.n	8006590 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d106      	bne.n	8006548 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
 8006546:	e029      	b.n	800659c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d10a      	bne.n	8006566 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9b9 	bl	80068c8 <SD_WideBus_Enable>
 8006556:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
 8006564:	e01a      	b.n	800659c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9f6 	bl	800695e <SD_WideBus_Disable>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
 8006580:	e00c      	b.n	800659c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
 800658e:	e005      	b.n	800659c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a18      	ldr	r2, [pc, #96]	; (800660c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e024      	b.n	8006602 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681d      	ldr	r5, [r3, #0]
 80065de:	466c      	mov	r4, sp
 80065e0:	f107 0318 	add.w	r3, r7, #24
 80065e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065ec:	f107 030c 	add.w	r3, r7, #12
 80065f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 fff6 	bl	80075e4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3728      	adds	r7, #40	; 0x28
 8006606:	46bd      	mov	sp, r7
 8006608:	bdb0      	pop	{r4, r5, r7, pc}
 800660a:	bf00      	nop
 800660c:	004005ff 	.word	0x004005ff

08006610 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006610:	b5b0      	push	{r4, r5, r7, lr}
 8006612:	b094      	sub	sp, #80	; 0x50
 8006614:	af04      	add	r7, sp, #16
 8006616:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006618:	2301      	movs	r3, #1
 800661a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f826 	bl	8007672 <SDIO_GetPowerState>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800662c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006630:	e0b7      	b.n	80067a2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	2b03      	cmp	r3, #3
 8006638:	d02f      	beq.n	800669a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f9a5 	bl	800798e <SDMMC_CmdSendCID>
 8006644:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <SD_InitCard+0x40>
    {
      return errorstate;
 800664c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664e:	e0a8      	b.n	80067a2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f850 	bl	80076fc <SDIO_GetResponse>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2104      	movs	r1, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f001 f847 	bl	80076fc <SDIO_GetResponse>
 800666e:	4602      	mov	r2, r0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2108      	movs	r1, #8
 800667a:	4618      	mov	r0, r3
 800667c:	f001 f83e 	bl	80076fc <SDIO_GetResponse>
 8006680:	4602      	mov	r2, r0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	210c      	movs	r1, #12
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f835 	bl	80076fc <SDIO_GetResponse>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d00d      	beq.n	80066be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f107 020e 	add.w	r2, r7, #14
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f9ab 	bl	8007a08 <SDMMC_CmdSetRelAdd>
 80066b2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <SD_InitCard+0xae>
    {
      return errorstate;
 80066ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066bc:	e071      	b.n	80067a2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d036      	beq.n	8006734 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80066c6:	89fb      	ldrh	r3, [r7, #14]
 80066c8:	461a      	mov	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f001 f975 	bl	80079ca <SDMMC_CmdSendCSD>
 80066e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80066e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ea:	e05a      	b.n	80067a2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f802 	bl	80076fc <SDIO_GetResponse>
 80066f8:	4602      	mov	r2, r0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2104      	movs	r1, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fff9 	bl	80076fc <SDIO_GetResponse>
 800670a:	4602      	mov	r2, r0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2108      	movs	r1, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fff0 	bl	80076fc <SDIO_GetResponse>
 800671c:	4602      	mov	r2, r0
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	210c      	movs	r1, #12
 8006728:	4618      	mov	r0, r3
 800672a:	f000 ffe7 	bl	80076fc <SDIO_GetResponse>
 800672e:	4602      	mov	r2, r0
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2104      	movs	r1, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f000 ffde 	bl	80076fc <SDIO_GetResponse>
 8006740:	4603      	mov	r3, r0
 8006742:	0d1a      	lsrs	r2, r3, #20
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006748:	f107 0310 	add.w	r3, r7, #16
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff fd3e 	bl	80061d0 <HAL_SD_GetCardCSD>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800675a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800675e:	e020      	b.n	80067a2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	f04f 0400 	mov.w	r4, #0
 800676e:	461a      	mov	r2, r3
 8006770:	4623      	mov	r3, r4
 8006772:	4608      	mov	r0, r1
 8006774:	f001 f823 	bl	80077be <SDMMC_CmdSelDesel>
 8006778:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <SD_InitCard+0x174>
  {
    return errorstate;
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	e00e      	b.n	80067a2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681d      	ldr	r5, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	466c      	mov	r4, sp
 800678c:	f103 0210 	add.w	r2, r3, #16
 8006790:	ca07      	ldmia	r2, {r0, r1, r2}
 8006792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006796:	3304      	adds	r3, #4
 8006798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800679a:	4628      	mov	r0, r5
 800679c:	f000 ff22 	bl	80075e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3740      	adds	r7, #64	; 0x40
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f81d 	bl	8007804 <SDMMC_CmdGoIdleState>
 80067ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	e072      	b.n	80068bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f830 	bl	8007840 <SDMMC_CmdOperCond>
 80067e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 f806 	bl	8007804 <SDMMC_CmdGoIdleState>
 80067f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	e05b      	b.n	80068bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680e:	2b01      	cmp	r3, #1
 8006810:	d137      	bne.n	8006882 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f830 	bl	800787e <SDMMC_CmdAppCommand>
 800681e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d02d      	beq.n	8006882 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800682a:	e047      	b.n	80068bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f823 	bl	800787e <SDMMC_CmdAppCommand>
 8006838:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <SD_PowerON+0x98>
    {
      return errorstate;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	e03b      	b.n	80068bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	491e      	ldr	r1, [pc, #120]	; (80068c4 <SD_PowerON+0x118>)
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f839 	bl	80078c2 <SDMMC_CmdAppOperCommand>
 8006850:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800685c:	e02e      	b.n	80068bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f000 ff49 	bl	80076fc <SDIO_GetResponse>
 800686a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	0fdb      	lsrs	r3, r3, #31
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <SD_PowerON+0xcc>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <SD_PowerON+0xce>
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]

    count++;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	3301      	adds	r3, #1
 8006880:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006888:	4293      	cmp	r3, r2
 800688a:	d802      	bhi.n	8006892 <SD_PowerON+0xe6>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0cc      	beq.n	800682c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006898:	4293      	cmp	r3, r2
 800689a:	d902      	bls.n	80068a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800689c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068a0:	e00c      	b.n	80068bc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
 80068b2:	e002      	b.n	80068ba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	c1100000 	.word	0xc1100000

080068c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 ff0c 	bl	80076fc <SDIO_GetResponse>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ee:	d102      	bne.n	80068f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068f4:	e02f      	b.n	8006956 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068f6:	f107 030c 	add.w	r3, r7, #12
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f879 	bl	80069f4 <SD_FindSCR>
 8006902:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	e023      	b.n	8006956 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01c      	beq.n	8006952 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 ffaa 	bl	800787e <SDMMC_CmdAppCommand>
 800692a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	e00f      	b.n	8006956 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2102      	movs	r1, #2
 800693c:	4618      	mov	r0, r3
 800693e:	f000 ffe3 	bl	8007908 <SDMMC_CmdBusWidth>
 8006942:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	e003      	b.n	8006956 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800694e:	2300      	movs	r3, #0
 8006950:	e001      	b.n	8006956 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006952:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fec1 	bl	80076fc <SDIO_GetResponse>
 800697a:	4603      	mov	r3, r0
 800697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006984:	d102      	bne.n	800698c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800698a:	e02f      	b.n	80069ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800698c:	f107 030c 	add.w	r3, r7, #12
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f82e 	bl	80069f4 <SD_FindSCR>
 8006998:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	e023      	b.n	80069ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01c      	beq.n	80069e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f000 ff5f 	bl	800787e <SDMMC_CmdAppCommand>
 80069c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e00f      	b.n	80069ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 ff98 	bl	8007908 <SDMMC_CmdBusWidth>
 80069d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	e003      	b.n	80069ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e001      	b.n	80069ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b08f      	sub	sp, #60	; 0x3c
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80069fe:	f7fb f96b 	bl	8001cd8 <HAL_GetTick>
 8006a02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2108      	movs	r1, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fead 	bl	800777a <SDMMC_CmdBlockLength>
 8006a20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	e0a9      	b.n	8006b80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f000 ff20 	bl	800787e <SDMMC_CmdAppCommand>
 8006a3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	e09a      	b.n	8006b80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006a50:	2308      	movs	r3, #8
 8006a52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006a54:	2330      	movs	r3, #48	; 0x30
 8006a56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006a60:	2301      	movs	r3, #1
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f107 0210 	add.w	r2, r7, #16
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fe57 	bl	8007722 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 ff67 	bl	800794c <SDMMC_CmdSendSCR>
 8006a7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d022      	beq.n	8006acc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	e07a      	b.n	8006b80 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6819      	ldr	r1, [r3, #0]
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	f107 0208 	add.w	r2, r7, #8
 8006aa4:	18d4      	adds	r4, r2, r3
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	f000 fdc7 	bl	800763a <SDIO_ReadFIFO>
 8006aac:	4603      	mov	r3, r0
 8006aae:	6023      	str	r3, [r4, #0]
      index++;
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ab6:	f7fb f90f 	bl	8001cd8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d102      	bne.n	8006acc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ac6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aca:	e059      	b.n	8006b80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad2:	f240 432a 	movw	r3, #1066	; 0x42a
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0d6      	beq.n	8006a8a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2208      	movs	r2, #8
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006af2:	2308      	movs	r3, #8
 8006af4:	e044      	b.n	8006b80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e037      	b.n	8006b80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2220      	movs	r2, #32
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006b26:	2320      	movs	r3, #32
 8006b28:	e02a      	b.n	8006b80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	061a      	lsls	r2, r3, #24
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006b4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	601a      	str	r2, [r3, #0]
    scr++;
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	3304      	adds	r3, #4
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	061a      	lsls	r2, r3, #24
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	0a1b      	lsrs	r3, r3, #8
 8006b6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006b72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	0e1b      	lsrs	r3, r3, #24
 8006b78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	373c      	adds	r7, #60	; 0x3c
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}

08006b88 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e034      	b.n	8006c08 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7fa ff7c 	bl	8001ab0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f000 fc0a 	bl	80073dc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	f000 fc72 	bl	80074bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6858      	ldr	r0, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	f000 fcbd 	bl	8007564 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	6892      	ldr	r2, [r2, #8]
 8006bfe:	f041 0101 	orr.w	r1, r1, #1
 8006c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e03f      	b.n	8006ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fa fe4c 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2224      	movs	r2, #36	; 0x24
 8006c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f829 	bl	8006cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006cee:	f023 030c 	bic.w	r3, r3, #12
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	f040 8199 	bne.w	8007050 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4ac6      	ldr	r2, [pc, #792]	; (800703c <UART_SetConfig+0x390>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00f      	beq.n	8006d48 <UART_SetConfig+0x9c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4ac4      	ldr	r2, [pc, #784]	; (8007040 <UART_SetConfig+0x394>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00a      	beq.n	8006d48 <UART_SetConfig+0x9c>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4ac3      	ldr	r2, [pc, #780]	; (8007044 <UART_SetConfig+0x398>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d005      	beq.n	8006d48 <UART_SetConfig+0x9c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4ac1      	ldr	r2, [pc, #772]	; (8007048 <UART_SetConfig+0x39c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f040 80bd 	bne.w	8006ec2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fe fb80 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 8006d4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	461d      	mov	r5, r3
 8006d52:	f04f 0600 	mov.w	r6, #0
 8006d56:	46a8      	mov	r8, r5
 8006d58:	46b1      	mov	r9, r6
 8006d5a:	eb18 0308 	adds.w	r3, r8, r8
 8006d5e:	eb49 0409 	adc.w	r4, r9, r9
 8006d62:	4698      	mov	r8, r3
 8006d64:	46a1      	mov	r9, r4
 8006d66:	eb18 0805 	adds.w	r8, r8, r5
 8006d6a:	eb49 0906 	adc.w	r9, r9, r6
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d82:	4688      	mov	r8, r1
 8006d84:	4691      	mov	r9, r2
 8006d86:	eb18 0005 	adds.w	r0, r8, r5
 8006d8a:	eb49 0106 	adc.w	r1, r9, r6
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	461d      	mov	r5, r3
 8006d94:	f04f 0600 	mov.w	r6, #0
 8006d98:	196b      	adds	r3, r5, r5
 8006d9a:	eb46 0406 	adc.w	r4, r6, r6
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4623      	mov	r3, r4
 8006da2:	f7f9 fa39 	bl	8000218 <__aeabi_uldivmod>
 8006da6:	4603      	mov	r3, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	461a      	mov	r2, r3
 8006dac:	4ba7      	ldr	r3, [pc, #668]	; (800704c <UART_SetConfig+0x3a0>)
 8006dae:	fba3 2302 	umull	r2, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	461d      	mov	r5, r3
 8006dbc:	f04f 0600 	mov.w	r6, #0
 8006dc0:	46a9      	mov	r9, r5
 8006dc2:	46b2      	mov	sl, r6
 8006dc4:	eb19 0309 	adds.w	r3, r9, r9
 8006dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8006dcc:	4699      	mov	r9, r3
 8006dce:	46a2      	mov	sl, r4
 8006dd0:	eb19 0905 	adds.w	r9, r9, r5
 8006dd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dec:	4689      	mov	r9, r1
 8006dee:	4692      	mov	sl, r2
 8006df0:	eb19 0005 	adds.w	r0, r9, r5
 8006df4:	eb4a 0106 	adc.w	r1, sl, r6
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	461d      	mov	r5, r3
 8006dfe:	f04f 0600 	mov.w	r6, #0
 8006e02:	196b      	adds	r3, r5, r5
 8006e04:	eb46 0406 	adc.w	r4, r6, r6
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	f7f9 fa04 	bl	8000218 <__aeabi_uldivmod>
 8006e10:	4603      	mov	r3, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	461a      	mov	r2, r3
 8006e16:	4b8d      	ldr	r3, [pc, #564]	; (800704c <UART_SetConfig+0x3a0>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a88      	ldr	r2, [pc, #544]	; (800704c <UART_SetConfig+0x3a0>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e38:	4498      	add	r8, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	f04f 0600 	mov.w	r6, #0
 8006e42:	46a9      	mov	r9, r5
 8006e44:	46b2      	mov	sl, r6
 8006e46:	eb19 0309 	adds.w	r3, r9, r9
 8006e4a:	eb4a 040a 	adc.w	r4, sl, sl
 8006e4e:	4699      	mov	r9, r3
 8006e50:	46a2      	mov	sl, r4
 8006e52:	eb19 0905 	adds.w	r9, r9, r5
 8006e56:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e6e:	4689      	mov	r9, r1
 8006e70:	4692      	mov	sl, r2
 8006e72:	eb19 0005 	adds.w	r0, r9, r5
 8006e76:	eb4a 0106 	adc.w	r1, sl, r6
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	461d      	mov	r5, r3
 8006e80:	f04f 0600 	mov.w	r6, #0
 8006e84:	196b      	adds	r3, r5, r5
 8006e86:	eb46 0406 	adc.w	r4, r6, r6
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	f7f9 f9c3 	bl	8000218 <__aeabi_uldivmod>
 8006e92:	4603      	mov	r3, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	461a      	mov	r2, r3
 8006e98:	4b6c      	ldr	r3, [pc, #432]	; (800704c <UART_SetConfig+0x3a0>)
 8006e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	2164      	movs	r1, #100	; 0x64
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	3332      	adds	r3, #50	; 0x32
 8006eac:	4a67      	ldr	r2, [pc, #412]	; (800704c <UART_SetConfig+0x3a0>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	f003 0207 	and.w	r2, r3, #7
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4442      	add	r2, r8
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	e27d      	b.n	80073be <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ec2:	f7fe faaf 	bl	8005424 <HAL_RCC_GetPCLK1Freq>
 8006ec6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	461d      	mov	r5, r3
 8006ecc:	f04f 0600 	mov.w	r6, #0
 8006ed0:	46a8      	mov	r8, r5
 8006ed2:	46b1      	mov	r9, r6
 8006ed4:	eb18 0308 	adds.w	r3, r8, r8
 8006ed8:	eb49 0409 	adc.w	r4, r9, r9
 8006edc:	4698      	mov	r8, r3
 8006ede:	46a1      	mov	r9, r4
 8006ee0:	eb18 0805 	adds.w	r8, r8, r5
 8006ee4:	eb49 0906 	adc.w	r9, r9, r6
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ef4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ef8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006efc:	4688      	mov	r8, r1
 8006efe:	4691      	mov	r9, r2
 8006f00:	eb18 0005 	adds.w	r0, r8, r5
 8006f04:	eb49 0106 	adc.w	r1, r9, r6
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	461d      	mov	r5, r3
 8006f0e:	f04f 0600 	mov.w	r6, #0
 8006f12:	196b      	adds	r3, r5, r5
 8006f14:	eb46 0406 	adc.w	r4, r6, r6
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	f7f9 f97c 	bl	8000218 <__aeabi_uldivmod>
 8006f20:	4603      	mov	r3, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b49      	ldr	r3, [pc, #292]	; (800704c <UART_SetConfig+0x3a0>)
 8006f28:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	461d      	mov	r5, r3
 8006f36:	f04f 0600 	mov.w	r6, #0
 8006f3a:	46a9      	mov	r9, r5
 8006f3c:	46b2      	mov	sl, r6
 8006f3e:	eb19 0309 	adds.w	r3, r9, r9
 8006f42:	eb4a 040a 	adc.w	r4, sl, sl
 8006f46:	4699      	mov	r9, r3
 8006f48:	46a2      	mov	sl, r4
 8006f4a:	eb19 0905 	adds.w	r9, r9, r5
 8006f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f52:	f04f 0100 	mov.w	r1, #0
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f66:	4689      	mov	r9, r1
 8006f68:	4692      	mov	sl, r2
 8006f6a:	eb19 0005 	adds.w	r0, r9, r5
 8006f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	461d      	mov	r5, r3
 8006f78:	f04f 0600 	mov.w	r6, #0
 8006f7c:	196b      	adds	r3, r5, r5
 8006f7e:	eb46 0406 	adc.w	r4, r6, r6
 8006f82:	461a      	mov	r2, r3
 8006f84:	4623      	mov	r3, r4
 8006f86:	f7f9 f947 	bl	8000218 <__aeabi_uldivmod>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	461a      	mov	r2, r3
 8006f90:	4b2e      	ldr	r3, [pc, #184]	; (800704c <UART_SetConfig+0x3a0>)
 8006f92:	fba3 1302 	umull	r1, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2164      	movs	r1, #100	; 0x64
 8006f9a:	fb01 f303 	mul.w	r3, r1, r3
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a29      	ldr	r2, [pc, #164]	; (800704c <UART_SetConfig+0x3a0>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fb2:	4498      	add	r8, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	f04f 0600 	mov.w	r6, #0
 8006fbc:	46a9      	mov	r9, r5
 8006fbe:	46b2      	mov	sl, r6
 8006fc0:	eb19 0309 	adds.w	r3, r9, r9
 8006fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8006fc8:	4699      	mov	r9, r3
 8006fca:	46a2      	mov	sl, r4
 8006fcc:	eb19 0905 	adds.w	r9, r9, r5
 8006fd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fd4:	f04f 0100 	mov.w	r1, #0
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fe8:	4689      	mov	r9, r1
 8006fea:	4692      	mov	sl, r2
 8006fec:	eb19 0005 	adds.w	r0, r9, r5
 8006ff0:	eb4a 0106 	adc.w	r1, sl, r6
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	f04f 0600 	mov.w	r6, #0
 8006ffe:	196b      	adds	r3, r5, r5
 8007000:	eb46 0406 	adc.w	r4, r6, r6
 8007004:	461a      	mov	r2, r3
 8007006:	4623      	mov	r3, r4
 8007008:	f7f9 f906 	bl	8000218 <__aeabi_uldivmod>
 800700c:	4603      	mov	r3, r0
 800700e:	460c      	mov	r4, r1
 8007010:	461a      	mov	r2, r3
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <UART_SetConfig+0x3a0>)
 8007014:	fba3 1302 	umull	r1, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2164      	movs	r1, #100	; 0x64
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	3332      	adds	r3, #50	; 0x32
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <UART_SetConfig+0x3a0>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 0207 	and.w	r2, r3, #7
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4442      	add	r2, r8
 8007038:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800703a:	e1c0      	b.n	80073be <UART_SetConfig+0x712>
 800703c:	40011000 	.word	0x40011000
 8007040:	40011400 	.word	0x40011400
 8007044:	40011800 	.word	0x40011800
 8007048:	40011c00 	.word	0x40011c00
 800704c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4adc      	ldr	r2, [pc, #880]	; (80073c8 <UART_SetConfig+0x71c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <UART_SetConfig+0x3ce>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4adb      	ldr	r2, [pc, #876]	; (80073cc <UART_SetConfig+0x720>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00a      	beq.n	800707a <UART_SetConfig+0x3ce>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4ad9      	ldr	r2, [pc, #868]	; (80073d0 <UART_SetConfig+0x724>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d005      	beq.n	800707a <UART_SetConfig+0x3ce>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4ad8      	ldr	r2, [pc, #864]	; (80073d4 <UART_SetConfig+0x728>)
 8007074:	4293      	cmp	r3, r2
 8007076:	f040 80d1 	bne.w	800721c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800707a:	f7fe f9e7 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 800707e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	469a      	mov	sl, r3
 8007084:	f04f 0b00 	mov.w	fp, #0
 8007088:	46d0      	mov	r8, sl
 800708a:	46d9      	mov	r9, fp
 800708c:	eb18 0308 	adds.w	r3, r8, r8
 8007090:	eb49 0409 	adc.w	r4, r9, r9
 8007094:	4698      	mov	r8, r3
 8007096:	46a1      	mov	r9, r4
 8007098:	eb18 080a 	adds.w	r8, r8, sl
 800709c:	eb49 090b 	adc.w	r9, r9, fp
 80070a0:	f04f 0100 	mov.w	r1, #0
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070b4:	4688      	mov	r8, r1
 80070b6:	4691      	mov	r9, r2
 80070b8:	eb1a 0508 	adds.w	r5, sl, r8
 80070bc:	eb4b 0609 	adc.w	r6, fp, r9
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	f04f 0400 	mov.w	r4, #0
 80070d2:	0094      	lsls	r4, r2, #2
 80070d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070d8:	008b      	lsls	r3, r1, #2
 80070da:	461a      	mov	r2, r3
 80070dc:	4623      	mov	r3, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	4631      	mov	r1, r6
 80070e2:	f7f9 f899 	bl	8000218 <__aeabi_uldivmod>
 80070e6:	4603      	mov	r3, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	461a      	mov	r2, r3
 80070ec:	4bba      	ldr	r3, [pc, #744]	; (80073d8 <UART_SetConfig+0x72c>)
 80070ee:	fba3 2302 	umull	r2, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	469b      	mov	fp, r3
 80070fc:	f04f 0c00 	mov.w	ip, #0
 8007100:	46d9      	mov	r9, fp
 8007102:	46e2      	mov	sl, ip
 8007104:	eb19 0309 	adds.w	r3, r9, r9
 8007108:	eb4a 040a 	adc.w	r4, sl, sl
 800710c:	4699      	mov	r9, r3
 800710e:	46a2      	mov	sl, r4
 8007110:	eb19 090b 	adds.w	r9, r9, fp
 8007114:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007118:	f04f 0100 	mov.w	r1, #0
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007124:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007128:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800712c:	4689      	mov	r9, r1
 800712e:	4692      	mov	sl, r2
 8007130:	eb1b 0509 	adds.w	r5, fp, r9
 8007134:	eb4c 060a 	adc.w	r6, ip, sl
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4619      	mov	r1, r3
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	f04f 0400 	mov.w	r4, #0
 800714a:	0094      	lsls	r4, r2, #2
 800714c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007150:	008b      	lsls	r3, r1, #2
 8007152:	461a      	mov	r2, r3
 8007154:	4623      	mov	r3, r4
 8007156:	4628      	mov	r0, r5
 8007158:	4631      	mov	r1, r6
 800715a:	f7f9 f85d 	bl	8000218 <__aeabi_uldivmod>
 800715e:	4603      	mov	r3, r0
 8007160:	460c      	mov	r4, r1
 8007162:	461a      	mov	r2, r3
 8007164:	4b9c      	ldr	r3, [pc, #624]	; (80073d8 <UART_SetConfig+0x72c>)
 8007166:	fba3 1302 	umull	r1, r3, r3, r2
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	2164      	movs	r1, #100	; 0x64
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	3332      	adds	r3, #50	; 0x32
 8007178:	4a97      	ldr	r2, [pc, #604]	; (80073d8 <UART_SetConfig+0x72c>)
 800717a:	fba2 2303 	umull	r2, r3, r2, r3
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007184:	4498      	add	r8, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	469b      	mov	fp, r3
 800718a:	f04f 0c00 	mov.w	ip, #0
 800718e:	46d9      	mov	r9, fp
 8007190:	46e2      	mov	sl, ip
 8007192:	eb19 0309 	adds.w	r3, r9, r9
 8007196:	eb4a 040a 	adc.w	r4, sl, sl
 800719a:	4699      	mov	r9, r3
 800719c:	46a2      	mov	sl, r4
 800719e:	eb19 090b 	adds.w	r9, r9, fp
 80071a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071a6:	f04f 0100 	mov.w	r1, #0
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071ba:	4689      	mov	r9, r1
 80071bc:	4692      	mov	sl, r2
 80071be:	eb1b 0509 	adds.w	r5, fp, r9
 80071c2:	eb4c 060a 	adc.w	r6, ip, sl
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	4619      	mov	r1, r3
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	f04f 0400 	mov.w	r4, #0
 80071d8:	0094      	lsls	r4, r2, #2
 80071da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071de:	008b      	lsls	r3, r1, #2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4623      	mov	r3, r4
 80071e4:	4628      	mov	r0, r5
 80071e6:	4631      	mov	r1, r6
 80071e8:	f7f9 f816 	bl	8000218 <__aeabi_uldivmod>
 80071ec:	4603      	mov	r3, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b79      	ldr	r3, [pc, #484]	; (80073d8 <UART_SetConfig+0x72c>)
 80071f4:	fba3 1302 	umull	r1, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	2164      	movs	r1, #100	; 0x64
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	3332      	adds	r3, #50	; 0x32
 8007206:	4a74      	ldr	r2, [pc, #464]	; (80073d8 <UART_SetConfig+0x72c>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4442      	add	r2, r8
 8007218:	609a      	str	r2, [r3, #8]
 800721a:	e0d0      	b.n	80073be <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800721c:	f7fe f902 	bl	8005424 <HAL_RCC_GetPCLK1Freq>
 8007220:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	469a      	mov	sl, r3
 8007226:	f04f 0b00 	mov.w	fp, #0
 800722a:	46d0      	mov	r8, sl
 800722c:	46d9      	mov	r9, fp
 800722e:	eb18 0308 	adds.w	r3, r8, r8
 8007232:	eb49 0409 	adc.w	r4, r9, r9
 8007236:	4698      	mov	r8, r3
 8007238:	46a1      	mov	r9, r4
 800723a:	eb18 080a 	adds.w	r8, r8, sl
 800723e:	eb49 090b 	adc.w	r9, r9, fp
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800724e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007252:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007256:	4688      	mov	r8, r1
 8007258:	4691      	mov	r9, r2
 800725a:	eb1a 0508 	adds.w	r5, sl, r8
 800725e:	eb4b 0609 	adc.w	r6, fp, r9
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	f04f 0400 	mov.w	r4, #0
 8007274:	0094      	lsls	r4, r2, #2
 8007276:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800727a:	008b      	lsls	r3, r1, #2
 800727c:	461a      	mov	r2, r3
 800727e:	4623      	mov	r3, r4
 8007280:	4628      	mov	r0, r5
 8007282:	4631      	mov	r1, r6
 8007284:	f7f8 ffc8 	bl	8000218 <__aeabi_uldivmod>
 8007288:	4603      	mov	r3, r0
 800728a:	460c      	mov	r4, r1
 800728c:	461a      	mov	r2, r3
 800728e:	4b52      	ldr	r3, [pc, #328]	; (80073d8 <UART_SetConfig+0x72c>)
 8007290:	fba3 2302 	umull	r2, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	469b      	mov	fp, r3
 800729e:	f04f 0c00 	mov.w	ip, #0
 80072a2:	46d9      	mov	r9, fp
 80072a4:	46e2      	mov	sl, ip
 80072a6:	eb19 0309 	adds.w	r3, r9, r9
 80072aa:	eb4a 040a 	adc.w	r4, sl, sl
 80072ae:	4699      	mov	r9, r3
 80072b0:	46a2      	mov	sl, r4
 80072b2:	eb19 090b 	adds.w	r9, r9, fp
 80072b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072ba:	f04f 0100 	mov.w	r1, #0
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072ce:	4689      	mov	r9, r1
 80072d0:	4692      	mov	sl, r2
 80072d2:	eb1b 0509 	adds.w	r5, fp, r9
 80072d6:	eb4c 060a 	adc.w	r6, ip, sl
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4619      	mov	r1, r3
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	f04f 0400 	mov.w	r4, #0
 80072ec:	0094      	lsls	r4, r2, #2
 80072ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072f2:	008b      	lsls	r3, r1, #2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4623      	mov	r3, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	4631      	mov	r1, r6
 80072fc:	f7f8 ff8c 	bl	8000218 <__aeabi_uldivmod>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	461a      	mov	r2, r3
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <UART_SetConfig+0x72c>)
 8007308:	fba3 1302 	umull	r1, r3, r3, r2
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	2164      	movs	r1, #100	; 0x64
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	3332      	adds	r3, #50	; 0x32
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <UART_SetConfig+0x72c>)
 800731c:	fba2 2303 	umull	r2, r3, r2, r3
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007326:	4498      	add	r8, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	469b      	mov	fp, r3
 800732c:	f04f 0c00 	mov.w	ip, #0
 8007330:	46d9      	mov	r9, fp
 8007332:	46e2      	mov	sl, ip
 8007334:	eb19 0309 	adds.w	r3, r9, r9
 8007338:	eb4a 040a 	adc.w	r4, sl, sl
 800733c:	4699      	mov	r9, r3
 800733e:	46a2      	mov	sl, r4
 8007340:	eb19 090b 	adds.w	r9, r9, fp
 8007344:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007348:	f04f 0100 	mov.w	r1, #0
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007354:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007358:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800735c:	4689      	mov	r9, r1
 800735e:	4692      	mov	sl, r2
 8007360:	eb1b 0509 	adds.w	r5, fp, r9
 8007364:	eb4c 060a 	adc.w	r6, ip, sl
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4619      	mov	r1, r3
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	f04f 0400 	mov.w	r4, #0
 800737a:	0094      	lsls	r4, r2, #2
 800737c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007380:	008b      	lsls	r3, r1, #2
 8007382:	461a      	mov	r2, r3
 8007384:	4623      	mov	r3, r4
 8007386:	4628      	mov	r0, r5
 8007388:	4631      	mov	r1, r6
 800738a:	f7f8 ff45 	bl	8000218 <__aeabi_uldivmod>
 800738e:	4603      	mov	r3, r0
 8007390:	460c      	mov	r4, r1
 8007392:	461a      	mov	r2, r3
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <UART_SetConfig+0x72c>)
 8007396:	fba3 1302 	umull	r1, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2164      	movs	r1, #100	; 0x64
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	3332      	adds	r3, #50	; 0x32
 80073a8:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <UART_SetConfig+0x72c>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4442      	add	r2, r8
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	e7ff      	b.n	80073be <UART_SetConfig+0x712>
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c8:	40011000 	.word	0x40011000
 80073cc:	40011400 	.word	0x40011400
 80073d0:	40011800 	.word	0x40011800
 80073d4:	40011c00 	.word	0x40011c00
 80073d8:	51eb851f 	.word	0x51eb851f

080073dc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <FSMC_NORSRAM_Init+0xdc>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007406:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800740c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007412:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007418:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800741e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007424:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800742a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007430:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007436:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800743c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007442:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007448:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800744e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b08      	cmp	r3, #8
 800745c:	d103      	bne.n	8007466 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007464:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68f9      	ldr	r1, [r7, #12]
 800746e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800747a:	d10a      	bne.n	8007492 <FSMC_NORSRAM_Init+0xb6>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d006      	beq.n	8007492 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	ffc00480 	.word	0xffc00480

080074bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80074f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80074fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	3b01      	subs	r3, #1
 8007502:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007504:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	3b02      	subs	r3, #2
 800750c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800750e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007514:	4313      	orrs	r3, r2
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6979      	ldr	r1, [r7, #20]
 8007524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007534:	d10e      	bne.n	8007554 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800753e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	3b01      	subs	r3, #1
 8007546:	051b      	lsls	r3, r3, #20
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
	...

08007564 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800757c:	d122      	bne.n	80075c4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007586:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800758c:	4013      	ands	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800759a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80075a2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80075aa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80075b0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6979      	ldr	r1, [r7, #20]
 80075be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075c2:	e005      	b.n	80075d0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80075cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	cff00000 	.word	0xcff00000

080075e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80075e4:	b084      	sub	sp, #16
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	f107 001c 	add.w	r0, r7, #28
 80075f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80075fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80075fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80075fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007602:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007606:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800760a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800760e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800761e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	b004      	add	sp, #16
 8007638:	4770      	bx	lr

0800763a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2203      	movs	r2, #3
 8007660:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007662:	2002      	movs	r0, #2
 8007664:	f7fa fb44 	bl	8001cf0 <HAL_Delay>
  
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0303 	and.w	r3, r3, #3
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800768e:	b480      	push	{r7}
 8007690:	b085      	sub	sp, #20
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076ac:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80076b2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80076b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80076c8:	f023 030f 	bic.w	r3, r3, #15
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	b2db      	uxtb	r3, r3
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3314      	adds	r3, #20
 800770a:	461a      	mov	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	4413      	add	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
}  
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007748:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800774e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007754:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800776c:	2300      	movs	r3, #0

}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b088      	sub	sp, #32
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007788:	2310      	movs	r3, #16
 800778a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800778c:	2340      	movs	r3, #64	; 0x40
 800778e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007798:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800779a:	f107 0308 	add.w	r3, r7, #8
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff ff74 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80077a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077aa:	2110      	movs	r1, #16
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f975 	bl	8007a9c <SDMMC_GetCmdResp1>
 80077b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077b4:	69fb      	ldr	r3, [r7, #28]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b08a      	sub	sp, #40	; 0x28
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80077ce:	2307      	movs	r3, #7
 80077d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077de:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077e0:	f107 0310 	add.w	r3, r7, #16
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff ff51 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80077ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f0:	2107      	movs	r1, #7
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f952 	bl	8007a9c <SDMMC_GetCmdResp1>
 80077f8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3728      	adds	r7, #40	; 0x28
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800781c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007820:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff30 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f90c 	bl	8007a4c <SDMMC_GetCmdError>
 8007834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007836:	69fb      	ldr	r3, [r7, #28]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007848:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800784c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800784e:	2308      	movs	r3, #8
 8007850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007852:	2340      	movs	r3, #64	; 0x40
 8007854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800785a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800785e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007860:	f107 0308 	add.w	r3, r7, #8
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff ff11 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 faf5 	bl	8007e5c <SDMMC_GetCmdResp7>
 8007872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007874:	69fb      	ldr	r3, [r7, #28]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800788c:	2337      	movs	r3, #55	; 0x37
 800788e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fef2 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	2137      	movs	r1, #55	; 0x37
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8f3 	bl	8007a9c <SDMMC_GetCmdResp1>
 80078b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b8:	69fb      	ldr	r3, [r7, #28]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80078d8:	2329      	movs	r3, #41	; 0x29
 80078da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ea:	f107 0308 	add.w	r3, r7, #8
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fecc 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa02 	bl	8007d00 <SDMMC_GetCmdResp3>
 80078fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078fe:	69fb      	ldr	r3, [r7, #28]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007916:	2306      	movs	r3, #6
 8007918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800791a:	2340      	movs	r3, #64	; 0x40
 800791c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007926:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007928:	f107 0308 	add.w	r3, r7, #8
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fead 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	2106      	movs	r1, #6
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8ae 	bl	8007a9c <SDMMC_GetCmdResp1>
 8007940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007942:	69fb      	ldr	r3, [r7, #28]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3720      	adds	r7, #32
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007958:	2333      	movs	r3, #51	; 0x33
 800795a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fe8c 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007976:	f241 3288 	movw	r2, #5000	; 0x1388
 800797a:	2133      	movs	r1, #51	; 0x33
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f88d 	bl	8007a9c <SDMMC_GetCmdResp1>
 8007982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007984:	69fb      	ldr	r3, [r7, #28]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b088      	sub	sp, #32
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800799a:	2302      	movs	r3, #2
 800799c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800799e:	23c0      	movs	r3, #192	; 0xc0
 80079a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fe6b 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f95b 	bl	8007c74 <SDMMC_GetCmdResp2>
 80079be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c0:	69fb      	ldr	r3, [r7, #28]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80079d8:	2309      	movs	r3, #9
 80079da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80079dc:	23c0      	movs	r3, #192	; 0xc0
 80079de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fe4c 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f93c 	bl	8007c74 <SDMMC_GetCmdResp2>
 80079fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fe:	69fb      	ldr	r3, [r7, #28]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a16:	2303      	movs	r3, #3
 8007a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a1a:	2340      	movs	r3, #64	; 0x40
 8007a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a28:	f107 0308 	add.w	r3, r7, #8
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fe2d 	bl	800768e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	2103      	movs	r1, #3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f99b 	bl	8007d74 <SDMMC_GetCmdResp6>
 8007a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a40:	69fb      	ldr	r3, [r7, #28]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3720      	adds	r7, #32
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007a4c:	b490      	push	{r4, r7}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a54:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <SDMMC_GetCmdError+0x48>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <SDMMC_GetCmdError+0x4c>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	0a5b      	lsrs	r3, r3, #9
 8007a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a68:	4623      	mov	r3, r4
 8007a6a:	1e5c      	subs	r4, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a74:	e009      	b.n	8007a8a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f2      	beq.n	8007a68 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	22c5      	movs	r2, #197	; 0xc5
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc90      	pop	{r4, r7}
 8007a92:	4770      	bx	lr
 8007a94:	20000000 	.word	0x20000000
 8007a98:	10624dd3 	.word	0x10624dd3

08007a9c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007aaa:	4b6f      	ldr	r3, [pc, #444]	; (8007c68 <SDMMC_GetCmdResp1+0x1cc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a6f      	ldr	r2, [pc, #444]	; (8007c6c <SDMMC_GetCmdResp1+0x1d0>)
 8007ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab4:	0a5b      	lsrs	r3, r3, #9
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007abc:	4623      	mov	r3, r4
 8007abe:	1e5c      	subs	r4, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac8:	e0c9      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ace:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <SDMMC_GetCmdResp1+0x20>
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1eb      	bne.n	8007abc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2204      	movs	r2, #4
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007af6:	2304      	movs	r3, #4
 8007af8:	e0b1      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e0a6      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	22c5      	movs	r2, #197	; 0xc5
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff fde3 	bl	80076e2 <SDIO_GetCommandResponse>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d001      	beq.n	8007b2a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e099      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fde5 	bl	80076fc <SDIO_GetResponse>
 8007b32:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4b4e      	ldr	r3, [pc, #312]	; (8007c70 <SDMMC_GetCmdResp1+0x1d4>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e08d      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da02      	bge.n	8007b4e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b4c:	e087      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007b58:	2340      	movs	r3, #64	; 0x40
 8007b5a:	e080      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007b66:	2380      	movs	r3, #128	; 0x80
 8007b68:	e079      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b78:	e071      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b88:	e069      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b98:	e061      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ba8:	e059      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb8:	e051      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bc8:	e049      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bd8:	e041      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be8:	e039      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf8:	e031      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c08:	e029      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c18:	e021      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007c24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c28:	e019      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c38:	e011      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c48:	e009      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007c54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c58:	e001      	b.n	8007c5e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000000 	.word	0x20000000
 8007c6c:	10624dd3 	.word	0x10624dd3
 8007c70:	fdffe008 	.word	0xfdffe008

08007c74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007c74:	b490      	push	{r4, r7}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <SDMMC_GetCmdResp2+0x84>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1e      	ldr	r2, [pc, #120]	; (8007cfc <SDMMC_GetCmdResp2+0x88>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	0a5b      	lsrs	r3, r3, #9
 8007c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007c90:	4623      	mov	r3, r4
 8007c92:	1e5c      	subs	r4, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c9c:	e026      	b.n	8007cec <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <SDMMC_GetCmdResp2+0x1c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1eb      	bne.n	8007c90 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cca:	2304      	movs	r3, #4
 8007ccc:	e00e      	b.n	8007cec <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e003      	b.n	8007cec <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	22c5      	movs	r2, #197	; 0xc5
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc90      	pop	{r4, r7}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000000 	.word	0x20000000
 8007cfc:	10624dd3 	.word	0x10624dd3

08007d00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007d00:	b490      	push	{r4, r7}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d08:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <SDMMC_GetCmdResp3+0x6c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a18      	ldr	r2, [pc, #96]	; (8007d70 <SDMMC_GetCmdResp3+0x70>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	0a5b      	lsrs	r3, r3, #9
 8007d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	1e5c      	subs	r4, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d28:	e01b      	b.n	8007d62 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <SDMMC_GetCmdResp3+0x1c>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1eb      	bne.n	8007d1c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2204      	movs	r2, #4
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d56:	2304      	movs	r3, #4
 8007d58:	e003      	b.n	8007d62 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	22c5      	movs	r2, #197	; 0xc5
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc90      	pop	{r4, r7}
 8007d6a:	4770      	bx	lr
 8007d6c:	20000000 	.word	0x20000000
 8007d70:	10624dd3 	.word	0x10624dd3

08007d74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007d74:	b590      	push	{r4, r7, lr}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d82:	4b34      	ldr	r3, [pc, #208]	; (8007e54 <SDMMC_GetCmdResp6+0xe0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a34      	ldr	r2, [pc, #208]	; (8007e58 <SDMMC_GetCmdResp6+0xe4>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	0a5b      	lsrs	r3, r3, #9
 8007d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d92:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d96:	4623      	mov	r3, r4
 8007d98:	1e5c      	subs	r4, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007da2:	e052      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <SDMMC_GetCmdResp6+0x22>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1eb      	bne.n	8007d96 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2204      	movs	r2, #4
 8007dce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	e03a      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e02f      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff fc79 	bl	80076e2 <SDIO_GetCommandResponse>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d001      	beq.n	8007dfe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e025      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	22c5      	movs	r2, #197	; 0xc5
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fc78 	bl	80076fc <SDIO_GetResponse>
 8007e0c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e011      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e34:	e009      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e44:	e001      	b.n	8007e4a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000000 	.word	0x20000000
 8007e58:	10624dd3 	.word	0x10624dd3

08007e5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007e5c:	b490      	push	{r4, r7}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e64:	4b21      	ldr	r3, [pc, #132]	; (8007eec <SDMMC_GetCmdResp7+0x90>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <SDMMC_GetCmdResp7+0x94>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	0a5b      	lsrs	r3, r3, #9
 8007e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007e78:	4623      	mov	r3, r4
 8007e7a:	1e5c      	subs	r4, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e84:	e02c      	b.n	8007ee0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f0      	beq.n	8007e78 <SDMMC_GetCmdResp7+0x1c>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1eb      	bne.n	8007e78 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	e014      	b.n	8007ee0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e009      	b.n	8007ee0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ede:	2300      	movs	r3, #0
  
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bc90      	pop	{r4, r7}
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000000 	.word	0x20000000
 8007ef0:	10624dd3 	.word	0x10624dd3

08007ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	f107 001c 	add.w	r0, r7, #28
 8007f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d122      	bne.n	8007f52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d105      	bne.n	8007f46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f94a 	bl	80081e0 <USB_CoreReset>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e01a      	b.n	8007f88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f93e 	bl	80081e0 <USB_CoreReset>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	639a      	str	r2, [r3, #56]	; 0x38
 8007f7a:	e005      	b.n	8007f88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d10b      	bne.n	8007fa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f043 0206 	orr.w	r2, r3, #6
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f043 0220 	orr.w	r2, r3, #32
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fb2:	b004      	add	sp, #16
 8007fb4:	4770      	bx	lr

08007fb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f043 0201 	orr.w	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f023 0201 	bic.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d106      	bne.n	8008026 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	60da      	str	r2, [r3, #12]
 8008024:	e00b      	b.n	800803e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	e001      	b.n	800803e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e003      	b.n	8008046 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800803e:	2032      	movs	r0, #50	; 0x32
 8008040:	f7f9 fe56 	bl	8001cf0 <HAL_Delay>

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	019b      	lsls	r3, r3, #6
 8008062:	f043 0220 	orr.w	r2, r3, #32
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <USB_FlushTxFifo+0x48>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b20      	cmp	r3, #32
 8008086:	d0f0      	beq.n	800806a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	00030d40 	.word	0x00030d40

0800809c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2210      	movs	r2, #16
 80080ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3301      	adds	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <USB_FlushRxFifo+0x40>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d901      	bls.n	80080c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e006      	b.n	80080ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d0f0      	beq.n	80080ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	00030d40 	.word	0x00030d40

080080e0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b089      	sub	sp, #36	; 0x24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4611      	mov	r1, r2
 80080ec:	461a      	mov	r2, r3
 80080ee:	460b      	mov	r3, r1
 80080f0:	71fb      	strb	r3, [r7, #7]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80080fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	d11a      	bne.n	800813c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008106:	88bb      	ldrh	r3, [r7, #4]
 8008108:	3303      	adds	r3, #3
 800810a:	089b      	lsrs	r3, r3, #2
 800810c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800810e:	2300      	movs	r3, #0
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	e00f      	b.n	8008134 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	031a      	lsls	r2, r3, #12
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	4413      	add	r3, r2
 800811c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008120:	461a      	mov	r2, r3
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	3304      	adds	r3, #4
 800812c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	3301      	adds	r3, #1
 8008132:	61bb      	str	r3, [r7, #24]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3eb      	bcc.n	8008114 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3724      	adds	r7, #36	; 0x24
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800814a:	b480      	push	{r7}
 800814c:	b089      	sub	sp, #36	; 0x24
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	4613      	mov	r3, r2
 8008156:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008160:	88fb      	ldrh	r3, [r7, #6]
 8008162:	3303      	adds	r3, #3
 8008164:	089b      	lsrs	r3, r3, #2
 8008166:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e00b      	b.n	8008186 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	601a      	str	r2, [r3, #0]
    pDest++;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	3304      	adds	r3, #4
 800817e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	3301      	adds	r3, #1
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	429a      	cmp	r2, r3
 800818c:	d3ef      	bcc.n	800816e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800818e:	69fb      	ldr	r3, [r7, #28]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3724      	adds	r7, #36	; 0x24
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0301 	and.w	r3, r3, #1
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a13      	ldr	r2, [pc, #76]	; (8008244 <USB_CoreReset+0x64>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e01b      	b.n	8008236 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	daf2      	bge.n	80081ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	f043 0201 	orr.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <USB_CoreReset+0x64>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d901      	bls.n	8008228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e006      	b.n	8008236 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b01      	cmp	r3, #1
 8008232:	d0f0      	beq.n	8008216 <USB_CoreReset+0x36>

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	00030d40 	.word	0x00030d40

08008248 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008248:	b084      	sub	sp, #16
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	f107 001c 	add.w	r0, r7, #28
 8008256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008264:	461a      	mov	r2, r3
 8008266:	2300      	movs	r3, #0
 8008268:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	2b03      	cmp	r3, #3
 8008292:	d10a      	bne.n	80082aa <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082a2:	f043 0304 	orr.w	r3, r3, #4
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	e014      	b.n	80082d4 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082b8:	f023 0304 	bic.w	r3, r3, #4
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e009      	b.n	80082d4 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082ce:	f023 0304 	bic.w	r3, r3, #4
 80082d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80082d4:	2110      	movs	r1, #16
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff feba 	bl	8008050 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff fedd 	bl	800809c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e015      	b.n	8008314 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	461a      	mov	r2, r3
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008308:	461a      	mov	r2, r3
 800830a:	2300      	movs	r3, #0
 800830c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	429a      	cmp	r2, r3
 800831a:	d3e5      	bcc.n	80082e8 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800831c:	2101      	movs	r1, #1
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8ac 	bl	800847c <USB_DriveVbus>

  HAL_Delay(200U);
 8008324:	20c8      	movs	r0, #200	; 0xc8
 8008326:	f7f9 fce3 	bl	8001cf0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f04f 32ff 	mov.w	r2, #4294967295
 8008336:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a14      	ldr	r2, [pc, #80]	; (80083a0 <USB_HostInit+0x158>)
 8008350:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <USB_HostInit+0x15c>)
 8008356:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800835a:	e009      	b.n	8008370 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a10      	ldr	r2, [pc, #64]	; (80083a8 <USB_HostInit+0x160>)
 8008366:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a10      	ldr	r2, [pc, #64]	; (80083ac <USB_HostInit+0x164>)
 800836c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	2b00      	cmp	r3, #0
 8008374:	d105      	bne.n	8008382 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f043 0210 	orr.w	r2, r3, #16
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <USB_HostInit+0x168>)
 8008388:	4313      	orrs	r3, r2
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800839a:	b004      	add	sp, #16
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	01000200 	.word	0x01000200
 80083a4:	00e00300 	.word	0x00e00300
 80083a8:	00600080 	.word	0x00600080
 80083ac:	004000e0 	.word	0x004000e0
 80083b0:	a3200008 	.word	0xa3200008

080083b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d107      	bne.n	8008406 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fc:	461a      	mov	r2, r3
 80083fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008402:	6053      	str	r3, [r2, #4]
 8008404:	e009      	b.n	800841a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d106      	bne.n	800841a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008412:	461a      	mov	r2, r3
 8008414:	f241 7370 	movw	r3, #6000	; 0x1770
 8008418:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008448:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008456:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008458:	2064      	movs	r0, #100	; 0x64
 800845a:	f7f9 fc49 	bl	8001cf0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800846a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800846c:	200a      	movs	r0, #10
 800846e:	f7f9 fc3f 	bl	8001cf0 <HAL_Delay>

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80084a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <USB_DriveVbus+0x44>
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d106      	bne.n	80084c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ca:	d109      	bne.n	80084e0 <USB_DriveVbus+0x64>
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	0c5b      	lsrs	r3, r3, #17
 800850c:	f003 0303 	and.w	r3, r3, #3
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	b29b      	uxth	r3, r3
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	70fb      	strb	r3, [r7, #3]
 8008552:	460b      	mov	r3, r1
 8008554:	70bb      	strb	r3, [r7, #2]
 8008556:	4613      	mov	r3, r2
 8008558:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	461a      	mov	r2, r3
 8008570:	f04f 33ff 	mov.w	r3, #4294967295
 8008574:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008576:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800857a:	2b03      	cmp	r3, #3
 800857c:	d87e      	bhi.n	800867c <USB_HC_Init+0x13c>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <USB_HC_Init+0x44>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	08008595 	.word	0x08008595
 8008588:	0800863f 	.word	0x0800863f
 800858c:	08008595 	.word	0x08008595
 8008590:	08008601 	.word	0x08008601
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a0:	461a      	mov	r2, r3
 80085a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80085a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80085a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da10      	bge.n	80085d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ce:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80085d0:	e057      	b.n	8008682 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d051      	beq.n	8008682 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80085fc:	60d3      	str	r3, [r2, #12]
      break;
 80085fe:	e040      	b.n	8008682 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860c:	461a      	mov	r2, r3
 800860e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008614:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008618:	2b00      	cmp	r3, #0
 800861a:	da34      	bge.n	8008686 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	78fa      	ldrb	r2, [r7, #3]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	440a      	add	r2, r1
 8008632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800863c:	e023      	b.n	8008686 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864a:	461a      	mov	r2, r3
 800864c:	f240 2325 	movw	r3, #549	; 0x225
 8008650:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008652:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008656:	2b00      	cmp	r3, #0
 8008658:	da17      	bge.n	800868a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	78fa      	ldrb	r2, [r7, #3]
 800866a:	0151      	lsls	r1, r2, #5
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	440a      	add	r2, r1
 8008670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008674:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008678:	60d3      	str	r3, [r2, #12]
      }
      break;
 800867a:	e006      	b.n	800868a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
      break;
 8008680:	e004      	b.n	800868c <USB_HC_Init+0x14c>
      break;
 8008682:	bf00      	nop
 8008684:	e002      	b.n	800868c <USB_HC_Init+0x14c>
      break;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <USB_HC_Init+0x14c>
      break;
 800868a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	2101      	movs	r1, #1
 800869c:	fa01 f303 	lsl.w	r3, r1, r3
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086a6:	4313      	orrs	r3, r2
 80086a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80086b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da03      	bge.n	80086c6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80086be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	e001      	b.n	80086ca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80086ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d103      	bne.n	80086da <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e001      	b.n	80086de <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086de:	787b      	ldrb	r3, [r7, #1]
 80086e0:	059b      	lsls	r3, r3, #22
 80086e2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086e6:	78bb      	ldrb	r3, [r7, #2]
 80086e8:	02db      	lsls	r3, r3, #11
 80086ea:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086f4:	049b      	lsls	r3, r3, #18
 80086f6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008702:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	0159      	lsls	r1, r3, #5
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	440b      	add	r3, r1
 8008710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008714:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800871a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800871c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008720:	2b03      	cmp	r3, #3
 8008722:	d10f      	bne.n	8008744 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4413      	add	r3, r2
 800872c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	440a      	add	r2, r1
 800873a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800873e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008742:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008744:	7dfb      	ldrb	r3, [r7, #23]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop

08008754 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08c      	sub	sp, #48	; 0x30
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800876c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008770:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877a:	2b00      	cmp	r3, #0
 800877c:	d028      	beq.n	80087d0 <USB_HC_StartXfer+0x7c>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	791b      	ldrb	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d124      	bne.n	80087d0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <USB_HC_StartXfer+0x50>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	795b      	ldrb	r3, [r3, #5]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d107      	bne.n	80087a4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	4619      	mov	r1, r3
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fa2e 	bl	8008bfc <USB_DoPing>
      return HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	e112      	b.n	80089ca <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d112      	bne.n	80087d0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80087c8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d018      	beq.n	800880a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	8912      	ldrh	r2, [r2, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	3b01      	subs	r3, #1
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	8912      	ldrh	r2, [r2, #8]
 80087e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ec:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80087ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087f0:	8b7b      	ldrh	r3, [r7, #26]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d90b      	bls.n	800880e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80087f6:	8b7b      	ldrh	r3, [r7, #26]
 80087f8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80087fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	8912      	ldrh	r2, [r2, #8]
 8008800:	fb02 f203 	mul.w	r2, r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	611a      	str	r2, [r3, #16]
 8008808:	e001      	b.n	800880e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800880a:	2301      	movs	r3, #1
 800880c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d006      	beq.n	8008824 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	8912      	ldrh	r2, [r2, #8]
 800881c:	fb02 f203 	mul.w	r2, r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800882c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800882e:	04d9      	lsls	r1, r3, #19
 8008830:	4b68      	ldr	r3, [pc, #416]	; (80089d4 <USB_HC_StartXfer+0x280>)
 8008832:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008834:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	7a9b      	ldrb	r3, [r3, #10]
 800883a:	075b      	lsls	r3, r3, #29
 800883c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008840:	69f9      	ldr	r1, [r7, #28]
 8008842:	0148      	lsls	r0, r1, #5
 8008844:	6a39      	ldr	r1, [r7, #32]
 8008846:	4401      	add	r1, r0
 8008848:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800884c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800884e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	68d9      	ldr	r1, [r3, #12]
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	460a      	mov	r2, r1
 8008868:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	bf0c      	ite	eq
 800887a:	2301      	moveq	r3, #1
 800887c:	2300      	movne	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	6a3a      	ldr	r2, [r7, #32]
 8008896:	440a      	add	r2, r1
 8008898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800889c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	7e7b      	ldrb	r3, [r7, #25]
 80088b2:	075b      	lsls	r3, r3, #29
 80088b4:	69f9      	ldr	r1, [r7, #28]
 80088b6:	0148      	lsls	r0, r1, #5
 80088b8:	6a39      	ldr	r1, [r7, #32]
 80088ba:	4401      	add	r1, r0
 80088bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80088c0:	4313      	orrs	r3, r2
 80088c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a41      	ldr	r2, [pc, #260]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088d4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088d6:	4b40      	ldr	r3, [pc, #256]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088de:	4a3e      	ldr	r2, [pc, #248]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088e0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	78db      	ldrb	r3, [r3, #3]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80088ea:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f2:	4a39      	ldr	r2, [pc, #228]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	e005      	b.n	8008904 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80088f8:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <USB_HC_StartXfer+0x284>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008900:	4a35      	ldr	r2, [pc, #212]	; (80089d8 <USB_HC_StartXfer+0x284>)
 8008902:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008904:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <USB_HC_StartXfer+0x284>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800890c:	4a32      	ldr	r2, [pc, #200]	; (80089d8 <USB_HC_StartXfer+0x284>)
 800890e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	4413      	add	r3, r2
 8008918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891c:	461a      	mov	r2, r3
 800891e:	4b2e      	ldr	r3, [pc, #184]	; (80089d8 <USB_HC_StartXfer+0x284>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d14e      	bne.n	80089c8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d14a      	bne.n	80089c8 <USB_HC_StartXfer+0x274>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d046      	beq.n	80089c8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	79db      	ldrb	r3, [r3, #7]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d830      	bhi.n	80089a4 <USB_HC_StartXfer+0x250>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <USB_HC_StartXfer+0x1f4>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008959 	.word	0x08008959
 800894c:	0800897d 	.word	0x0800897d
 8008950:	08008959 	.word	0x08008959
 8008954:	0800897d 	.word	0x0800897d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	3303      	adds	r3, #3
 800895e:	089b      	lsrs	r3, r3, #2
 8008960:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008962:	8afa      	ldrh	r2, [r7, #22]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	b29b      	uxth	r3, r3
 800896a:	429a      	cmp	r2, r3
 800896c:	d91c      	bls.n	80089a8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f043 0220 	orr.w	r2, r3, #32
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	619a      	str	r2, [r3, #24]
          }
          break;
 800897a:	e015      	b.n	80089a8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	3303      	adds	r3, #3
 8008982:	089b      	lsrs	r3, r3, #2
 8008984:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008986:	8afa      	ldrh	r2, [r7, #22]
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	b29b      	uxth	r3, r3
 8008992:	429a      	cmp	r2, r3
 8008994:	d90a      	bls.n	80089ac <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80089a2:	e003      	b.n	80089ac <USB_HC_StartXfer+0x258>

        default:
          break;
 80089a4:	bf00      	nop
 80089a6:	e002      	b.n	80089ae <USB_HC_StartXfer+0x25a>
          break;
 80089a8:	bf00      	nop
 80089aa:	e000      	b.n	80089ae <USB_HC_StartXfer+0x25a>
          break;
 80089ac:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	68d9      	ldr	r1, [r3, #12]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	785a      	ldrb	r2, [r3, #1]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	b298      	uxth	r0, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4603      	mov	r3, r0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff fb8c 	bl	80080e0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3728      	adds	r7, #40	; 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	1ff80000 	.word	0x1ff80000
 80089d8:	200000f4 	.word	0x200000f4

080089dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	b29b      	uxth	r3, r3
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b087      	sub	sp, #28
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	0c9b      	lsrs	r3, r3, #18
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <USB_HC_Halt+0x3a>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d16c      	bne.n	8008b12 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a56:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d143      	bne.n	8008aec <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008abe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ac2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ad0:	d81d      	bhi.n	8008b0e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae8:	d0ec      	beq.n	8008ac4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008aea:	e080      	b.n	8008bee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b0a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b0c:	e06f      	b.n	8008bee <USB_HC_Halt+0x1f0>
          break;
 8008b0e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b10:	e06d      	b.n	8008bee <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b30:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d143      	bne.n	8008bca <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b60:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b80:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ba0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bae:	d81d      	bhi.n	8008bec <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc6:	d0ec      	beq.n	8008ba2 <USB_HC_Halt+0x1a4>
 8008bc8:	e011      	b.n	8008bee <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e000      	b.n	8008bee <USB_HC_Halt+0x1f0>
          break;
 8008bec:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008c10:	2301      	movs	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	04da      	lsls	r2, r3, #19
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <USB_DoPing+0x74>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	1ff80000 	.word	0x1ff80000

08008c74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff f9a7 	bl	8007fd8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008c8a:	2110      	movs	r1, #16
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f9df 	bl	8008050 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fa02 	bl	800809c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	e01f      	b.n	8008cde <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cc4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	613b      	str	r3, [r7, #16]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b0f      	cmp	r3, #15
 8008ce2:	d9dc      	bls.n	8008c9e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	e034      	b.n	8008d54 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d08:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d10:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d1e:	461a      	mov	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	3301      	adds	r3, #1
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d30:	d80c      	bhi.n	8008d4c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d48:	d0ec      	beq.n	8008d24 <USB_StopHost+0xb0>
 8008d4a:	e000      	b.n	8008d4e <USB_StopHost+0xda>
        break;
 8008d4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d9c7      	bls.n	8008cea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d60:	461a      	mov	r2, r3
 8008d62:	f04f 33ff 	mov.w	r3, #4294967295
 8008d66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff f920 	bl	8007fb6 <USB_EnableGlobalInt>

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8008d80:	b590      	push	{r4, r7, lr}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	2202      	movs	r2, #2
 8008d90:	2102      	movs	r1, #2
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fc3a 	bl	800960c <USBH_FindInterface>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2bff      	cmp	r3, #255	; 0xff
 8008da0:	f000 812a 	beq.w	8008ff8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc13 	bl	80095d4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8008db4:	2050      	movs	r0, #80	; 0x50
 8008db6:	f002 f8df 	bl	800af78 <malloc>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	211a      	movs	r1, #26
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da15      	bge.n	8008e0c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	211a      	movs	r1, #26
 8008de6:	fb01 f303 	mul.w	r3, r1, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	211a      	movs	r1, #26
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008e06:	881a      	ldrh	r2, [r3, #0]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fd21 	bl	800a85a <USBH_AllocPipe>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	7819      	ldrb	r1, [r3, #0]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	7858      	ldrb	r0, [r3, #1]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	8952      	ldrh	r2, [r2, #10]
 8008e38:	9202      	str	r2, [sp, #8]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	9201      	str	r2, [sp, #4]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4623      	mov	r3, r4
 8008e42:	4602      	mov	r2, r0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fcd9 	bl	800a7fc <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 ffe0 	bl	800ae18 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	210a      	movs	r1, #10
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fbd4 	bl	800960c <USBH_FindInterface>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	2bff      	cmp	r3, #255	; 0xff
 8008e6c:	f000 80c4 	beq.w	8008ff8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	211a      	movs	r1, #26
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da16      	bge.n	8008eb6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	211a      	movs	r1, #26
 8008e8e:	fb01 f303 	mul.w	r3, r1, r3
 8008e92:	4413      	add	r3, r2
 8008e94:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	211a      	movs	r1, #26
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008eae:	881a      	ldrh	r2, [r3, #0]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	835a      	strh	r2, [r3, #26]
 8008eb4:	e015      	b.n	8008ee2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	211a      	movs	r1, #26
 8008ebc:	fb01 f303 	mul.w	r3, r1, r3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8008ec6:	781a      	ldrb	r2, [r3, #0]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	211a      	movs	r1, #26
 8008ed2:	fb01 f303 	mul.w	r3, r1, r3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8008edc:	881a      	ldrh	r2, [r3, #0]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	211a      	movs	r1, #26
 8008ee8:	fb01 f303 	mul.w	r3, r1, r3
 8008eec:	4413      	add	r3, r2
 8008eee:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	b25b      	sxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da16      	bge.n	8008f28 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	211a      	movs	r1, #26
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	4413      	add	r3, r2
 8008f06:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	211a      	movs	r1, #26
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008f20:	881a      	ldrh	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	835a      	strh	r2, [r3, #26]
 8008f26:	e015      	b.n	8008f54 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	211a      	movs	r1, #26
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	211a      	movs	r1, #26
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8008f4e:	881a      	ldrh	r2, [r3, #0]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	7b9b      	ldrb	r3, [r3, #14]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 fc7d 	bl	800a85a <USBH_AllocPipe>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	7bdb      	ldrb	r3, [r3, #15]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 fc73 	bl	800a85a <USBH_AllocPipe>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	7b59      	ldrb	r1, [r3, #13]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	7b98      	ldrb	r0, [r3, #14]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	8b12      	ldrh	r2, [r2, #24]
 8008f94:	9202      	str	r2, [sp, #8]
 8008f96:	2202      	movs	r2, #2
 8008f98:	9201      	str	r2, [sp, #4]
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fc2b 	bl	800a7fc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	7b19      	ldrb	r1, [r3, #12]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	7bd8      	ldrb	r0, [r3, #15]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	8b52      	ldrh	r2, [r2, #26]
 8008fbe:	9202      	str	r2, [sp, #8]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	9201      	str	r2, [sp, #4]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fc16 	bl	800a7fc <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	7b5b      	ldrb	r3, [r3, #13]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 ff19 	bl	800ae18 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	7b1b      	ldrb	r3, [r3, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 ff12 	bl	800ae18 <USBH_LL_SetToggle>
      status = USBH_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd90      	pop	{r4, r7, pc}

08009002 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fc09 	bl	800a83a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fc31 	bl	800a896 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b1b      	ldrb	r3, [r3, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00e      	beq.n	8009060 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7b1b      	ldrb	r3, [r3, #12]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fbf6 	bl	800a83a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	7b1b      	ldrb	r3, [r3, #12]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fc1e 	bl	800a896 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	7b5b      	ldrb	r3, [r3, #13]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00e      	beq.n	8009086 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	7b5b      	ldrb	r3, [r3, #13]
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fbe3 	bl	800a83a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	7b5b      	ldrb	r3, [r3, #13]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 fc0b 	bl	800a896 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	4618      	mov	r0, r3
 800909c:	f001 ff74 	bl	800af88 <free>
    phost->pActiveClass->pData = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80090a6:	2200      	movs	r2, #0
 80090a8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80090bc:	2302      	movs	r3, #2
 80090be:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3340      	adds	r3, #64	; 0x40
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f8b2 	bl	800923a <GetLineCoding>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d105      	bne.n	80090ec <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090e6:	2102      	movs	r1, #2
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
  }
  return status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009118:	2b04      	cmp	r3, #4
 800911a:	d877      	bhi.n	800920c <USBH_CDC_Process+0x114>
 800911c:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <USBH_CDC_Process+0x2c>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	08009139 	.word	0x08009139
 8009128:	0800913f 	.word	0x0800913f
 800912c:	0800916f 	.word	0x0800916f
 8009130:	080091e3 	.word	0x080091e3
 8009134:	080091f1 	.word	0x080091f1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	e06d      	b.n	800921a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f897 	bl	8009278 <SetLineCoding>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800915c:	e058      	b.n	8009210 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d055      	beq.n	8009210 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2204      	movs	r2, #4
 8009168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800916c:	e050      	b.n	8009210 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	3340      	adds	r3, #64	; 0x40
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f860 	bl	800923a <GetLineCoding>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d126      	bne.n	80091d2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d13b      	bne.n	8009214 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d133      	bne.n	8009214 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d12b      	bne.n	8009214 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d124      	bne.n	8009214 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f95a 	bl	8009484 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80091d0:	e020      	b.n	8009214 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d01d      	beq.n	8009214 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2204      	movs	r2, #4
 80091dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80091e0:	e018      	b.n	8009214 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f867 	bl	80092b6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8dc 	bl	80093a6 <CDC_ProcessReception>
    break;
 80091ee:	e014      	b.n	800921a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80091f0:	2100      	movs	r1, #0
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fece 	bl	8009f94 <USBH_ClrFeature>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800920a:	e005      	b.n	8009218 <USBH_CDC_Process+0x120>

  default:
    break;
 800920c:	bf00      	nop
 800920e:	e004      	b.n	800921a <USBH_CDC_Process+0x122>
    break;
 8009210:	bf00      	nop
 8009212:	e002      	b.n	800921a <USBH_CDC_Process+0x122>
    break;
 8009214:	bf00      	nop
 8009216:	e000      	b.n	800921a <USBH_CDC_Process+0x122>
    break;
 8009218:	bf00      	nop

  }

  return status;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	22a1      	movs	r2, #161	; 0xa1
 8009248:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2221      	movs	r2, #33	; 0x21
 800924e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2207      	movs	r2, #7
 8009260:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2207      	movs	r2, #7
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f873 	bl	800a354 <USBH_CtlReq>
 800926e:	4603      	mov	r3, r0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2221      	movs	r2, #33	; 0x21
 8009286:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2220      	movs	r2, #32
 800928c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2207      	movs	r2, #7
 800929e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2207      	movs	r2, #7
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 f854 	bl	800a354 <USBH_CtlReq>
 80092ac:	4603      	mov	r3, r0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b086      	sub	sp, #24
 80092ba:	af02      	add	r7, sp, #8
 80092bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d002      	beq.n	80092dc <CDC_ProcessTransmission+0x26>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d025      	beq.n	8009326 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80092da:	e060      	b.n	800939e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	8b12      	ldrh	r2, [r2, #24]
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d90c      	bls.n	8009302 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	69d9      	ldr	r1, [r3, #28]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8b1a      	ldrh	r2, [r3, #24]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	7b58      	ldrb	r0, [r3, #13]
 80092f4:	2301      	movs	r3, #1
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4603      	mov	r3, r0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fa3b 	bl	800a776 <USBH_BulkSendData>
 8009300:	e00c      	b.n	800931c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7b58      	ldrb	r0, [r3, #13]
 8009310:	2301      	movs	r3, #1
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4603      	mov	r3, r0
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fa2d 	bl	800a776 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8009324:	e03b      	b.n	800939e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	7b5b      	ldrb	r3, [r3, #13]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fd49 	bl	800adc4 <USBH_LL_GetURBState>
 8009332:	4603      	mov	r3, r0
 8009334:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d128      	bne.n	800938e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	8b12      	ldrh	r2, [r2, #24]
 8009344:	4293      	cmp	r3, r2
 8009346:	d90e      	bls.n	8009366 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	8b12      	ldrh	r2, [r2, #24]
 8009350:	1a9a      	subs	r2, r3, r2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	8b12      	ldrh	r2, [r2, #24]
 800935e:	441a      	add	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]
 8009364:	e002      	b.n	800936c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800937c:	e00e      	b.n	800939c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f868 	bl	800945c <USBH_CDC_TransmitCallback>
    break;
 800938c:	e006      	b.n	800939c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d103      	bne.n	800939c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800939c:	bf00      	nop
  }
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b086      	sub	sp, #24
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d002      	beq.n	80093cc <CDC_ProcessReception+0x26>
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d00e      	beq.n	80093e8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80093ca:	e043      	b.n	8009454 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	6a19      	ldr	r1, [r3, #32]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	8b5a      	ldrh	r2, [r3, #26]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	7b1b      	ldrb	r3, [r3, #12]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f9f1 	bl	800a7c0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2204      	movs	r2, #4
 80093e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80093e6:	e035      	b.n	8009454 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	7b1b      	ldrb	r3, [r3, #12]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fce8 	bl	800adc4 <USBH_LL_GetURBState>
 80093f4:	4603      	mov	r3, r0
 80093f6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80093f8:	7cfb      	ldrb	r3, [r7, #19]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d129      	bne.n	8009452 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	7b1b      	ldrb	r3, [r3, #12]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fc4b 	bl	800aca0 <USBH_LL_GetLastXferSize>
 800940a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d016      	beq.n	8009444 <CDC_ProcessReception+0x9e>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	8b5b      	ldrh	r3, [r3, #26]
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4293      	cmp	r3, r2
 8009420:	d910      	bls.n	8009444 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	441a      	add	r2, r3
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	2203      	movs	r2, #3
 800943e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8009442:	e006      	b.n	8009452 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f80f 	bl	8009470 <USBH_CDC_ReceiveCallback>
    break;
 8009452:	bf00      	nop
  }
}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]

}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	e019      	b.n	80094e4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f80f 	bl	80094ec <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f001 fb2d 	bl	800ab3c <USBH_LL_Init>

  return USBH_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80094f8:	e008      	b.n	800950c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	32e0      	adds	r2, #224	; 0xe0
 8009500:	2100      	movs	r1, #0
 8009502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b0e      	cmp	r3, #14
 8009510:	d9f3      	bls.n	80094fa <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e009      	b.n	800952c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4413      	add	r3, r2
 800951e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009532:	d3f1      	bcc.n	8009518 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2240      	movs	r2, #64	; 0x40
 8009558:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d017      	beq.n	80095c2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10f      	bne.n	80095bc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095a2:	1c59      	adds	r1, r3, #1
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	33dc      	adds	r3, #220	; 0xdc
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]
 80095ba:	e004      	b.n	80095c6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	73fb      	strb	r3, [r7, #15]
 80095c0:	e001      	b.n	80095c6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80095c2:	2302      	movs	r3, #2
 80095c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d204      	bcs.n	80095fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80095f8:	e001      	b.n	80095fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80095fa:	2302      	movs	r3, #2
 80095fc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	461a      	mov	r2, r3
 800961a:	4603      	mov	r3, r0
 800961c:	70fb      	strb	r3, [r7, #3]
 800961e:	460b      	mov	r3, r1
 8009620:	70bb      	strb	r3, [r7, #2]
 8009622:	4613      	mov	r3, r2
 8009624:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800962a:	2300      	movs	r3, #0
 800962c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009634:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009636:	e025      	b.n	8009684 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	221a      	movs	r2, #26
 800963c:	fb02 f303 	mul.w	r3, r2, r3
 8009640:	3308      	adds	r3, #8
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	4413      	add	r3, r2
 8009646:	3302      	adds	r3, #2
 8009648:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	795b      	ldrb	r3, [r3, #5]
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	429a      	cmp	r2, r3
 8009652:	d002      	beq.n	800965a <USBH_FindInterface+0x4e>
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	2bff      	cmp	r3, #255	; 0xff
 8009658:	d111      	bne.n	800967e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800965e:	78ba      	ldrb	r2, [r7, #2]
 8009660:	429a      	cmp	r2, r3
 8009662:	d002      	beq.n	800966a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8009664:	78bb      	ldrb	r3, [r7, #2]
 8009666:	2bff      	cmp	r3, #255	; 0xff
 8009668:	d109      	bne.n	800967e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800966e:	787a      	ldrb	r2, [r7, #1]
 8009670:	429a      	cmp	r2, r3
 8009672:	d002      	beq.n	800967a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009674:	787b      	ldrb	r3, [r7, #1]
 8009676:	2bff      	cmp	r3, #255	; 0xff
 8009678:	d101      	bne.n	800967e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	e006      	b.n	800968c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	3301      	adds	r3, #1
 8009682:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d9d6      	bls.n	8009638 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800968a:	23ff      	movs	r3, #255	; 0xff
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 fa87 	bl	800abb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80096a6:	2101      	movs	r1, #1
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f001 fb9e 	bl	800adea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af04      	add	r7, sp, #16
 80096be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096c0:	2302      	movs	r3, #2
 80096c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 faec 	bl	8009ca6 <USBH_IsPortEnabled>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10c      	bne.n	80096ee <USBH_Process+0x36>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d002      	beq.n	80096ee <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2203      	movs	r2, #3
 80096ec:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b0b      	cmp	r3, #11
 80096f6:	f200 814c 	bhi.w	8009992 <USBH_Process+0x2da>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBH_Process+0x48>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	08009731 	.word	0x08009731
 8009704:	08009753 	.word	0x08009753
 8009708:	08009767 	.word	0x08009767
 800970c:	0800996d 	.word	0x0800996d
 8009710:	08009993 	.word	0x08009993
 8009714:	080097f5 	.word	0x080097f5
 8009718:	08009923 	.word	0x08009923
 800971c:	08009825 	.word	0x08009825
 8009720:	08009845 	.word	0x08009845
 8009724:	08009865 	.word	0x08009865
 8009728:	08009893 	.word	0x08009893
 800972c:	08009955 	.word	0x08009955
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 812c 	beq.w	8009996 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009744:	20c8      	movs	r0, #200	; 0xc8
 8009746:	f001 fb9a 	bl	800ae7e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 fa8d 	bl	800ac6a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009750:	e121      	b.n	8009996 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009758:	2b01      	cmp	r3, #1
 800975a:	f040 811e 	bne.w	800999a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009764:	e119      	b.n	800999a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8009766:	2064      	movs	r0, #100	; 0x64
 8009768:	f001 fb89 	bl	800ae7e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 fa57 	bl	800ac20 <USBH_LL_GetSpeed>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2205      	movs	r2, #5
 8009780:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009782:	2100      	movs	r1, #0
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f868 	bl	800a85a <USBH_AllocPipe>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8009792:	2180      	movs	r1, #128	; 0x80
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f860 	bl	800a85a <USBH_AllocPipe>
 800979a:	4603      	mov	r3, r0
 800979c:	461a      	mov	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7919      	ldrb	r1, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80097b6:	b292      	uxth	r2, r2
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	9201      	str	r2, [sp, #4]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4603      	mov	r3, r0
 80097c2:	2280      	movs	r2, #128	; 0x80
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f819 	bl	800a7fc <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7959      	ldrb	r1, [r3, #5]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80097de:	b292      	uxth	r2, r2
 80097e0:	9202      	str	r2, [sp, #8]
 80097e2:	2200      	movs	r2, #0
 80097e4:	9201      	str	r2, [sp, #4]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	4603      	mov	r3, r0
 80097ea:	2200      	movs	r2, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f805 	bl	800a7fc <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80097f2:	e0e3      	b.n	80099bc <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f8e7 	bl	80099c8 <USBH_HandleEnum>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 80ce 	bne.w	800999e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009810:	2b01      	cmp	r3, #1
 8009812:	d103      	bne.n	800981c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2208      	movs	r2, #8
 8009818:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800981a:	e0c0      	b.n	800999e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2207      	movs	r2, #7
 8009820:	701a      	strb	r2, [r3, #0]
    break;
 8009822:	e0bc      	b.n	800999e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80b9 	beq.w	80099a2 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009836:	2101      	movs	r1, #1
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2208      	movs	r2, #8
 8009840:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009842:	e0ae      	b.n	80099a2 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800984a:	b29b      	uxth	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb59 	bl	8009f06 <USBH_SetCfg>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 80a5 	bne.w	80099a6 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2209      	movs	r2, #9
 8009860:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009862:	e0a0      	b.n	80099a6 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009872:	2101      	movs	r1, #1
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb69 	bl	8009f4c <USBH_SetFeature>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 8094 	bne.w	80099aa <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220a      	movs	r2, #10
 8009886:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009888:	e08f      	b.n	80099aa <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	220a      	movs	r2, #10
 800988e:	701a      	strb	r2, [r3, #0]
    break;
 8009890:	e08b      	b.n	80099aa <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8088 	beq.w	80099ae <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
 80098aa:	e017      	b.n	80098dc <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	33dc      	adds	r3, #220	; 0xdc
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	791a      	ldrb	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d108      	bne.n	80098d6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	33dc      	adds	r3, #220	; 0xdc
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	3301      	adds	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0e4      	beq.n	80098ac <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d016      	beq.n	800991a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2206      	movs	r2, #6
 8009902:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800990a:	2103      	movs	r1, #3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009910:	e04d      	b.n	80099ae <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	220d      	movs	r2, #13
 8009916:	701a      	strb	r2, [r3, #0]
    break;
 8009918:	e049      	b.n	80099ae <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	220d      	movs	r2, #13
 800991e:	701a      	strb	r2, [r3, #0]
    break;
 8009920:	e045      	b.n	80099ae <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00f      	beq.n	800994c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
 8009938:	4603      	mov	r3, r0
 800993a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d136      	bne.n	80099b2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	220b      	movs	r2, #11
 8009948:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800994a:	e032      	b.n	80099b2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	220d      	movs	r2, #13
 8009950:	701a      	strb	r2, [r3, #0]
    break;
 8009952:	e02e      	b.n	80099b2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800995a:	2b00      	cmp	r3, #0
 800995c:	d02b      	beq.n	80099b6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
    }
    break;
 800996a:	e024      	b.n	80099b6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fdbd 	bl	80094ec <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01e      	beq.n	80099ba <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009990:	e013      	b.n	80099ba <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8009992:	bf00      	nop
 8009994:	e012      	b.n	80099bc <USBH_Process+0x304>
    break;
 8009996:	bf00      	nop
 8009998:	e010      	b.n	80099bc <USBH_Process+0x304>
    break;
 800999a:	bf00      	nop
 800999c:	e00e      	b.n	80099bc <USBH_Process+0x304>
    break;
 800999e:	bf00      	nop
 80099a0:	e00c      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099a2:	bf00      	nop
 80099a4:	e00a      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099a6:	bf00      	nop
 80099a8:	e008      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099aa:	bf00      	nop
 80099ac:	e006      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099ae:	bf00      	nop
 80099b0:	e004      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099b2:	bf00      	nop
 80099b4:	e002      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <USBH_Process+0x304>
    break;
 80099ba:	bf00      	nop
  }
 return USBH_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop

080099c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af04      	add	r7, sp, #16
 80099ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80099d0:	2301      	movs	r3, #1
 80099d2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	785b      	ldrb	r3, [r3, #1]
 80099d8:	2b07      	cmp	r3, #7
 80099da:	f200 80f8 	bhi.w	8009bce <USBH_HandleEnum+0x206>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBH_HandleEnum+0x1c>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a05 	.word	0x08009a05
 80099e8:	08009a77 	.word	0x08009a77
 80099ec:	08009a8f 	.word	0x08009a8f
 80099f0:	08009b05 	.word	0x08009b05
 80099f4:	08009b1b 	.word	0x08009b1b
 80099f8:	08009b37 	.word	0x08009b37
 80099fc:	08009b6b 	.word	0x08009b6b
 8009a00:	08009b9f 	.word	0x08009b9f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009a04:	2108      	movs	r1, #8
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9ad 	bl	8009d66 <USBH_Get_DevDesc>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f040 80df 	bne.w	8009bd2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	7919      	ldrb	r1, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009a38:	b292      	uxth	r2, r2
 8009a3a:	9202      	str	r2, [sp, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4603      	mov	r3, r0
 8009a44:	2280      	movs	r2, #128	; 0x80
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fed8 	bl	800a7fc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	7959      	ldrb	r1, [r3, #5]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009a60:	b292      	uxth	r2, r2
 8009a62:	9202      	str	r2, [sp, #8]
 8009a64:	2200      	movs	r2, #0
 8009a66:	9201      	str	r2, [sp, #4]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fec4 	bl	800a7fc <USBH_OpenPipe>

    }
    break;
 8009a74:	e0ad      	b.n	8009bd2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009a76:	2112      	movs	r1, #18
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f974 	bl	8009d66 <USBH_Get_DevDesc>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 80a8 	bne.w	8009bd6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009a8c:	e0a3      	b.n	8009bd6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009a8e:	2101      	movs	r1, #1
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fa14 	bl	8009ebe <USBH_SetAddress>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 809e 	bne.w	8009bda <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009a9e:	2002      	movs	r0, #2
 8009aa0:	f001 f9ed 	bl	800ae7e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2203      	movs	r2, #3
 8009ab0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7919      	ldrb	r1, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	9202      	str	r2, [sp, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	9201      	str	r2, [sp, #4]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2280      	movs	r2, #128	; 0x80
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fe91 	bl	800a7fc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	7959      	ldrb	r1, [r3, #5]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009aee:	b292      	uxth	r2, r2
 8009af0:	9202      	str	r2, [sp, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	9201      	str	r2, [sp, #4]
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4603      	mov	r3, r0
 8009afa:	2200      	movs	r2, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fe7d 	bl	800a7fc <USBH_OpenPipe>
    }
    break;
 8009b02:	e06a      	b.n	8009bda <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8009b04:	2109      	movs	r1, #9
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f955 	bl	8009db6 <USBH_Get_CfgDesc>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d165      	bne.n	8009bde <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2204      	movs	r2, #4
 8009b16:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009b18:	e061      	b.n	8009bde <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f947 	bl	8009db6 <USBH_Get_CfgDesc>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d159      	bne.n	8009be2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2205      	movs	r2, #5
 8009b32:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009b34:	e055      	b.n	8009be2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d010      	beq.n	8009b62 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009b4c:	23ff      	movs	r3, #255	; 0xff
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f955 	bl	8009dfe <USBH_Get_StringDesc>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d145      	bne.n	8009be6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2206      	movs	r2, #6
 8009b5e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009b60:	e041      	b.n	8009be6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2206      	movs	r2, #6
 8009b66:	705a      	strb	r2, [r3, #1]
    break;
 8009b68:	e03d      	b.n	8009be6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d010      	beq.n	8009b96 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009b80:	23ff      	movs	r3, #255	; 0xff
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f93b 	bl	8009dfe <USBH_Get_StringDesc>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d12d      	bne.n	8009bea <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2207      	movs	r2, #7
 8009b92:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009b94:	e029      	b.n	8009bea <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2207      	movs	r2, #7
 8009b9a:	705a      	strb	r2, [r3, #1]
    break;
 8009b9c:	e025      	b.n	8009bea <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00f      	beq.n	8009bc8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009bb4:	23ff      	movs	r3, #255	; 0xff
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f921 	bl	8009dfe <USBH_Get_StringDesc>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d115      	bne.n	8009bee <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009bc6:	e012      	b.n	8009bee <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	e00f      	b.n	8009bee <USBH_HandleEnum+0x226>

  default:
    break;
 8009bce:	bf00      	nop
 8009bd0:	e00e      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bd2:	bf00      	nop
 8009bd4:	e00c      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bd6:	bf00      	nop
 8009bd8:	e00a      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bda:	bf00      	nop
 8009bdc:	e008      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bde:	bf00      	nop
 8009be0:	e006      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009be2:	bf00      	nop
 8009be4:	e004      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <USBH_HandleEnum+0x228>
    break;
 8009bee:	bf00      	nop
  }
  return Status;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop

08009bfc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8009c0e:	bf00      	nop
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f804 	bl	8009c3e <USBH_HandleSof>
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b0b      	cmp	r3, #11
 8009c4e:	d10a      	bne.n	8009c66 <USBH_HandleSof+0x28>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
  }
}
 8009c66:	bf00      	nop
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009c7e:	bf00      	nop
}
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009c9a:	bf00      	nop
}
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10f      	bne.n	8009cf2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00e      	beq.n	8009d02 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cea:	2104      	movs	r1, #4
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	4798      	blx	r3
 8009cf0:	e007      	b.n	8009d02 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d102      	bne.n	8009d02 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 ff68 	bl	800abea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	791b      	ldrb	r3, [r3, #4]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fdb8 	bl	800a896 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	795b      	ldrb	r3, [r3, #5]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fdb2 	bl	800a896 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d4a:	2105      	movs	r1, #5
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 ff2f 	bl	800abb4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2203      	movs	r2, #3
 8009d5a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af02      	add	r7, sp, #8
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d84:	2100      	movs	r1, #0
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f864 	bl	8009e54 <USBH_GetDescriptor>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	b292      	uxth	r2, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	f000 f918 	bl	8009fdc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af02      	add	r7, sp, #8
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	331c      	adds	r3, #28
 8009dc6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009dc8:	887b      	ldrh	r3, [r7, #2]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f83d 	bl	8009e54 <USBH_GetDescriptor>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	72fb      	strb	r3, [r7, #11]
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d107      	bne.n	8009df4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009dea:	887a      	ldrh	r2, [r7, #2]
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f964 	bl	800a0bc <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009df4:	7afb      	ldrb	r3, [r7, #11]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b088      	sub	sp, #32
 8009e02:	af02      	add	r7, sp, #8
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	72fb      	strb	r3, [r7, #11]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e1a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009e22:	893b      	ldrh	r3, [r7, #8]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	460b      	mov	r3, r1
 8009e28:	2100      	movs	r1, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f812 	bl	8009e54 <USBH_GetDescriptor>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d107      	bne.n	8009e4a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e40:	893a      	ldrh	r2, [r7, #8]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fa37 	bl	800a2b8 <USBH_ParseStringDesc>
  }
  return status;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	607b      	str	r3, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	72fb      	strb	r3, [r7, #11]
 8009e62:	4613      	mov	r3, r2
 8009e64:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	789b      	ldrb	r3, [r3, #2]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d11c      	bne.n	8009ea8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
 8009e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2206      	movs	r2, #6
 8009e7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	893a      	ldrh	r2, [r7, #8]
 8009e84:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e86:	893b      	ldrh	r3, [r7, #8]
 8009e88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e90:	d104      	bne.n	8009e9c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f240 4209 	movw	r2, #1033	; 0x409
 8009e98:	829a      	strh	r2, [r3, #20]
 8009e9a:	e002      	b.n	8009ea2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8b3a      	ldrh	r2, [r7, #24]
 8009ea6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009ea8:	8b3b      	ldrh	r3, [r7, #24]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 fa50 	bl	800a354 <USBH_CtlReq>
 8009eb4:	4603      	mov	r3, r0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	789b      	ldrb	r3, [r3, #2]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d10f      	bne.n	8009ef2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2205      	movs	r2, #5
 8009edc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa2c 	bl	800a354 <USBH_CtlReq>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	789b      	ldrb	r3, [r3, #2]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d10e      	bne.n	8009f38 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2209      	movs	r2, #9
 8009f24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa09 	bl	800a354 <USBH_CtlReq>
 8009f42:	4603      	mov	r3, r0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	789b      	ldrb	r3, [r3, #2]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d10f      	bne.n	8009f80 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2203      	movs	r2, #3
 8009f6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f80:	2200      	movs	r2, #0
 8009f82:	2100      	movs	r1, #0
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f9e5 	bl	800a354 <USBH_CtlReq>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d10f      	bne.n	8009fc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9c1 	bl	800a354 <USBH_CtlReq>
 8009fd2:	4603      	mov	r3, r0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	781a      	ldrb	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	785a      	ldrb	r2, [r3, #1]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	b29a      	uxth	r2, r3
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3303      	adds	r3, #3
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4313      	orrs	r3, r2
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	791a      	ldrb	r2, [r3, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	795a      	ldrb	r2, [r3, #5]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	799a      	ldrb	r2, [r3, #6]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	79da      	ldrb	r2, [r3, #7]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d939      	bls.n	800a0b0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	3308      	adds	r3, #8
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b29a      	uxth	r2, r3
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	3309      	adds	r3, #9
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	021b      	lsls	r3, r3, #8
 800a04e:	b29b      	uxth	r3, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	330a      	adds	r3, #10
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	330b      	adds	r3, #11
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	4313      	orrs	r3, r2
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	330c      	adds	r3, #12
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	330d      	adds	r3, #13
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	b29b      	uxth	r3, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	7b9a      	ldrb	r2, [r3, #14]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	7bda      	ldrb	r2, [r3, #15]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	7c1a      	ldrb	r2, [r3, #16]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	7c5a      	ldrb	r2, [r3, #17]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	745a      	strb	r2, [r3, #17]
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08a      	sub	sp, #40	; 0x28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785a      	ldrb	r2, [r3, #1]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	3303      	adds	r3, #3
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	b29b      	uxth	r3, r3
 800a102:	4313      	orrs	r3, r2
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	791a      	ldrb	r2, [r3, #4]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	795a      	ldrb	r2, [r3, #5]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	799a      	ldrb	r2, [r3, #6]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	79da      	ldrb	r2, [r3, #7]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	7a1a      	ldrb	r2, [r3, #8]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a132:	88fb      	ldrh	r3, [r7, #6]
 800a134:	2b09      	cmp	r3, #9
 800a136:	d95f      	bls.n	800a1f8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a138:	2309      	movs	r3, #9
 800a13a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a140:	e051      	b.n	800a1e6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a142:	f107 0316 	add.w	r3, r7, #22
 800a146:	4619      	mov	r1, r3
 800a148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a14a:	f000 f8e8 	bl	800a31e <USBH_GetNextDesc>
 800a14e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	2b04      	cmp	r3, #4
 800a156:	d146      	bne.n	800a1e6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a15c:	221a      	movs	r2, #26
 800a15e:	fb02 f303 	mul.w	r3, r2, r3
 800a162:	3308      	adds	r3, #8
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	3302      	adds	r3, #2
 800a16a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800a16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a16e:	69f8      	ldr	r0, [r7, #28]
 800a170:	f000 f846 	bl	800a200 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a17e:	e022      	b.n	800a1c6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800a180:	f107 0316 	add.w	r3, r7, #22
 800a184:	4619      	mov	r1, r3
 800a186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a188:	f000 f8c9 	bl	800a31e <USBH_GetNextDesc>
 800a18c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	2b05      	cmp	r3, #5
 800a194:	d117      	bne.n	800a1c6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a19a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a19e:	3201      	adds	r2, #1
 800a1a0:	00d2      	lsls	r2, r2, #3
 800a1a2:	211a      	movs	r1, #26
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800a1b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1b6:	69b8      	ldr	r0, [r7, #24]
 800a1b8:	f000 f851 	bl	800a25e <USBH_ParseEPDesc>
            ep_ix++;
 800a1bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	791b      	ldrb	r3, [r3, #4]
 800a1ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d204      	bcs.n	800a1dc <USBH_ParseCfgDesc+0x120>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	885a      	ldrh	r2, [r3, #2]
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d8d1      	bhi.n	800a180 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a1dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d804      	bhi.n	800a1f8 <USBH_ParseCfgDesc+0x13c>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	885a      	ldrh	r2, [r3, #2]
 800a1f2:	8afb      	ldrh	r3, [r7, #22]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d8a4      	bhi.n	800a142 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3728      	adds	r7, #40	; 0x28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781a      	ldrb	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	785a      	ldrb	r2, [r3, #1]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	789a      	ldrb	r2, [r3, #2]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	78da      	ldrb	r2, [r3, #3]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	791a      	ldrb	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	795a      	ldrb	r2, [r3, #5]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	799a      	ldrb	r2, [r3, #6]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	79da      	ldrb	r2, [r3, #7]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	7a1a      	ldrb	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	721a      	strb	r2, [r3, #8]
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781a      	ldrb	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	785a      	ldrb	r2, [r3, #1]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	789a      	ldrb	r2, [r3, #2]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	78da      	ldrb	r2, [r3, #3]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	3304      	adds	r3, #4
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b29a      	uxth	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	3305      	adds	r3, #5
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	4313      	orrs	r3, r2
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	799a      	ldrb	r2, [r3, #6]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	719a      	strb	r2, [r3, #6]
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d120      	bne.n	800a312 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	1e9a      	subs	r2, r3, #2
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bf28      	it	cs
 800a2dc:	4613      	movcs	r3, r2
 800a2de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3302      	adds	r3, #2
 800a2e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	82fb      	strh	r3, [r7, #22]
 800a2ea:	e00b      	b.n	800a304 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a2ec:	8afb      	ldrh	r3, [r7, #22]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2fe:	8afb      	ldrh	r3, [r7, #22]
 800a300:	3302      	adds	r3, #2
 800a302:	82fb      	strh	r3, [r7, #22]
 800a304:	8afa      	ldrh	r2, [r7, #22]
 800a306:	8abb      	ldrh	r3, [r7, #20]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d3ef      	bcc.n	800a2ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
  }
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	881a      	ldrh	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	4413      	add	r3, r2
 800a334:	b29a      	uxth	r2, r3
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4413      	add	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800a346:	68fb      	ldr	r3, [r7, #12]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a362:	2301      	movs	r3, #1
 800a364:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	789b      	ldrb	r3, [r3, #2]
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d002      	beq.n	800a374 <USBH_CtlReq+0x20>
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d00f      	beq.n	800a392 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800a372:	e034      	b.n	800a3de <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	88fa      	ldrh	r2, [r7, #6]
 800a37e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2202      	movs	r2, #2
 800a38a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a38c:	2301      	movs	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
    break;
 800a390:	e025      	b.n	800a3de <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 f828 	bl	800a3e8 <USBH_HandleControl>
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d108      	bne.n	800a3b4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
    break;
 800a3b2:	e013      	b.n	800a3dc <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d108      	bne.n	800a3cc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3ca:	e007      	b.n	800a3dc <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d104      	bne.n	800a3dc <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	75fb      	strb	r3, [r7, #23]
    break;
 800a3dc:	bf00      	nop
  }
  return status;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7e1b      	ldrb	r3, [r3, #24]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	2b0a      	cmp	r3, #10
 800a400:	f200 814c 	bhi.w	800a69c <USBH_HandleControl+0x2b4>
 800a404:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <USBH_HandleControl+0x24>)
 800a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40a:	bf00      	nop
 800a40c:	0800a439 	.word	0x0800a439
 800a410:	0800a453 	.word	0x0800a453
 800a414:	0800a4bd 	.word	0x0800a4bd
 800a418:	0800a4e3 	.word	0x0800a4e3
 800a41c:	0800a51b 	.word	0x0800a51b
 800a420:	0800a547 	.word	0x0800a547
 800a424:	0800a599 	.word	0x0800a599
 800a428:	0800a5bb 	.word	0x0800a5bb
 800a42c:	0800a5f7 	.word	0x0800a5f7
 800a430:	0800a61f 	.word	0x0800a61f
 800a434:	0800a65d 	.word	0x0800a65d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f103 0110 	add.w	r1, r3, #16
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	795b      	ldrb	r3, [r3, #5]
 800a442:	461a      	mov	r2, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f939 	bl	800a6bc <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	761a      	strb	r2, [r3, #24]
    break;
 800a450:	e12f      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	795b      	ldrb	r3, [r3, #5]
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fcb3 	bl	800adc4 <USBH_LL_GetURBState>
 800a45e:	4603      	mov	r3, r0
 800a460:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d11e      	bne.n	800a4a6 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7c1b      	ldrb	r3, [r3, #16]
 800a46c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a470:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	8adb      	ldrh	r3, [r3, #22]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a47a:	7b7b      	ldrb	r3, [r7, #13]
 800a47c:	2b80      	cmp	r3, #128	; 0x80
 800a47e:	d103      	bne.n	800a488 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2203      	movs	r2, #3
 800a484:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a486:	e10b      	b.n	800a6a0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2205      	movs	r2, #5
 800a48c:	761a      	strb	r2, [r3, #24]
    break;
 800a48e:	e107      	b.n	800a6a0 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a490:	7b7b      	ldrb	r3, [r7, #13]
 800a492:	2b80      	cmp	r3, #128	; 0x80
 800a494:	d103      	bne.n	800a49e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2209      	movs	r2, #9
 800a49a:	761a      	strb	r2, [r3, #24]
    break;
 800a49c:	e100      	b.n	800a6a0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	761a      	strb	r2, [r3, #24]
    break;
 800a4a4:	e0fc      	b.n	800a6a0 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d003      	beq.n	800a4b4 <USBH_HandleControl+0xcc>
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	f040 80f6 	bne.w	800a6a0 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	220b      	movs	r2, #11
 800a4b8:	761a      	strb	r2, [r3, #24]
    break;
 800a4ba:	e0f1      	b.n	800a6a0 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6899      	ldr	r1, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	899a      	ldrh	r2, [r3, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	791b      	ldrb	r3, [r3, #4]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f930 	bl	800a73a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	761a      	strb	r2, [r3, #24]
    break;
 800a4e0:	e0e7      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	791b      	ldrb	r3, [r3, #4]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fc6b 	bl	800adc4 <USBH_LL_GetURBState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d102      	bne.n	800a4fe <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2209      	movs	r2, #9
 800a4fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	2b05      	cmp	r3, #5
 800a502:	d102      	bne.n	800a50a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a504:	2303      	movs	r3, #3
 800a506:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a508:	e0cc      	b.n	800a6a4 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	f040 80c9 	bne.w	800a6a4 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	220b      	movs	r2, #11
 800a516:	761a      	strb	r2, [r3, #24]
    break;
 800a518:	e0c4      	b.n	800a6a4 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6899      	ldr	r1, [r3, #8]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	899a      	ldrh	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	7958      	ldrb	r0, [r3, #5]
 800a526:	2301      	movs	r3, #1
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4603      	mov	r3, r0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f8df 	bl	800a6f0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a538:	b29a      	uxth	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2206      	movs	r2, #6
 800a542:	761a      	strb	r2, [r3, #24]
    break;
 800a544:	e0b5      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	795b      	ldrb	r3, [r3, #5]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc39 	bl	800adc4 <USBH_LL_GetURBState>
 800a552:	4603      	mov	r3, r0
 800a554:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d103      	bne.n	800a564 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2207      	movs	r2, #7
 800a560:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a562:	e0a1      	b.n	800a6a8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	2b05      	cmp	r3, #5
 800a568:	d105      	bne.n	800a576 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	220c      	movs	r2, #12
 800a56e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a570:	2303      	movs	r3, #3
 800a572:	73fb      	strb	r3, [r7, #15]
    break;
 800a574:	e098      	b.n	800a6a8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d103      	bne.n	800a584 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2205      	movs	r2, #5
 800a580:	761a      	strb	r2, [r3, #24]
    break;
 800a582:	e091      	b.n	800a6a8 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	2b04      	cmp	r3, #4
 800a588:	f040 808e 	bne.w	800a6a8 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	220b      	movs	r2, #11
 800a590:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a592:	2302      	movs	r3, #2
 800a594:	73fb      	strb	r3, [r7, #15]
    break;
 800a596:	e087      	b.n	800a6a8 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	791b      	ldrb	r3, [r3, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	2100      	movs	r1, #0
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f8ca 	bl	800a73a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	761a      	strb	r2, [r3, #24]

    break;
 800a5b8:	e07b      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	791b      	ldrb	r3, [r3, #4]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fbff 	bl	800adc4 <USBH_LL_GetURBState>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d105      	bne.n	800a5dc <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	220d      	movs	r2, #13
 800a5d4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a5da:	e067      	b.n	800a6ac <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d103      	bne.n	800a5ea <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	220b      	movs	r2, #11
 800a5e6:	761a      	strb	r2, [r3, #24]
    break;
 800a5e8:	e060      	b.n	800a6ac <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
 800a5ec:	2b05      	cmp	r3, #5
 800a5ee:	d15d      	bne.n	800a6ac <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f4:	e05a      	b.n	800a6ac <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	795a      	ldrb	r2, [r3, #5]
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	4613      	mov	r3, r2
 800a600:	2200      	movs	r2, #0
 800a602:	2100      	movs	r1, #0
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f873 	bl	800a6f0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a610:	b29a      	uxth	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	220a      	movs	r2, #10
 800a61a:	761a      	strb	r2, [r3, #24]
    break;
 800a61c:	e049      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	795b      	ldrb	r3, [r3, #5]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 fbcd 	bl	800adc4 <USBH_LL_GetURBState>
 800a62a:	4603      	mov	r3, r0
 800a62c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d105      	bne.n	800a640 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	220d      	movs	r2, #13
 800a63c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a63e:	e037      	b.n	800a6b0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d103      	bne.n	800a64e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2209      	movs	r2, #9
 800a64a:	761a      	strb	r2, [r3, #24]
    break;
 800a64c:	e030      	b.n	800a6b0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	2b04      	cmp	r3, #4
 800a652:	d12d      	bne.n	800a6b0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	220b      	movs	r2, #11
 800a658:	761a      	strb	r2, [r3, #24]
    break;
 800a65a:	e029      	b.n	800a6b0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7e5b      	ldrb	r3, [r3, #25]
 800a660:	3301      	adds	r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	765a      	strb	r2, [r3, #25]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7e5b      	ldrb	r3, [r3, #25]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d809      	bhi.n	800a684 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 faba 	bl	800abea <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a682:	e016      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a68a:	2106      	movs	r1, #6
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a696:	2302      	movs	r3, #2
 800a698:	73fb      	strb	r3, [r7, #15]
    break;
 800a69a:	e00a      	b.n	800a6b2 <USBH_HandleControl+0x2ca>

  default:
    break;
 800a69c:	bf00      	nop
 800a69e:	e008      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
    break;
 800a6a0:	bf00      	nop
 800a6a2:	e006      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
    break;
 800a6a4:	bf00      	nop
 800a6a6:	e004      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
    break;
 800a6a8:	bf00      	nop
 800a6aa:	e002      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
    break;
 800a6ac:	bf00      	nop
 800a6ae:	e000      	b.n	800a6b2 <USBH_HandleControl+0x2ca>
    break;
 800a6b0:	bf00      	nop
  }
  return status;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af04      	add	r7, sp, #16
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a6ca:	79f9      	ldrb	r1, [r7, #7]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	2200      	movs	r2, #0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fb3e 	bl	800ad62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af04      	add	r7, sp, #16
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	460b      	mov	r3, r1
 800a700:	80fb      	strh	r3, [r7, #6]
 800a702:	4613      	mov	r3, r2
 800a704:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a714:	7979      	ldrb	r1, [r7, #5]
 800a716:	7e3b      	ldrb	r3, [r7, #24]
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2301      	movs	r3, #1
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	2200      	movs	r2, #0
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fb19 	bl	800ad62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af04      	add	r7, sp, #16
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	4611      	mov	r1, r2
 800a746:	461a      	mov	r2, r3
 800a748:	460b      	mov	r3, r1
 800a74a:	80fb      	strh	r3, [r7, #6]
 800a74c:	4613      	mov	r3, r2
 800a74e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a750:	7979      	ldrb	r1, [r7, #5]
 800a752:	2300      	movs	r3, #0
 800a754:	9303      	str	r3, [sp, #12]
 800a756:	88fb      	ldrh	r3, [r7, #6]
 800a758:	9302      	str	r3, [sp, #8]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	2301      	movs	r3, #1
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	2300      	movs	r3, #0
 800a764:	2201      	movs	r2, #1
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 fafb 	bl	800ad62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a76c:	2300      	movs	r3, #0

}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b088      	sub	sp, #32
 800a77a:	af04      	add	r7, sp, #16
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	4611      	mov	r1, r2
 800a782:	461a      	mov	r2, r3
 800a784:	460b      	mov	r3, r1
 800a786:	80fb      	strh	r3, [r7, #6]
 800a788:	4613      	mov	r3, r2
 800a78a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a79a:	7979      	ldrb	r1, [r7, #5]
 800a79c:	7e3b      	ldrb	r3, [r7, #24]
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	9302      	str	r3, [sp, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fad6 	bl	800ad62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	80fb      	strh	r3, [r7, #6]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a7d6:	7979      	ldrb	r1, [r7, #5]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 fab8 	bl	800ad62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af04      	add	r7, sp, #16
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	4608      	mov	r0, r1
 800a806:	4611      	mov	r1, r2
 800a808:	461a      	mov	r2, r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	70fb      	strb	r3, [r7, #3]
 800a80e:	460b      	mov	r3, r1
 800a810:	70bb      	strb	r3, [r7, #2]
 800a812:	4613      	mov	r3, r2
 800a814:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a816:	7878      	ldrb	r0, [r7, #1]
 800a818:	78ba      	ldrb	r2, [r7, #2]
 800a81a:	78f9      	ldrb	r1, [r7, #3]
 800a81c:	8b3b      	ldrh	r3, [r7, #24]
 800a81e:	9302      	str	r3, [sp, #8]
 800a820:	7d3b      	ldrb	r3, [r7, #20]
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	7c3b      	ldrb	r3, [r7, #16]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4603      	mov	r3, r0
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fa4b 	bl	800acc6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800a830:	2300      	movs	r3, #0

}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800a846:	78fb      	ldrb	r3, [r7, #3]
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa6a 	bl	800ad24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a850:	2300      	movs	r3, #0

}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f831 	bl	800a8ce <USBH_GetFreePipe>
 800a86c:	4603      	mov	r3, r0
 800a86e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a870:	89fb      	ldrh	r3, [r7, #14]
 800a872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a876:	4293      	cmp	r3, r2
 800a878:	d007      	beq.n	800a88a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	89fa      	ldrh	r2, [r7, #14]
 800a87e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32e0      	adds	r2, #224	; 0xe0
 800a886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800a88a:	89fb      	ldrh	r3, [r7, #14]
 800a88c:	b2db      	uxtb	r3, r3
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	2b0a      	cmp	r3, #10
 800a8a6:	d80b      	bhi.n	800a8c0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	32e0      	adds	r2, #224	; 0xe0
 800a8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b2:	78fa      	ldrb	r2, [r7, #3]
 800a8b4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	32e0      	adds	r2, #224	; 0xe0
 800a8bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
 800a8de:	e00e      	b.n	800a8fe <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a8e0:	7bfa      	ldrb	r2, [r7, #15]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	32e0      	adds	r2, #224	; 0xe0
 800a8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d102      	bne.n	800a8f8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	e007      	b.n	800a908 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	73fb      	strb	r3, [r7, #15]
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	2b0a      	cmp	r3, #10
 800a902:	d9ed      	bls.n	800a8e0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a904:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a918:	2201      	movs	r2, #1
 800a91a:	490e      	ldr	r1, [pc, #56]	; (800a954 <MX_USB_HOST_Init+0x40>)
 800a91c:	480e      	ldr	r0, [pc, #56]	; (800a958 <MX_USB_HOST_Init+0x44>)
 800a91e:	f7fe fdbb 	bl	8009498 <USBH_Init>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a928:	f7f6 fb9e 	bl	8001068 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a92c:	490b      	ldr	r1, [pc, #44]	; (800a95c <MX_USB_HOST_Init+0x48>)
 800a92e:	480a      	ldr	r0, [pc, #40]	; (800a958 <MX_USB_HOST_Init+0x44>)
 800a930:	f7fe fe25 	bl	800957e <USBH_RegisterClass>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a93a:	f7f6 fb95 	bl	8001068 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a93e:	4806      	ldr	r0, [pc, #24]	; (800a958 <MX_USB_HOST_Init+0x44>)
 800a940:	f7fe feaa 	bl	8009698 <USBH_Start>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a94a:	f7f6 fb8d 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a94e:	bf00      	nop
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	0800a975 	.word	0x0800a975
 800a958:	20000490 	.word	0x20000490
 800a95c:	2000000c 	.word	0x2000000c

0800a960 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a964:	4802      	ldr	r0, [pc, #8]	; (800a970 <MX_USB_HOST_Process+0x10>)
 800a966:	f7fe fea7 	bl	80096b8 <USBH_Process>
}
 800a96a:	bf00      	nop
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20000490 	.word	0x20000490

0800a974 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	3b01      	subs	r3, #1
 800a984:	2b04      	cmp	r3, #4
 800a986:	d819      	bhi.n	800a9bc <USBH_UserProcess+0x48>
 800a988:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <USBH_UserProcess+0x1c>)
 800a98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98e:	bf00      	nop
 800a990:	0800a9bd 	.word	0x0800a9bd
 800a994:	0800a9ad 	.word	0x0800a9ad
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9b5 	.word	0x0800a9b5
 800a9a0:	0800a9a5 	.word	0x0800a9a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <USBH_UserProcess+0x58>)
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	701a      	strb	r2, [r3, #0]
  break;
 800a9aa:	e008      	b.n	800a9be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a9ac:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <USBH_UserProcess+0x58>)
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	701a      	strb	r2, [r3, #0]
  break;
 800a9b2:	e004      	b.n	800a9be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <USBH_UserProcess+0x58>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
  break;
 800a9ba:	e000      	b.n	800a9be <USBH_UserProcess+0x4a>

  default:
  break;
 800a9bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	200000f8 	.word	0x200000f8

0800a9d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08a      	sub	sp, #40	; 0x28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9d8:	f107 0314 	add.w	r3, r7, #20
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	609a      	str	r2, [r3, #8]
 800a9e4:	60da      	str	r2, [r3, #12]
 800a9e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9f0:	d147      	bne.n	800aa82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	4b25      	ldr	r3, [pc, #148]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	4a24      	ldr	r2, [pc, #144]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800a9fc:	f043 0301 	orr.w	r3, r3, #1
 800aa00:	6313      	str	r3, [r2, #48]	; 0x30
 800aa02:	4b22      	ldr	r3, [pc, #136]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800aa0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa1c:	f107 0314 	add.w	r3, r7, #20
 800aa20:	4619      	mov	r1, r3
 800aa22:	481b      	ldr	r0, [pc, #108]	; (800aa90 <HAL_HCD_MspInit+0xc0>)
 800aa24:	f7f7 ffa6 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800aa28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aa2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa36:	2303      	movs	r3, #3
 800aa38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa3a:	230a      	movs	r3, #10
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa3e:	f107 0314 	add.w	r3, r7, #20
 800aa42:	4619      	mov	r1, r3
 800aa44:	4812      	ldr	r0, [pc, #72]	; (800aa90 <HAL_HCD_MspInit+0xc0>)
 800aa46:	f7f7 ff95 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa4a:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	4a0f      	ldr	r2, [pc, #60]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa54:	6353      	str	r3, [r2, #52]	; 0x34
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	4a0b      	ldr	r2, [pc, #44]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa64:	6453      	str	r3, [r2, #68]	; 0x44
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <HAL_HCD_MspInit+0xbc>)
 800aa68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	2043      	movs	r0, #67	; 0x43
 800aa78:	f7f7 fca9 	bl	80023ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa7c:	2043      	movs	r0, #67	; 0x43
 800aa7e:	f7f7 fcc2 	bl	8002406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa82:	bf00      	nop
 800aa84:	3728      	adds	r7, #40	; 0x28
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	40023800 	.word	0x40023800
 800aa90:	40020000 	.word	0x40020000

0800aa94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff f8b9 	bl	8009c1a <USBH_LL_IncTimer>
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff f8fe 	bl	8009cc0 <USBH_LL_Connect>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff f916 	bl	8009d0c <USBH_LL_Disconnect>
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff f8ab 	bl	8009c6e <USBH_LL_PortEnabled>
} 
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff f8ab 	bl	8009c8a <USBH_LL_PortDisabled>
} 
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d12a      	bne.n	800aba4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ab4e:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a15      	ldr	r2, [pc, #84]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab5e:	4b14      	ldr	r3, [pc, #80]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ab66:	4b12      	ldr	r3, [pc, #72]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab68:	220c      	movs	r2, #12
 800ab6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab72:	4b0f      	ldr	r3, [pc, #60]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ab78:	4b0d      	ldr	r3, [pc, #52]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab84:	480a      	ldr	r0, [pc, #40]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab86:	f7f8 f8bb 	bl	8002d00 <HAL_HCD_Init>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab90:	f7f6 fa6a 	bl	8001068 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab94:	4806      	ldr	r0, [pc, #24]	; (800abb0 <USBH_LL_Init+0x74>)
 800ab96:	f7f8 fcb7 	bl	8003508 <HAL_HCD_GetCurrentFrame>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff f82c 	bl	8009bfc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	2000085c 	.word	0x2000085c

0800abb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f8 fc24 	bl	8003418 <HAL_HCD_Start>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 f95c 	bl	800ae94 <USBH_Get_USB_Status>
 800abdc:	4603      	mov	r3, r0
 800abde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f8 fc2c 	bl	800345e <HAL_HCD_Stop>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f941 	bl	800ae94 <USBH_Get_USB_Status>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f8 fc76 	bl	8003524 <HAL_HCD_GetCurrentSpeed>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d007      	beq.n	800ac4e <USBH_LL_GetSpeed+0x2e>
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d302      	bcc.n	800ac48 <USBH_LL_GetSpeed+0x28>
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d006      	beq.n	800ac54 <USBH_LL_GetSpeed+0x34>
 800ac46:	e008      	b.n	800ac5a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac4c:	e008      	b.n	800ac60 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	73fb      	strb	r3, [r7, #15]
    break;
 800ac52:	e005      	b.n	800ac60 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ac54:	2302      	movs	r3, #2
 800ac56:	73fb      	strb	r3, [r7, #15]
    break;
 800ac58:	e002      	b.n	800ac60 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5e:	bf00      	nop
  }
  return  speed;
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f8 fc09 	bl	8003498 <HAL_HCD_ResetPort>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 f901 	bl	800ae94 <USBH_Get_USB_Status>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800acb2:	78fa      	ldrb	r2, [r7, #3]
 800acb4:	4611      	mov	r1, r2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f8 fc11 	bl	80034de <HAL_HCD_HC_GetXferCount>
 800acbc:	4603      	mov	r3, r0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800acc6:	b590      	push	{r4, r7, lr}
 800acc8:	b089      	sub	sp, #36	; 0x24
 800acca:	af04      	add	r7, sp, #16
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	4608      	mov	r0, r1
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	70fb      	strb	r3, [r7, #3]
 800acd8:	460b      	mov	r3, r1
 800acda:	70bb      	strb	r3, [r7, #2]
 800acdc:	4613      	mov	r3, r2
 800acde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800acee:	787c      	ldrb	r4, [r7, #1]
 800acf0:	78ba      	ldrb	r2, [r7, #2]
 800acf2:	78f9      	ldrb	r1, [r7, #3]
 800acf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	4623      	mov	r3, r4
 800ad06:	f7f8 f85d 	bl	8002dc4 <HAL_HCD_HC_Init>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 f8bf 	bl	800ae94 <USBH_Get_USB_Status>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd90      	pop	{r4, r7, pc}

0800ad24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7f8 f8d6 	bl	8002ef4 <HAL_HCD_HC_Halt>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 f8a0 	bl	800ae94 <USBH_Get_USB_Status>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ad62:	b590      	push	{r4, r7, lr}
 800ad64:	b089      	sub	sp, #36	; 0x24
 800ad66:	af04      	add	r7, sp, #16
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4603      	mov	r3, r0
 800ad72:	70fb      	strb	r3, [r7, #3]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70bb      	strb	r3, [r7, #2]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ad8a:	787c      	ldrb	r4, [r7, #1]
 800ad8c:	78ba      	ldrb	r2, [r7, #2]
 800ad8e:	78f9      	ldrb	r1, [r7, #3]
 800ad90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad98:	9302      	str	r3, [sp, #8]
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	4623      	mov	r3, r4
 800ada6:	f7f8 f8c9 	bl	8002f3c <HAL_HCD_HC_SubmitRequest>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f86f 	bl	800ae94 <USBH_Get_USB_Status>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800adba:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7f8 fb6a 	bl	80034b4 <HAL_HCD_HC_GetURBState>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d103      	bne.n	800ae08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f872 	bl	800aeec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae08:	20c8      	movs	r0, #200	; 0xc8
 800ae0a:	f7f6 ff71 	bl	8001cf0 <HAL_Delay>
  return USBH_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
 800ae24:	4613      	mov	r3, r2
 800ae26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ae30:	78fa      	ldrb	r2, [r7, #3]
 800ae32:	68f9      	ldr	r1, [r7, #12]
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	440b      	add	r3, r1
 800ae3e:	333b      	adds	r3, #59	; 0x3b
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ae46:	78fa      	ldrb	r2, [r7, #3]
 800ae48:	68f9      	ldr	r1, [r7, #12]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	440b      	add	r3, r1
 800ae54:	3350      	adds	r3, #80	; 0x50
 800ae56:	78ba      	ldrb	r2, [r7, #2]
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	e009      	b.n	800ae70 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	440b      	add	r3, r1
 800ae6a:	3351      	adds	r3, #81	; 0x51
 800ae6c:	78ba      	ldrb	r2, [r7, #2]
 800ae6e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7f6 ff32 	bl	8001cf0 <HAL_Delay>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d817      	bhi.n	800aed8 <USBH_Get_USB_Status+0x44>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <USBH_Get_USB_Status+0x1c>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800aec7 	.word	0x0800aec7
 800aeb8:	0800aecd 	.word	0x0800aecd
 800aebc:	0800aed3 	.word	0x0800aed3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
    break;
 800aec4:	e00b      	b.n	800aede <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aec6:	2302      	movs	r3, #2
 800aec8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeca:	e008      	b.n	800aede <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aecc:	2301      	movs	r3, #1
 800aece:	73fb      	strb	r3, [r7, #15]
    break;
 800aed0:	e005      	b.n	800aede <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aed2:	2302      	movs	r3, #2
 800aed4:	73fb      	strb	r3, [r7, #15]
    break;
 800aed6:	e002      	b.n	800aede <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aed8:	2302      	movs	r3, #2
 800aeda:	73fb      	strb	r3, [r7, #15]
    break;
 800aedc:	bf00      	nop
  }
  return usb_status;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800af00:	2301      	movs	r3, #1
 800af02:	73fb      	strb	r3, [r7, #15]
 800af04:	e001      	b.n	800af0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	461a      	mov	r2, r3
 800af0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af12:	4803      	ldr	r0, [pc, #12]	; (800af20 <MX_DriverVbusFS+0x34>)
 800af14:	f7f7 fec0 	bl	8002c98 <HAL_GPIO_WritePin>
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	40021800 	.word	0x40021800

0800af24 <__errno>:
 800af24:	4b01      	ldr	r3, [pc, #4]	; (800af2c <__errno+0x8>)
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	2000002c 	.word	0x2000002c

0800af30 <__libc_init_array>:
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	4e0d      	ldr	r6, [pc, #52]	; (800af68 <__libc_init_array+0x38>)
 800af34:	4c0d      	ldr	r4, [pc, #52]	; (800af6c <__libc_init_array+0x3c>)
 800af36:	1ba4      	subs	r4, r4, r6
 800af38:	10a4      	asrs	r4, r4, #2
 800af3a:	2500      	movs	r5, #0
 800af3c:	42a5      	cmp	r5, r4
 800af3e:	d109      	bne.n	800af54 <__libc_init_array+0x24>
 800af40:	4e0b      	ldr	r6, [pc, #44]	; (800af70 <__libc_init_array+0x40>)
 800af42:	4c0c      	ldr	r4, [pc, #48]	; (800af74 <__libc_init_array+0x44>)
 800af44:	f000 f8ea 	bl	800b11c <_init>
 800af48:	1ba4      	subs	r4, r4, r6
 800af4a:	10a4      	asrs	r4, r4, #2
 800af4c:	2500      	movs	r5, #0
 800af4e:	42a5      	cmp	r5, r4
 800af50:	d105      	bne.n	800af5e <__libc_init_array+0x2e>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af58:	4798      	blx	r3
 800af5a:	3501      	adds	r5, #1
 800af5c:	e7ee      	b.n	800af3c <__libc_init_array+0xc>
 800af5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af62:	4798      	blx	r3
 800af64:	3501      	adds	r5, #1
 800af66:	e7f2      	b.n	800af4e <__libc_init_array+0x1e>
 800af68:	0800b158 	.word	0x0800b158
 800af6c:	0800b158 	.word	0x0800b158
 800af70:	0800b158 	.word	0x0800b158
 800af74:	0800b15c 	.word	0x0800b15c

0800af78 <malloc>:
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <malloc+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f000 b861 	b.w	800b044 <_malloc_r>
 800af82:	bf00      	nop
 800af84:	2000002c 	.word	0x2000002c

0800af88 <free>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <free+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f000 b80b 	b.w	800afa8 <_free_r>
 800af92:	bf00      	nop
 800af94:	2000002c 	.word	0x2000002c

0800af98 <memset>:
 800af98:	4402      	add	r2, r0
 800af9a:	4603      	mov	r3, r0
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d100      	bne.n	800afa2 <memset+0xa>
 800afa0:	4770      	bx	lr
 800afa2:	f803 1b01 	strb.w	r1, [r3], #1
 800afa6:	e7f9      	b.n	800af9c <memset+0x4>

0800afa8 <_free_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4605      	mov	r5, r0
 800afac:	2900      	cmp	r1, #0
 800afae:	d045      	beq.n	800b03c <_free_r+0x94>
 800afb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb4:	1f0c      	subs	r4, r1, #4
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	bfb8      	it	lt
 800afba:	18e4      	addlt	r4, r4, r3
 800afbc:	f000 f8ac 	bl	800b118 <__malloc_lock>
 800afc0:	4a1f      	ldr	r2, [pc, #124]	; (800b040 <_free_r+0x98>)
 800afc2:	6813      	ldr	r3, [r2, #0]
 800afc4:	4610      	mov	r0, r2
 800afc6:	b933      	cbnz	r3, 800afd6 <_free_r+0x2e>
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6014      	str	r4, [r2, #0]
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd2:	f000 b8a2 	b.w	800b11a <__malloc_unlock>
 800afd6:	42a3      	cmp	r3, r4
 800afd8:	d90c      	bls.n	800aff4 <_free_r+0x4c>
 800afda:	6821      	ldr	r1, [r4, #0]
 800afdc:	1862      	adds	r2, r4, r1
 800afde:	4293      	cmp	r3, r2
 800afe0:	bf04      	itt	eq
 800afe2:	681a      	ldreq	r2, [r3, #0]
 800afe4:	685b      	ldreq	r3, [r3, #4]
 800afe6:	6063      	str	r3, [r4, #4]
 800afe8:	bf04      	itt	eq
 800afea:	1852      	addeq	r2, r2, r1
 800afec:	6022      	streq	r2, [r4, #0]
 800afee:	6004      	str	r4, [r0, #0]
 800aff0:	e7ec      	b.n	800afcc <_free_r+0x24>
 800aff2:	4613      	mov	r3, r2
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	b10a      	cbz	r2, 800affc <_free_r+0x54>
 800aff8:	42a2      	cmp	r2, r4
 800affa:	d9fa      	bls.n	800aff2 <_free_r+0x4a>
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	1858      	adds	r0, r3, r1
 800b000:	42a0      	cmp	r0, r4
 800b002:	d10b      	bne.n	800b01c <_free_r+0x74>
 800b004:	6820      	ldr	r0, [r4, #0]
 800b006:	4401      	add	r1, r0
 800b008:	1858      	adds	r0, r3, r1
 800b00a:	4282      	cmp	r2, r0
 800b00c:	6019      	str	r1, [r3, #0]
 800b00e:	d1dd      	bne.n	800afcc <_free_r+0x24>
 800b010:	6810      	ldr	r0, [r2, #0]
 800b012:	6852      	ldr	r2, [r2, #4]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	4401      	add	r1, r0
 800b018:	6019      	str	r1, [r3, #0]
 800b01a:	e7d7      	b.n	800afcc <_free_r+0x24>
 800b01c:	d902      	bls.n	800b024 <_free_r+0x7c>
 800b01e:	230c      	movs	r3, #12
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	e7d3      	b.n	800afcc <_free_r+0x24>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	1821      	adds	r1, r4, r0
 800b028:	428a      	cmp	r2, r1
 800b02a:	bf04      	itt	eq
 800b02c:	6811      	ldreq	r1, [r2, #0]
 800b02e:	6852      	ldreq	r2, [r2, #4]
 800b030:	6062      	str	r2, [r4, #4]
 800b032:	bf04      	itt	eq
 800b034:	1809      	addeq	r1, r1, r0
 800b036:	6021      	streq	r1, [r4, #0]
 800b038:	605c      	str	r4, [r3, #4]
 800b03a:	e7c7      	b.n	800afcc <_free_r+0x24>
 800b03c:	bd38      	pop	{r3, r4, r5, pc}
 800b03e:	bf00      	nop
 800b040:	200000fc 	.word	0x200000fc

0800b044 <_malloc_r>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	1ccd      	adds	r5, r1, #3
 800b048:	f025 0503 	bic.w	r5, r5, #3
 800b04c:	3508      	adds	r5, #8
 800b04e:	2d0c      	cmp	r5, #12
 800b050:	bf38      	it	cc
 800b052:	250c      	movcc	r5, #12
 800b054:	2d00      	cmp	r5, #0
 800b056:	4606      	mov	r6, r0
 800b058:	db01      	blt.n	800b05e <_malloc_r+0x1a>
 800b05a:	42a9      	cmp	r1, r5
 800b05c:	d903      	bls.n	800b066 <_malloc_r+0x22>
 800b05e:	230c      	movs	r3, #12
 800b060:	6033      	str	r3, [r6, #0]
 800b062:	2000      	movs	r0, #0
 800b064:	bd70      	pop	{r4, r5, r6, pc}
 800b066:	f000 f857 	bl	800b118 <__malloc_lock>
 800b06a:	4a21      	ldr	r2, [pc, #132]	; (800b0f0 <_malloc_r+0xac>)
 800b06c:	6814      	ldr	r4, [r2, #0]
 800b06e:	4621      	mov	r1, r4
 800b070:	b991      	cbnz	r1, 800b098 <_malloc_r+0x54>
 800b072:	4c20      	ldr	r4, [pc, #128]	; (800b0f4 <_malloc_r+0xb0>)
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	b91b      	cbnz	r3, 800b080 <_malloc_r+0x3c>
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 f83d 	bl	800b0f8 <_sbrk_r>
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	4629      	mov	r1, r5
 800b082:	4630      	mov	r0, r6
 800b084:	f000 f838 	bl	800b0f8 <_sbrk_r>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d124      	bne.n	800b0d6 <_malloc_r+0x92>
 800b08c:	230c      	movs	r3, #12
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	4630      	mov	r0, r6
 800b092:	f000 f842 	bl	800b11a <__malloc_unlock>
 800b096:	e7e4      	b.n	800b062 <_malloc_r+0x1e>
 800b098:	680b      	ldr	r3, [r1, #0]
 800b09a:	1b5b      	subs	r3, r3, r5
 800b09c:	d418      	bmi.n	800b0d0 <_malloc_r+0x8c>
 800b09e:	2b0b      	cmp	r3, #11
 800b0a0:	d90f      	bls.n	800b0c2 <_malloc_r+0x7e>
 800b0a2:	600b      	str	r3, [r1, #0]
 800b0a4:	50cd      	str	r5, [r1, r3]
 800b0a6:	18cc      	adds	r4, r1, r3
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f836 	bl	800b11a <__malloc_unlock>
 800b0ae:	f104 000b 	add.w	r0, r4, #11
 800b0b2:	1d23      	adds	r3, r4, #4
 800b0b4:	f020 0007 	bic.w	r0, r0, #7
 800b0b8:	1ac3      	subs	r3, r0, r3
 800b0ba:	d0d3      	beq.n	800b064 <_malloc_r+0x20>
 800b0bc:	425a      	negs	r2, r3
 800b0be:	50e2      	str	r2, [r4, r3]
 800b0c0:	e7d0      	b.n	800b064 <_malloc_r+0x20>
 800b0c2:	428c      	cmp	r4, r1
 800b0c4:	684b      	ldr	r3, [r1, #4]
 800b0c6:	bf16      	itet	ne
 800b0c8:	6063      	strne	r3, [r4, #4]
 800b0ca:	6013      	streq	r3, [r2, #0]
 800b0cc:	460c      	movne	r4, r1
 800b0ce:	e7eb      	b.n	800b0a8 <_malloc_r+0x64>
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	6849      	ldr	r1, [r1, #4]
 800b0d4:	e7cc      	b.n	800b070 <_malloc_r+0x2c>
 800b0d6:	1cc4      	adds	r4, r0, #3
 800b0d8:	f024 0403 	bic.w	r4, r4, #3
 800b0dc:	42a0      	cmp	r0, r4
 800b0de:	d005      	beq.n	800b0ec <_malloc_r+0xa8>
 800b0e0:	1a21      	subs	r1, r4, r0
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f000 f808 	bl	800b0f8 <_sbrk_r>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d0cf      	beq.n	800b08c <_malloc_r+0x48>
 800b0ec:	6025      	str	r5, [r4, #0]
 800b0ee:	e7db      	b.n	800b0a8 <_malloc_r+0x64>
 800b0f0:	200000fc 	.word	0x200000fc
 800b0f4:	20000100 	.word	0x20000100

0800b0f8 <_sbrk_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4c06      	ldr	r4, [pc, #24]	; (800b114 <_sbrk_r+0x1c>)
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4605      	mov	r5, r0
 800b100:	4608      	mov	r0, r1
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	f7f6 fd16 	bl	8001b34 <_sbrk>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_sbrk_r+0x1a>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_sbrk_r+0x1a>
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	20000b20 	.word	0x20000b20

0800b118 <__malloc_lock>:
 800b118:	4770      	bx	lr

0800b11a <__malloc_unlock>:
 800b11a:	4770      	bx	lr

0800b11c <_init>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr

0800b128 <_fini>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr
