
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ffc  08002ffc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003074  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003074  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001675  00000000  00000000  00028381  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  000299f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020bb0  00000000  00000000  0002a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e76  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8e45  00000000  00000000  00052156  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011af9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e84  00000000  00000000  0011b018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002f88 	.word	0x08002f88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08002f88 	.word	0x08002f88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 faa5 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f83d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f917 	bl	8000810 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005e2:	f000 f897 	bl	8000714 <MX_ADC1_Init>
  MX_USART2_Init();
 80005e6:	f000 f8e7 	bl	80007b8 <MX_USART2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0x78>)
 80005f2:	f001 f94d 	bl	8001890 <HAL_GPIO_WritePin>

    // Get ADC value
    HAL_ADC_Start(&hadc1);
 80005f6:	4815      	ldr	r0, [pc, #84]	; (800064c <main+0x7c>)
 80005f8:	f000 fb6c 	bl	8000cd4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0x7c>)
 8000602:	f000 fc0d 	bl	8000e20 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0x7c>)
 8000608:	f000 fc8e 	bl	8000f28 <HAL_ADC_GetValue>
 800060c:	4603      	mov	r3, r0
 800060e:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <main+0x78>)
 8000618:	f001 f93a 	bl	8001890 <HAL_GPIO_WritePin>

    // Convert to string and print
    sprintf(msg, "%hu\r\n", raw);
 800061c:	89fa      	ldrh	r2, [r7, #14]
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	490b      	ldr	r1, [pc, #44]	; (8000650 <main+0x80>)
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f8aa 	bl	800277c <siprintf>
    HAL_USART_Transmit(&husart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdf8 	bl	8000220 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <main+0x84>)
 800063c:	f001 fd91 	bl	8002162 <HAL_USART_Transmit>

    // Pretend we have to do something else for a while
    HAL_Delay(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fae1 	bl	8000c08 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000646:	e7d0      	b.n	80005ea <main+0x1a>
 8000648:	40020000 	.word	0x40020000
 800064c:	20000098 	.word	0x20000098
 8000650:	08002fa0 	.word	0x08002fa0
 8000654:	200000e0 	.word	0x200000e0

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 f880 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xb4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xb4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xb4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <SystemClock_Config+0xb8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SystemClock_Config+0xb8>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <SystemClock_Config+0xb8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fac7 	bl	8001c5c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d4:	f000 f8d0 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f8e6 	bl	80018c4 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fe:	f000 f8bb 	bl	8000878 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0x98>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x9c>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_ADC1_Init+0x98>)
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xa0>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ADC1_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_ADC1_Init+0x98>)
 8000774:	f000 fa6a 	bl	8000c4c <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f87b 	bl	8000878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000782:	2305      	movs	r3, #5
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC1_Init+0x98>)
 8000794:	f000 fbd6 	bl	8000f44 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 f86b 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000098 	.word	0x20000098
 80007b0:	40012000 	.word	0x40012000
 80007b4:	0f000001 	.word	0x0f000001

080007b8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USART2_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_USART2_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_Init+0x50>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_USART2_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_USART2_Init+0x50>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_USART2_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_USART2_Init+0x50>)
 80007f6:	f001 fc73 	bl	80020e0 <HAL_USART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 f83a 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e0 	.word	0x200000e0
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_GPIO_Init+0x60>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	4a10      	ldr	r2, [pc, #64]	; (8000870 <MX_GPIO_Init+0x60>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6313      	str	r3, [r2, #48]	; 0x30
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_GPIO_Init+0x60>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <MX_GPIO_Init+0x64>)
 8000848:	f001 f822 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0x64>)
 8000864:	f000 fe82 	bl	800156c <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_ADC_MspInit+0x7c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d127      	bne.n	800094a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_ADC_MspInit+0x80>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <HAL_ADC_MspInit+0x80>)
 8000904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_ADC_MspInit+0x80>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_ADC_MspInit+0x80>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_ADC_MspInit+0x80>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_ADC_MspInit+0x80>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN0
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000932:	2321      	movs	r3, #33	; 0x21
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_ADC_MspInit+0x84>)
 8000946:	f000 fe11 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40012000 	.word	0x40012000
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_USART_MspInit+0x84>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12b      	bne.n	80009da <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_USART_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_USART_MspInit+0x88>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_USART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_USART_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_USART_MspInit+0x88>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_USART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80009ba:	231c      	movs	r3, #28
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_USART_MspInit+0x8c>)
 80009d6:	f000 fdc9 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f8c0 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x16>
		heap_end = &end;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <_sbrk+0x50>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <_sbrk+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_sbrk+0x50>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <_sbrk+0x50>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	466a      	mov	r2, sp
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d907      	bls.n	8000a86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a76:	f001 fe4f 	bl	8002718 <__errno>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	e006      	b.n	8000a94 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <_sbrk+0x50>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <_sbrk+0x50>)
 8000a90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	20000130 	.word	0x20000130

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <SystemInit+0x28>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <SystemInit+0x28>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SystemInit+0x28>)
 8000aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000abe:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ad6:	e003      	b.n	8000ae0 <LoopCopyDataInit>

08000ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ade:	3104      	adds	r1, #4

08000ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae8:	d3f6      	bcc.n	8000ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000aec:	e002      	b.n	8000af4 <LoopFillZerobss>

08000aee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af0:	f842 3b04 	str.w	r3, [r2], #4

08000af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af8:	d3f9      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ffd3 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fe11 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd65 	bl	80005d0 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000b0c:	08003004 	.word	0x08003004
  ldr  r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b14:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b18:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b1c:	2000012c 	.word	0x2000012c

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 fcd9 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe96 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fce3 	bl	8001552 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 fcb9 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000124 	.word	0x20000124

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000124 	.word	0x20000124

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_Delay+0x40>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e033      	b.n	8000cca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe34 	bl	80008d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d118      	bne.n	8000cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c92:	f023 0302 	bic.w	r3, r3, #2
 8000c96:	f043 0202 	orr.w	r2, r3, #2
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 fa82 	bl	80011a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f023 0303 	bic.w	r3, r3, #3
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cba:	e001      	b.n	8000cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Start+0x1a>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e08a      	b.n	8000e04 <HAL_ADC_Start+0x130>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d018      	beq.n	8000d36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0201 	orr.w	r2, r2, #1
 8000d12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <HAL_ADC_Start+0x13c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <HAL_ADC_Start+0x140>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9a      	lsrs	r2, r3, #18
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d28:	e002      	b.n	8000d30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f9      	bne.n	8000d2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d15e      	bne.n	8000e02 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d82:	d106      	bne.n	8000d92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	f023 0206 	bic.w	r2, r3, #6
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	645a      	str	r2, [r3, #68]	; 0x44
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_ADC_Start+0x144>)
 8000da2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000dac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 031f 	and.w	r3, r3, #31
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10f      	bne.n	8000dda <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d11c      	bne.n	8000e02 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	e013      	b.n	8000e02 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_ADC_Start+0x148>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d10e      	bne.n	8000e02 <HAL_ADC_Start+0x12e>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e00:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000

08000e20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d113      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d10b      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f043 0220 	orr.w	r2, r3, #32
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e05c      	b.n	8000f20 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e66:	f7ff fec3 	bl	8000bf0 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e6c:	e01a      	b.n	8000ea4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d016      	beq.n	8000ea4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <HAL_ADC_PollForConversion+0x6c>
 8000e7c:	f7ff feb8 	bl	8000bf0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d20b      	bcs.n	8000ea4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f043 0204 	orr.w	r2, r3, #4
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e03d      	b.n	8000f20 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d1dd      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f06f 0212 	mvn.w	r2, #18
 8000eba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d123      	bne.n	8000f1e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d11f      	bne.n	8000f1e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e113      	b.n	8001188 <HAL_ADC_ConfigChannel+0x244>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b09      	cmp	r3, #9
 8000f6e:	d925      	bls.n	8000fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68d9      	ldr	r1, [r3, #12]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	3b1e      	subs	r3, #30
 8000f86:	2207      	movs	r2, #7
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	400a      	ands	r2, r1
 8000f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68d9      	ldr	r1, [r3, #12]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4403      	add	r3, r0
 8000fae:	3b1e      	subs	r3, #30
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	e022      	b.n	8001002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6919      	ldr	r1, [r3, #16]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	400a      	ands	r2, r1
 8000fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6919      	ldr	r1, [r3, #16]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4403      	add	r3, r0
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b06      	cmp	r3, #6
 8001008:	d824      	bhi.n	8001054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	3b05      	subs	r3, #5
 800101c:	221f      	movs	r2, #31
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	400a      	ands	r2, r1
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	3b05      	subs	r3, #5
 8001046:	fa00 f203 	lsl.w	r2, r0, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
 8001052:	e04c      	b.n	80010ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b0c      	cmp	r3, #12
 800105a:	d824      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	3b23      	subs	r3, #35	; 0x23
 800106e:	221f      	movs	r2, #31
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43da      	mvns	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	400a      	ands	r2, r1
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	3b23      	subs	r3, #35	; 0x23
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
 80010a4:	e023      	b.n	80010ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b41      	subs	r3, #65	; 0x41
 80010b8:	221f      	movs	r2, #31
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	400a      	ands	r2, r1
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b41      	subs	r3, #65	; 0x41
 80010e2:	fa00 f203 	lsl.w	r2, r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_ADC_ConfigChannel+0x250>)
 80010f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a28      	ldr	r2, [pc, #160]	; (8001198 <HAL_ADC_ConfigChannel+0x254>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10f      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1d8>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d10b      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_ADC_ConfigChannel+0x254>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_ADC_ConfigChannel+0x23a>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_ADC_ConfigChannel+0x258>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_ADC_ConfigChannel+0x1f4>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b11      	cmp	r3, #17
 8001136:	d122      	bne.n	800117e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_ADC_ConfigChannel+0x258>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d111      	bne.n	800117e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_ConfigChannel+0x25c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_ADC_ConfigChannel+0x260>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	0c9a      	lsrs	r2, r3, #18
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3b01      	subs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40012300 	.word	0x40012300
 8001198:	40012000 	.word	0x40012000
 800119c:	10000012 	.word	0x10000012
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b0:	4b79      	ldr	r3, [pc, #484]	; (8001398 <ADC_Init+0x1f0>)
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	021a      	lsls	r2, r3, #8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6899      	ldr	r1, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <ADC_Init+0x1f4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d022      	beq.n	8001286 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6899      	ldr	r1, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e00f      	b.n	80012a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0202 	bic.w	r2, r2, #2
 80012b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6899      	ldr	r1, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e1b      	ldrb	r3, [r3, #24]
 80012c0:	005a      	lsls	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01b      	beq.n	800130c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	3b01      	subs	r3, #1
 8001300:	035a      	lsls	r2, r3, #13
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	e007      	b.n	800131c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	3b01      	subs	r3, #1
 8001338:	051a      	lsls	r2, r3, #20
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6899      	ldr	r1, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	025a      	lsls	r2, r3, #9
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	029a      	lsls	r2, r3, #10
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40012300 	.word	0x40012300
 800139c:	0f000001 	.word	0x0f000001

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff47 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff5c 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffb0 	bl	80014c0 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e165      	b.n	8001854 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 8154 	bne.w	800184e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d00b      	beq.n	80015c6 <HAL_GPIO_Init+0x5a>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ba:	2b11      	cmp	r3, #17
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0xfc>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80ae 	beq.w	800184e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a57      	ldr	r2, [pc, #348]	; (800186c <HAL_GPIO_Init+0x300>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x304>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x308>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_Init+0x216>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x30c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x212>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x20e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x20a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a49      	ldr	r2, [pc, #292]	; (8001884 <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x206>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x202>
 800176a:	2306      	movs	r3, #6
 800176c:	e00c      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800176e:	2307      	movs	r3, #7
 8001770:	e00a      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001772:	2305      	movs	r3, #5
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001776:	2304      	movs	r3, #4
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_GPIO_Init+0x300>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_GPIO_Init+0x320>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <HAL_GPIO_Init+0x320>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_GPIO_Init+0x320>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_GPIO_Init+0x320>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_GPIO_Init+0x320>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_GPIO_Init+0x320>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_GPIO_Init+0x320>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_GPIO_Init+0x320>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f ae96 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40021400 	.word	0x40021400
 8001888:	40021800 	.word	0x40021800
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0cc      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d90c      	bls.n	8001900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0b8      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a58      	ldr	r2, [pc, #352]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001930:	4b53      	ldr	r3, [pc, #332]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a52      	ldr	r2, [pc, #328]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800193a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193c:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	494d      	ldr	r1, [pc, #308]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d044      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e07f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d003      	beq.n	8001982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	2b03      	cmp	r3, #3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e067      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4934      	ldr	r1, [pc, #208]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f91c 	bl	8000bf0 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f918 	bl	8000bf0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20c      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e032      	b.n	8001a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4916      	ldr	r1, [pc, #88]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f821 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f87c 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08002fa8 	.word	0x08002fa8
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d007      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x32>
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d008      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 808d 	bne.w	8001bd6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_GetSysClockFreq+0x15c>)
 8001abe:	60bb      	str	r3, [r7, #8]
       break;
 8001ac0:	e08c      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac4:	60bb      	str	r3, [r7, #8]
      break;
 8001ac6:	e089      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	f04f 0400 	mov.w	r4, #0
 8001ae8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	ea03 0501 	and.w	r5, r3, r1
 8001af4:	ea04 0602 	and.w	r6, r4, r2
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001afa:	fb02 f106 	mul.w	r1, r2, r6
 8001afe:	2200      	movs	r2, #0
 8001b00:	fb02 f205 	mul.w	r2, r2, r5
 8001b04:	440a      	add	r2, r1
 8001b06:	493a      	ldr	r1, [pc, #232]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b08:	fba5 0101 	umull	r0, r1, r5, r1
 8001b0c:	1853      	adds	r3, r2, r1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4623      	mov	r3, r4
 8001b1a:	f7fe fbd9 	bl	80002d0 <__aeabi_uldivmod>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460c      	mov	r4, r1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e049      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	f04f 0400 	mov.w	r4, #0
 8001b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	ea03 0501 	and.w	r5, r3, r1
 8001b3c:	ea04 0602 	and.w	r6, r4, r2
 8001b40:	4629      	mov	r1, r5
 8001b42:	4632      	mov	r2, r6
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	0154      	lsls	r4, r2, #5
 8001b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b52:	014b      	lsls	r3, r1, #5
 8001b54:	4619      	mov	r1, r3
 8001b56:	4622      	mov	r2, r4
 8001b58:	1b49      	subs	r1, r1, r5
 8001b5a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	0194      	lsls	r4, r2, #6
 8001b68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b6c:	018b      	lsls	r3, r1, #6
 8001b6e:	1a5b      	subs	r3, r3, r1
 8001b70:	eb64 0402 	sbc.w	r4, r4, r2
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	00e2      	lsls	r2, r4, #3
 8001b7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b82:	00d9      	lsls	r1, r3, #3
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	195b      	adds	r3, r3, r5
 8001b8a:	eb44 0406 	adc.w	r4, r4, r6
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	02a2      	lsls	r2, r4, #10
 8001b98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b9c:	0299      	lsls	r1, r3, #10
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f04f 0400 	mov.w	r4, #0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	f7fe fb8e 	bl	80002d0 <__aeabi_uldivmod>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	60bb      	str	r3, [r7, #8]
      break;
 8001bd4:	e002      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bd8:	60bb      	str	r3, [r7, #8]
      break;
 8001bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	017d7840 	.word	0x017d7840

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4601      	mov	r1, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08002fb8 	.word	0x08002fb8

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08002fb8 	.word	0x08002fb8

08001c5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d075      	beq.n	8001d60 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c74:	4ba2      	ldr	r3, [pc, #648]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d00c      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c80:	4b9f      	ldr	r3, [pc, #636]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d112      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8c:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c98:	d10b      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9a:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d05b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x102>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d157      	bne.n	8001d5e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e20b      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x6e>
 8001cbc:	4b90      	ldr	r3, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a8f      	ldr	r2, [pc, #572]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e01d      	b.n	8001d06 <HAL_RCC_OscConfig+0xaa>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x92>
 8001cd4:	4b8a      	ldr	r3, [pc, #552]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b87      	ldr	r3, [pc, #540]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a86      	ldr	r2, [pc, #536]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0xaa>
 8001cee:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a83      	ldr	r2, [pc, #524]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d013      	beq.n	8001d36 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff6f 	bl	8000bf0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7fe ff6b 	bl	8000bf0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1d0      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0xba>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe ff5b 	bl	8000bf0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7fe ff57 	bl	8000bf0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1bc      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d50:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0xe2>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d063      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d11c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d116      	bne.n	8001dbe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d90:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x14c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e190      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4952      	ldr	r1, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbc:	e03a      	b.n	8001e34 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x2a8>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff10 	bl	8000bf0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7fe ff0c 	bl	8000bf0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e171      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	493f      	ldr	r1, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
 8001e06:	e015      	b.n	8001e34 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <HAL_RCC_OscConfig+0x2a8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7fe feef 	bl	8000bf0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe feeb 	bl	8000bf0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e150      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d030      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fecf 	bl	8000bf0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe fecb 	bl	8000bf0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e130      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1fa>
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7fe feb8 	bl	8000bf0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe feb4 	bl	8000bf0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e119      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 809f 	beq.w	8001fee <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x2a4>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d120      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fe7a 	bl	8000bf0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	e010      	b.n	8001f22 <HAL_RCC_OscConfig+0x2c6>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
 8001f08:	42470e80 	.word	0x42470e80
 8001f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe fe6e 	bl	8000bf0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0d3      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_RCC_OscConfig+0x478>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2e8>
 8001f36:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a67      	ldr	r2, [pc, #412]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x322>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x30a>
 8001f4c:	4b62      	ldr	r3, [pc, #392]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a61      	ldr	r2, [pc, #388]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b5f      	ldr	r3, [pc, #380]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x322>
 8001f66:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7fe fe33 	bl	8000bf0 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fe2f 	bl	8000bf0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e092      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x332>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fe1d 	bl	8000bf0 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fe19 	bl	8000bf0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e07c      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d068      	beq.n	80020c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d060      	beq.n	80020c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d145      	bne.n	8002096 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCC_OscConfig+0x480>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fdee 	bl	8000bf0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fdea 	bl	8000bf0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e04f      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	071b      	lsls	r3, r3, #28
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_OscConfig+0x480>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7fe fdbf 	bl	8000bf0 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fdbb 	bl	8000bf0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e020      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x41a>
 8002094:	e018      	b.n	80020c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_RCC_OscConfig+0x480>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fda8 	bl	8000bf0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fda4 	bl	8000bf0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e009      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_RCC_OscConfig+0x47c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x448>
 80020c2:	e001      	b.n	80020c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470060 	.word	0x42470060

080020e0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e033      	b.n	800215a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fc2a 	bl	8000960 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f913 	bl	8002340 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002138:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002148:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af02      	add	r7, sp, #8
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]

  if (husart->State == HAL_USART_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 8083 	bne.w	800228a <HAL_USART_Transmit+0x128>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_USART_Transmit+0x2e>
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_USART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e07b      	b.n	800228c <HAL_USART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_USART_Transmit+0x40>
 800219e:	2302      	movs	r3, #2
 80021a0:	e074      	b.n	800228c <HAL_USART_Transmit+0x12a>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2212      	movs	r2, #18
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021b8:	f7fe fd1a 	bl	8000bf0 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80021ca:	e042      	b.n	8002252 <HAL_USART_Transmit+0xf0>
    {
      husart->TxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e2:	d122      	bne.n	800222a <HAL_USART_Transmit+0xc8>
      {
        /* Wait for TC flag in order to write data in DR */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2200      	movs	r2, #0
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f850 	bl	8002294 <USART_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_USART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e046      	b.n	800228c <HAL_USART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pTxData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	613b      	str	r3, [r7, #16]
        husart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002210:	605a      	str	r2, [r3, #4]
        if (husart->Init.Parity == USART_PARITY_NONE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_USART_Transmit+0xc0>
        {
          pTxData += 2U;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3302      	adds	r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e017      	b.n	8002252 <HAL_USART_Transmit+0xf0>
        }
        else
        {
          pTxData += 1U;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	e013      	b.n	8002252 <HAL_USART_Transmit+0xf0>
        }
      }
      else
      {
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f82d 	bl	8002294 <USART_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_USART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e023      	b.n	800228c <HAL_USART_Transmit+0x12a>
        }
        husart->Instance->DR = (*pTxData++ & (uint8_t)0xFF);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
    while (husart->TxXferCount > 0U)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1b7      	bne.n	80021cc <HAL_USART_Transmit+0x6a>
      }
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2200      	movs	r2, #0
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f814 	bl	8002294 <USART_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_USART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e00a      	b.n	800228c <HAL_USART_Transmit+0x12a>
    }

    husart->State = HAL_USART_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_USART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800228a:	2302      	movs	r3, #2
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80022a4:	e038      	b.n	8002318 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d034      	beq.n	8002318 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <USART_WaitOnFlagUntilTimeout+0x30>
 80022b4:	f7fe fc9c 	bl	8000bf0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d229      	bcs.n	8002318 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d2:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0220 	bic.w	r2, r2, #32
 80022e2:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f2:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e00f      	b.n	8002338 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4013      	ands	r3, r2
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	429a      	cmp	r2, r3
 8002334:	d0b7      	beq.n	80022a6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020c 	bic.w	r2, r2, #12
 800235c:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800236c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002376:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800238c:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023a4:	f023 030c 	bic.w	r3, r3, #12
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023da:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
   if ((husart->Instance == USART1) || (husart->Instance == USART6) || (husart->Instance == UART9) || (husart->Instance == UART10))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4ac8      	ldr	r2, [pc, #800]	; (8002704 <USART_SetConfig+0x3c4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00f      	beq.n	8002406 <USART_SetConfig+0xc6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4ac7      	ldr	r2, [pc, #796]	; (8002708 <USART_SetConfig+0x3c8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00a      	beq.n	8002406 <USART_SetConfig+0xc6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4ac5      	ldr	r2, [pc, #788]	; (800270c <USART_SetConfig+0x3cc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d005      	beq.n	8002406 <USART_SetConfig+0xc6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4ac4      	ldr	r2, [pc, #784]	; (8002710 <USART_SetConfig+0x3d0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 80bd 	bne.w	8002580 <USART_SetConfig+0x240>
   {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002406:	f7ff fc15 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 800240a:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	461d      	mov	r5, r3
 8002410:	f04f 0600 	mov.w	r6, #0
 8002414:	46a8      	mov	r8, r5
 8002416:	46b1      	mov	r9, r6
 8002418:	eb18 0308 	adds.w	r3, r8, r8
 800241c:	eb49 0409 	adc.w	r4, r9, r9
 8002420:	4698      	mov	r8, r3
 8002422:	46a1      	mov	r9, r4
 8002424:	eb18 0805 	adds.w	r8, r8, r5
 8002428:	eb49 0906 	adc.w	r9, r9, r6
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800243c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002440:	4688      	mov	r8, r1
 8002442:	4691      	mov	r9, r2
 8002444:	eb18 0005 	adds.w	r0, r8, r5
 8002448:	eb49 0106 	adc.w	r1, r9, r6
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	461d      	mov	r5, r3
 8002452:	f04f 0600 	mov.w	r6, #0
 8002456:	196b      	adds	r3, r5, r5
 8002458:	eb46 0406 	adc.w	r4, r6, r6
 800245c:	461a      	mov	r2, r3
 800245e:	4623      	mov	r3, r4
 8002460:	f7fd ff36 	bl	80002d0 <__aeabi_uldivmod>
 8002464:	4603      	mov	r3, r0
 8002466:	460c      	mov	r4, r1
 8002468:	461a      	mov	r2, r3
 800246a:	4baa      	ldr	r3, [pc, #680]	; (8002714 <USART_SetConfig+0x3d4>)
 800246c:	fba3 2302 	umull	r2, r3, r3, r2
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	461d      	mov	r5, r3
 800247a:	f04f 0600 	mov.w	r6, #0
 800247e:	46a9      	mov	r9, r5
 8002480:	46b2      	mov	sl, r6
 8002482:	eb19 0309 	adds.w	r3, r9, r9
 8002486:	eb4a 040a 	adc.w	r4, sl, sl
 800248a:	4699      	mov	r9, r3
 800248c:	46a2      	mov	sl, r4
 800248e:	eb19 0905 	adds.w	r9, r9, r5
 8002492:	eb4a 0a06 	adc.w	sl, sl, r6
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024aa:	4689      	mov	r9, r1
 80024ac:	4692      	mov	sl, r2
 80024ae:	eb19 0005 	adds.w	r0, r9, r5
 80024b2:	eb4a 0106 	adc.w	r1, sl, r6
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	461d      	mov	r5, r3
 80024bc:	f04f 0600 	mov.w	r6, #0
 80024c0:	196b      	adds	r3, r5, r5
 80024c2:	eb46 0406 	adc.w	r4, r6, r6
 80024c6:	461a      	mov	r2, r3
 80024c8:	4623      	mov	r3, r4
 80024ca:	f7fd ff01 	bl	80002d0 <__aeabi_uldivmod>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <USART_SetConfig+0x3d4>)
 80024d6:	fba3 1302 	umull	r1, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2164      	movs	r1, #100	; 0x64
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	3332      	adds	r3, #50	; 0x32
 80024e8:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <USART_SetConfig+0x3d4>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024f6:	4498      	add	r8, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	461d      	mov	r5, r3
 80024fc:	f04f 0600 	mov.w	r6, #0
 8002500:	46a9      	mov	r9, r5
 8002502:	46b2      	mov	sl, r6
 8002504:	eb19 0309 	adds.w	r3, r9, r9
 8002508:	eb4a 040a 	adc.w	r4, sl, sl
 800250c:	4699      	mov	r9, r3
 800250e:	46a2      	mov	sl, r4
 8002510:	eb19 0905 	adds.w	r9, r9, r5
 8002514:	eb4a 0a06 	adc.w	sl, sl, r6
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800252c:	4689      	mov	r9, r1
 800252e:	4692      	mov	sl, r2
 8002530:	eb19 0005 	adds.w	r0, r9, r5
 8002534:	eb4a 0106 	adc.w	r1, sl, r6
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	461d      	mov	r5, r3
 800253e:	f04f 0600 	mov.w	r6, #0
 8002542:	196b      	adds	r3, r5, r5
 8002544:	eb46 0406 	adc.w	r4, r6, r6
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	f7fd fec0 	bl	80002d0 <__aeabi_uldivmod>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	461a      	mov	r2, r3
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <USART_SetConfig+0x3d4>)
 8002558:	fba3 1302 	umull	r1, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	2164      	movs	r1, #100	; 0x64
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	3332      	adds	r3, #50	; 0x32
 800256a:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <USART_SetConfig+0x3d4>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	f003 0207 	and.w	r2, r3, #7
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4442      	add	r2, r8
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e0bb      	b.n	80026f8 <USART_SetConfig+0x3b8>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002580:	f7ff fb44 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002584:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	461d      	mov	r5, r3
 800258a:	f04f 0600 	mov.w	r6, #0
 800258e:	46a8      	mov	r8, r5
 8002590:	46b1      	mov	r9, r6
 8002592:	eb18 0308 	adds.w	r3, r8, r8
 8002596:	eb49 0409 	adc.w	r4, r9, r9
 800259a:	4698      	mov	r8, r3
 800259c:	46a1      	mov	r9, r4
 800259e:	eb18 0805 	adds.w	r8, r8, r5
 80025a2:	eb49 0906 	adc.w	r9, r9, r6
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ba:	4688      	mov	r8, r1
 80025bc:	4691      	mov	r9, r2
 80025be:	eb18 0005 	adds.w	r0, r8, r5
 80025c2:	eb49 0106 	adc.w	r1, r9, r6
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	461d      	mov	r5, r3
 80025cc:	f04f 0600 	mov.w	r6, #0
 80025d0:	196b      	adds	r3, r5, r5
 80025d2:	eb46 0406 	adc.w	r4, r6, r6
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	f7fd fe79 	bl	80002d0 <__aeabi_uldivmod>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <USART_SetConfig+0x3d4>)
 80025e6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	461d      	mov	r5, r3
 80025f4:	f04f 0600 	mov.w	r6, #0
 80025f8:	46a9      	mov	r9, r5
 80025fa:	46b2      	mov	sl, r6
 80025fc:	eb19 0309 	adds.w	r3, r9, r9
 8002600:	eb4a 040a 	adc.w	r4, sl, sl
 8002604:	4699      	mov	r9, r3
 8002606:	46a2      	mov	sl, r4
 8002608:	eb19 0905 	adds.w	r9, r9, r5
 800260c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002624:	4689      	mov	r9, r1
 8002626:	4692      	mov	sl, r2
 8002628:	eb19 0005 	adds.w	r0, r9, r5
 800262c:	eb4a 0106 	adc.w	r1, sl, r6
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	461d      	mov	r5, r3
 8002636:	f04f 0600 	mov.w	r6, #0
 800263a:	196b      	adds	r3, r5, r5
 800263c:	eb46 0406 	adc.w	r4, r6, r6
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f7fd fe44 	bl	80002d0 <__aeabi_uldivmod>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	461a      	mov	r2, r3
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <USART_SetConfig+0x3d4>)
 8002650:	fba3 1302 	umull	r1, r3, r3, r2
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	2164      	movs	r1, #100	; 0x64
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	3332      	adds	r3, #50	; 0x32
 8002662:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <USART_SetConfig+0x3d4>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002670:	4498      	add	r8, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	461d      	mov	r5, r3
 8002676:	f04f 0600 	mov.w	r6, #0
 800267a:	46a9      	mov	r9, r5
 800267c:	46b2      	mov	sl, r6
 800267e:	eb19 0309 	adds.w	r3, r9, r9
 8002682:	eb4a 040a 	adc.w	r4, sl, sl
 8002686:	4699      	mov	r9, r3
 8002688:	46a2      	mov	sl, r4
 800268a:	eb19 0905 	adds.w	r9, r9, r5
 800268e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026a6:	4689      	mov	r9, r1
 80026a8:	4692      	mov	sl, r2
 80026aa:	eb19 0005 	adds.w	r0, r9, r5
 80026ae:	eb4a 0106 	adc.w	r1, sl, r6
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	461d      	mov	r5, r3
 80026b8:	f04f 0600 	mov.w	r6, #0
 80026bc:	196b      	adds	r3, r5, r5
 80026be:	eb46 0406 	adc.w	r4, r6, r6
 80026c2:	461a      	mov	r2, r3
 80026c4:	4623      	mov	r3, r4
 80026c6:	f7fd fe03 	bl	80002d0 <__aeabi_uldivmod>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <USART_SetConfig+0x3d4>)
 80026d2:	fba3 1302 	umull	r1, r3, r3, r2
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2164      	movs	r1, #100	; 0x64
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	3332      	adds	r3, #50	; 0x32
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <USART_SetConfig+0x3d4>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	f003 0207 	and.w	r2, r3, #7
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4442      	add	r2, r8
 80026f6:	609a      	str	r2, [r3, #8]
  }
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002702:	bf00      	nop
 8002704:	40011000 	.word	0x40011000
 8002708:	40011400 	.word	0x40011400
 800270c:	40011800 	.word	0x40011800
 8002710:	40011c00 	.word	0x40011c00
 8002714:	51eb851f 	.word	0x51eb851f

08002718 <__errno>:
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <__errno+0x8>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4e0d      	ldr	r6, [pc, #52]	; (800275c <__libc_init_array+0x38>)
 8002728:	4c0d      	ldr	r4, [pc, #52]	; (8002760 <__libc_init_array+0x3c>)
 800272a:	1ba4      	subs	r4, r4, r6
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	2500      	movs	r5, #0
 8002730:	42a5      	cmp	r5, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	4e0b      	ldr	r6, [pc, #44]	; (8002764 <__libc_init_array+0x40>)
 8002736:	4c0c      	ldr	r4, [pc, #48]	; (8002768 <__libc_init_array+0x44>)
 8002738:	f000 fc26 	bl	8002f88 <_init>
 800273c:	1ba4      	subs	r4, r4, r6
 800273e:	10a4      	asrs	r4, r4, #2
 8002740:	2500      	movs	r5, #0
 8002742:	42a5      	cmp	r5, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800274c:	4798      	blx	r3
 800274e:	3501      	adds	r5, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002756:	4798      	blx	r3
 8002758:	3501      	adds	r5, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	08002ffc 	.word	0x08002ffc
 8002760:	08002ffc 	.word	0x08002ffc
 8002764:	08002ffc 	.word	0x08002ffc
 8002768:	08003000 	.word	0x08003000

0800276c <memset>:
 800276c:	4402      	add	r2, r0
 800276e:	4603      	mov	r3, r0
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	f803 1b01 	strb.w	r1, [r3], #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <siprintf>:
 800277c:	b40e      	push	{r1, r2, r3}
 800277e:	b500      	push	{lr}
 8002780:	b09c      	sub	sp, #112	; 0x70
 8002782:	ab1d      	add	r3, sp, #116	; 0x74
 8002784:	9002      	str	r0, [sp, #8]
 8002786:	9006      	str	r0, [sp, #24]
 8002788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800278c:	4809      	ldr	r0, [pc, #36]	; (80027b4 <siprintf+0x38>)
 800278e:	9107      	str	r1, [sp, #28]
 8002790:	9104      	str	r1, [sp, #16]
 8002792:	4909      	ldr	r1, [pc, #36]	; (80027b8 <siprintf+0x3c>)
 8002794:	f853 2b04 	ldr.w	r2, [r3], #4
 8002798:	9105      	str	r1, [sp, #20]
 800279a:	6800      	ldr	r0, [r0, #0]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	a902      	add	r1, sp, #8
 80027a0:	f000 f866 	bl	8002870 <_svfiprintf_r>
 80027a4:	9b02      	ldr	r3, [sp, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	b01c      	add	sp, #112	; 0x70
 80027ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80027b0:	b003      	add	sp, #12
 80027b2:	4770      	bx	lr
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	ffff0208 	.word	0xffff0208

080027bc <__ssputs_r>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	688e      	ldr	r6, [r1, #8]
 80027c2:	429e      	cmp	r6, r3
 80027c4:	4682      	mov	sl, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	4690      	mov	r8, r2
 80027ca:	4699      	mov	r9, r3
 80027cc:	d837      	bhi.n	800283e <__ssputs_r+0x82>
 80027ce:	898a      	ldrh	r2, [r1, #12]
 80027d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027d4:	d031      	beq.n	800283a <__ssputs_r+0x7e>
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	6909      	ldr	r1, [r1, #16]
 80027da:	1a6f      	subs	r7, r5, r1
 80027dc:	6965      	ldr	r5, [r4, #20]
 80027de:	2302      	movs	r3, #2
 80027e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80027e8:	f109 0301 	add.w	r3, r9, #1
 80027ec:	443b      	add	r3, r7
 80027ee:	429d      	cmp	r5, r3
 80027f0:	bf38      	it	cc
 80027f2:	461d      	movcc	r5, r3
 80027f4:	0553      	lsls	r3, r2, #21
 80027f6:	d530      	bpl.n	800285a <__ssputs_r+0x9e>
 80027f8:	4629      	mov	r1, r5
 80027fa:	f000 fb2b 	bl	8002e54 <_malloc_r>
 80027fe:	4606      	mov	r6, r0
 8002800:	b950      	cbnz	r0, 8002818 <__ssputs_r+0x5c>
 8002802:	230c      	movs	r3, #12
 8002804:	f8ca 3000 	str.w	r3, [sl]
 8002808:	89a3      	ldrh	r3, [r4, #12]
 800280a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280e:	81a3      	strh	r3, [r4, #12]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002818:	463a      	mov	r2, r7
 800281a:	6921      	ldr	r1, [r4, #16]
 800281c:	f000 faa8 	bl	8002d70 <memcpy>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	81a3      	strh	r3, [r4, #12]
 800282c:	6126      	str	r6, [r4, #16]
 800282e:	6165      	str	r5, [r4, #20]
 8002830:	443e      	add	r6, r7
 8002832:	1bed      	subs	r5, r5, r7
 8002834:	6026      	str	r6, [r4, #0]
 8002836:	60a5      	str	r5, [r4, #8]
 8002838:	464e      	mov	r6, r9
 800283a:	454e      	cmp	r6, r9
 800283c:	d900      	bls.n	8002840 <__ssputs_r+0x84>
 800283e:	464e      	mov	r6, r9
 8002840:	4632      	mov	r2, r6
 8002842:	4641      	mov	r1, r8
 8002844:	6820      	ldr	r0, [r4, #0]
 8002846:	f000 fa9e 	bl	8002d86 <memmove>
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	1b9b      	subs	r3, r3, r6
 800284e:	60a3      	str	r3, [r4, #8]
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	441e      	add	r6, r3
 8002854:	6026      	str	r6, [r4, #0]
 8002856:	2000      	movs	r0, #0
 8002858:	e7dc      	b.n	8002814 <__ssputs_r+0x58>
 800285a:	462a      	mov	r2, r5
 800285c:	f000 fb54 	bl	8002f08 <_realloc_r>
 8002860:	4606      	mov	r6, r0
 8002862:	2800      	cmp	r0, #0
 8002864:	d1e2      	bne.n	800282c <__ssputs_r+0x70>
 8002866:	6921      	ldr	r1, [r4, #16]
 8002868:	4650      	mov	r0, sl
 800286a:	f000 faa5 	bl	8002db8 <_free_r>
 800286e:	e7c8      	b.n	8002802 <__ssputs_r+0x46>

08002870 <_svfiprintf_r>:
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	461d      	mov	r5, r3
 8002876:	898b      	ldrh	r3, [r1, #12]
 8002878:	061f      	lsls	r7, r3, #24
 800287a:	b09d      	sub	sp, #116	; 0x74
 800287c:	4680      	mov	r8, r0
 800287e:	460c      	mov	r4, r1
 8002880:	4616      	mov	r6, r2
 8002882:	d50f      	bpl.n	80028a4 <_svfiprintf_r+0x34>
 8002884:	690b      	ldr	r3, [r1, #16]
 8002886:	b96b      	cbnz	r3, 80028a4 <_svfiprintf_r+0x34>
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	f000 fae3 	bl	8002e54 <_malloc_r>
 800288e:	6020      	str	r0, [r4, #0]
 8002890:	6120      	str	r0, [r4, #16]
 8002892:	b928      	cbnz	r0, 80028a0 <_svfiprintf_r+0x30>
 8002894:	230c      	movs	r3, #12
 8002896:	f8c8 3000 	str.w	r3, [r8]
 800289a:	f04f 30ff 	mov.w	r0, #4294967295
 800289e:	e0c8      	b.n	8002a32 <_svfiprintf_r+0x1c2>
 80028a0:	2340      	movs	r3, #64	; 0x40
 80028a2:	6163      	str	r3, [r4, #20]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9309      	str	r3, [sp, #36]	; 0x24
 80028a8:	2320      	movs	r3, #32
 80028aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ae:	2330      	movs	r3, #48	; 0x30
 80028b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b4:	9503      	str	r5, [sp, #12]
 80028b6:	f04f 0b01 	mov.w	fp, #1
 80028ba:	4637      	mov	r7, r6
 80028bc:	463d      	mov	r5, r7
 80028be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028c2:	b10b      	cbz	r3, 80028c8 <_svfiprintf_r+0x58>
 80028c4:	2b25      	cmp	r3, #37	; 0x25
 80028c6:	d13e      	bne.n	8002946 <_svfiprintf_r+0xd6>
 80028c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80028cc:	d00b      	beq.n	80028e6 <_svfiprintf_r+0x76>
 80028ce:	4653      	mov	r3, sl
 80028d0:	4632      	mov	r2, r6
 80028d2:	4621      	mov	r1, r4
 80028d4:	4640      	mov	r0, r8
 80028d6:	f7ff ff71 	bl	80027bc <__ssputs_r>
 80028da:	3001      	adds	r0, #1
 80028dc:	f000 80a4 	beq.w	8002a28 <_svfiprintf_r+0x1b8>
 80028e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028e2:	4453      	add	r3, sl
 80028e4:	9309      	str	r3, [sp, #36]	; 0x24
 80028e6:	783b      	ldrb	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 809d 	beq.w	8002a28 <_svfiprintf_r+0x1b8>
 80028ee:	2300      	movs	r3, #0
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	9307      	str	r3, [sp, #28]
 80028fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002900:	931a      	str	r3, [sp, #104]	; 0x68
 8002902:	462f      	mov	r7, r5
 8002904:	2205      	movs	r2, #5
 8002906:	f817 1b01 	ldrb.w	r1, [r7], #1
 800290a:	4850      	ldr	r0, [pc, #320]	; (8002a4c <_svfiprintf_r+0x1dc>)
 800290c:	f7fd fc90 	bl	8000230 <memchr>
 8002910:	9b04      	ldr	r3, [sp, #16]
 8002912:	b9d0      	cbnz	r0, 800294a <_svfiprintf_r+0xda>
 8002914:	06d9      	lsls	r1, r3, #27
 8002916:	bf44      	itt	mi
 8002918:	2220      	movmi	r2, #32
 800291a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800291e:	071a      	lsls	r2, r3, #28
 8002920:	bf44      	itt	mi
 8002922:	222b      	movmi	r2, #43	; 0x2b
 8002924:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002928:	782a      	ldrb	r2, [r5, #0]
 800292a:	2a2a      	cmp	r2, #42	; 0x2a
 800292c:	d015      	beq.n	800295a <_svfiprintf_r+0xea>
 800292e:	9a07      	ldr	r2, [sp, #28]
 8002930:	462f      	mov	r7, r5
 8002932:	2000      	movs	r0, #0
 8002934:	250a      	movs	r5, #10
 8002936:	4639      	mov	r1, r7
 8002938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800293c:	3b30      	subs	r3, #48	; 0x30
 800293e:	2b09      	cmp	r3, #9
 8002940:	d94d      	bls.n	80029de <_svfiprintf_r+0x16e>
 8002942:	b1b8      	cbz	r0, 8002974 <_svfiprintf_r+0x104>
 8002944:	e00f      	b.n	8002966 <_svfiprintf_r+0xf6>
 8002946:	462f      	mov	r7, r5
 8002948:	e7b8      	b.n	80028bc <_svfiprintf_r+0x4c>
 800294a:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <_svfiprintf_r+0x1dc>)
 800294c:	1a80      	subs	r0, r0, r2
 800294e:	fa0b f000 	lsl.w	r0, fp, r0
 8002952:	4318      	orrs	r0, r3
 8002954:	9004      	str	r0, [sp, #16]
 8002956:	463d      	mov	r5, r7
 8002958:	e7d3      	b.n	8002902 <_svfiprintf_r+0x92>
 800295a:	9a03      	ldr	r2, [sp, #12]
 800295c:	1d11      	adds	r1, r2, #4
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	9103      	str	r1, [sp, #12]
 8002962:	2a00      	cmp	r2, #0
 8002964:	db01      	blt.n	800296a <_svfiprintf_r+0xfa>
 8002966:	9207      	str	r2, [sp, #28]
 8002968:	e004      	b.n	8002974 <_svfiprintf_r+0x104>
 800296a:	4252      	negs	r2, r2
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	9207      	str	r2, [sp, #28]
 8002972:	9304      	str	r3, [sp, #16]
 8002974:	783b      	ldrb	r3, [r7, #0]
 8002976:	2b2e      	cmp	r3, #46	; 0x2e
 8002978:	d10c      	bne.n	8002994 <_svfiprintf_r+0x124>
 800297a:	787b      	ldrb	r3, [r7, #1]
 800297c:	2b2a      	cmp	r3, #42	; 0x2a
 800297e:	d133      	bne.n	80029e8 <_svfiprintf_r+0x178>
 8002980:	9b03      	ldr	r3, [sp, #12]
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	bfb8      	it	lt
 800298c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002990:	3702      	adds	r7, #2
 8002992:	9305      	str	r3, [sp, #20]
 8002994:	4d2e      	ldr	r5, [pc, #184]	; (8002a50 <_svfiprintf_r+0x1e0>)
 8002996:	7839      	ldrb	r1, [r7, #0]
 8002998:	2203      	movs	r2, #3
 800299a:	4628      	mov	r0, r5
 800299c:	f7fd fc48 	bl	8000230 <memchr>
 80029a0:	b138      	cbz	r0, 80029b2 <_svfiprintf_r+0x142>
 80029a2:	2340      	movs	r3, #64	; 0x40
 80029a4:	1b40      	subs	r0, r0, r5
 80029a6:	fa03 f000 	lsl.w	r0, r3, r0
 80029aa:	9b04      	ldr	r3, [sp, #16]
 80029ac:	4303      	orrs	r3, r0
 80029ae:	3701      	adds	r7, #1
 80029b0:	9304      	str	r3, [sp, #16]
 80029b2:	7839      	ldrb	r1, [r7, #0]
 80029b4:	4827      	ldr	r0, [pc, #156]	; (8002a54 <_svfiprintf_r+0x1e4>)
 80029b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029ba:	2206      	movs	r2, #6
 80029bc:	1c7e      	adds	r6, r7, #1
 80029be:	f7fd fc37 	bl	8000230 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d038      	beq.n	8002a38 <_svfiprintf_r+0x1c8>
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <_svfiprintf_r+0x1e8>)
 80029c8:	bb13      	cbnz	r3, 8002a10 <_svfiprintf_r+0x1a0>
 80029ca:	9b03      	ldr	r3, [sp, #12]
 80029cc:	3307      	adds	r3, #7
 80029ce:	f023 0307 	bic.w	r3, r3, #7
 80029d2:	3308      	adds	r3, #8
 80029d4:	9303      	str	r3, [sp, #12]
 80029d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d8:	444b      	add	r3, r9
 80029da:	9309      	str	r3, [sp, #36]	; 0x24
 80029dc:	e76d      	b.n	80028ba <_svfiprintf_r+0x4a>
 80029de:	fb05 3202 	mla	r2, r5, r2, r3
 80029e2:	2001      	movs	r0, #1
 80029e4:	460f      	mov	r7, r1
 80029e6:	e7a6      	b.n	8002936 <_svfiprintf_r+0xc6>
 80029e8:	2300      	movs	r3, #0
 80029ea:	3701      	adds	r7, #1
 80029ec:	9305      	str	r3, [sp, #20]
 80029ee:	4619      	mov	r1, r3
 80029f0:	250a      	movs	r5, #10
 80029f2:	4638      	mov	r0, r7
 80029f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f8:	3a30      	subs	r2, #48	; 0x30
 80029fa:	2a09      	cmp	r2, #9
 80029fc:	d903      	bls.n	8002a06 <_svfiprintf_r+0x196>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0c8      	beq.n	8002994 <_svfiprintf_r+0x124>
 8002a02:	9105      	str	r1, [sp, #20]
 8002a04:	e7c6      	b.n	8002994 <_svfiprintf_r+0x124>
 8002a06:	fb05 2101 	mla	r1, r5, r1, r2
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	4607      	mov	r7, r0
 8002a0e:	e7f0      	b.n	80029f2 <_svfiprintf_r+0x182>
 8002a10:	ab03      	add	r3, sp, #12
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4622      	mov	r2, r4
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_svfiprintf_r+0x1ec>)
 8002a18:	a904      	add	r1, sp, #16
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	f3af 8000 	nop.w
 8002a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a24:	4681      	mov	r9, r0
 8002a26:	d1d6      	bne.n	80029d6 <_svfiprintf_r+0x166>
 8002a28:	89a3      	ldrh	r3, [r4, #12]
 8002a2a:	065b      	lsls	r3, r3, #25
 8002a2c:	f53f af35 	bmi.w	800289a <_svfiprintf_r+0x2a>
 8002a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a32:	b01d      	add	sp, #116	; 0x74
 8002a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a38:	ab03      	add	r3, sp, #12
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <_svfiprintf_r+0x1ec>)
 8002a40:	a904      	add	r1, sp, #16
 8002a42:	4640      	mov	r0, r8
 8002a44:	f000 f882 	bl	8002b4c <_printf_i>
 8002a48:	e7ea      	b.n	8002a20 <_svfiprintf_r+0x1b0>
 8002a4a:	bf00      	nop
 8002a4c:	08002fc0 	.word	0x08002fc0
 8002a50:	08002fc6 	.word	0x08002fc6
 8002a54:	08002fca 	.word	0x08002fca
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	080027bd 	.word	0x080027bd

08002a60 <_printf_common>:
 8002a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	4691      	mov	r9, r2
 8002a66:	461f      	mov	r7, r3
 8002a68:	688a      	ldr	r2, [r1, #8]
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bfb8      	it	lt
 8002a74:	4613      	movlt	r3, r2
 8002a76:	f8c9 3000 	str.w	r3, [r9]
 8002a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a7e:	4606      	mov	r6, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	b112      	cbz	r2, 8002a8a <_printf_common+0x2a>
 8002a84:	3301      	adds	r3, #1
 8002a86:	f8c9 3000 	str.w	r3, [r9]
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	0699      	lsls	r1, r3, #26
 8002a8e:	bf42      	ittt	mi
 8002a90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a94:	3302      	addmi	r3, #2
 8002a96:	f8c9 3000 	strmi.w	r3, [r9]
 8002a9a:	6825      	ldr	r5, [r4, #0]
 8002a9c:	f015 0506 	ands.w	r5, r5, #6
 8002aa0:	d107      	bne.n	8002ab2 <_printf_common+0x52>
 8002aa2:	f104 0a19 	add.w	sl, r4, #25
 8002aa6:	68e3      	ldr	r3, [r4, #12]
 8002aa8:	f8d9 2000 	ldr.w	r2, [r9]
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	42ab      	cmp	r3, r5
 8002ab0:	dc28      	bgt.n	8002b04 <_printf_common+0xa4>
 8002ab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	3300      	adds	r3, #0
 8002aba:	bf18      	it	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	0692      	lsls	r2, r2, #26
 8002ac0:	d42d      	bmi.n	8002b1e <_printf_common+0xbe>
 8002ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac6:	4639      	mov	r1, r7
 8002ac8:	4630      	mov	r0, r6
 8002aca:	47c0      	blx	r8
 8002acc:	3001      	adds	r0, #1
 8002ace:	d020      	beq.n	8002b12 <_printf_common+0xb2>
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	68e5      	ldr	r5, [r4, #12]
 8002ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad8:	f003 0306 	and.w	r3, r3, #6
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	bf08      	it	eq
 8002ae0:	1aad      	subeq	r5, r5, r2
 8002ae2:	68a3      	ldr	r3, [r4, #8]
 8002ae4:	6922      	ldr	r2, [r4, #16]
 8002ae6:	bf0c      	ite	eq
 8002ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aec:	2500      	movne	r5, #0
 8002aee:	4293      	cmp	r3, r2
 8002af0:	bfc4      	itt	gt
 8002af2:	1a9b      	subgt	r3, r3, r2
 8002af4:	18ed      	addgt	r5, r5, r3
 8002af6:	f04f 0900 	mov.w	r9, #0
 8002afa:	341a      	adds	r4, #26
 8002afc:	454d      	cmp	r5, r9
 8002afe:	d11a      	bne.n	8002b36 <_printf_common+0xd6>
 8002b00:	2000      	movs	r0, #0
 8002b02:	e008      	b.n	8002b16 <_printf_common+0xb6>
 8002b04:	2301      	movs	r3, #1
 8002b06:	4652      	mov	r2, sl
 8002b08:	4639      	mov	r1, r7
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	47c0      	blx	r8
 8002b0e:	3001      	adds	r0, #1
 8002b10:	d103      	bne.n	8002b1a <_printf_common+0xba>
 8002b12:	f04f 30ff 	mov.w	r0, #4294967295
 8002b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1a:	3501      	adds	r5, #1
 8002b1c:	e7c3      	b.n	8002aa6 <_printf_common+0x46>
 8002b1e:	18e1      	adds	r1, r4, r3
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	2030      	movs	r0, #48	; 0x30
 8002b24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b28:	4422      	add	r2, r4
 8002b2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b32:	3302      	adds	r3, #2
 8002b34:	e7c5      	b.n	8002ac2 <_printf_common+0x62>
 8002b36:	2301      	movs	r3, #1
 8002b38:	4622      	mov	r2, r4
 8002b3a:	4639      	mov	r1, r7
 8002b3c:	4630      	mov	r0, r6
 8002b3e:	47c0      	blx	r8
 8002b40:	3001      	adds	r0, #1
 8002b42:	d0e6      	beq.n	8002b12 <_printf_common+0xb2>
 8002b44:	f109 0901 	add.w	r9, r9, #1
 8002b48:	e7d8      	b.n	8002afc <_printf_common+0x9c>
	...

08002b4c <_printf_i>:
 8002b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b54:	460c      	mov	r4, r1
 8002b56:	7e09      	ldrb	r1, [r1, #24]
 8002b58:	b085      	sub	sp, #20
 8002b5a:	296e      	cmp	r1, #110	; 0x6e
 8002b5c:	4617      	mov	r7, r2
 8002b5e:	4606      	mov	r6, r0
 8002b60:	4698      	mov	r8, r3
 8002b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b64:	f000 80b3 	beq.w	8002cce <_printf_i+0x182>
 8002b68:	d822      	bhi.n	8002bb0 <_printf_i+0x64>
 8002b6a:	2963      	cmp	r1, #99	; 0x63
 8002b6c:	d036      	beq.n	8002bdc <_printf_i+0x90>
 8002b6e:	d80a      	bhi.n	8002b86 <_printf_i+0x3a>
 8002b70:	2900      	cmp	r1, #0
 8002b72:	f000 80b9 	beq.w	8002ce8 <_printf_i+0x19c>
 8002b76:	2958      	cmp	r1, #88	; 0x58
 8002b78:	f000 8083 	beq.w	8002c82 <_printf_i+0x136>
 8002b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b84:	e032      	b.n	8002bec <_printf_i+0xa0>
 8002b86:	2964      	cmp	r1, #100	; 0x64
 8002b88:	d001      	beq.n	8002b8e <_printf_i+0x42>
 8002b8a:	2969      	cmp	r1, #105	; 0x69
 8002b8c:	d1f6      	bne.n	8002b7c <_printf_i+0x30>
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	0605      	lsls	r5, r0, #24
 8002b94:	f103 0104 	add.w	r1, r3, #4
 8002b98:	d52a      	bpl.n	8002bf0 <_printf_i+0xa4>
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da03      	bge.n	8002baa <_printf_i+0x5e>
 8002ba2:	222d      	movs	r2, #45	; 0x2d
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002baa:	486f      	ldr	r0, [pc, #444]	; (8002d68 <_printf_i+0x21c>)
 8002bac:	220a      	movs	r2, #10
 8002bae:	e039      	b.n	8002c24 <_printf_i+0xd8>
 8002bb0:	2973      	cmp	r1, #115	; 0x73
 8002bb2:	f000 809d 	beq.w	8002cf0 <_printf_i+0x1a4>
 8002bb6:	d808      	bhi.n	8002bca <_printf_i+0x7e>
 8002bb8:	296f      	cmp	r1, #111	; 0x6f
 8002bba:	d020      	beq.n	8002bfe <_printf_i+0xb2>
 8002bbc:	2970      	cmp	r1, #112	; 0x70
 8002bbe:	d1dd      	bne.n	8002b7c <_printf_i+0x30>
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	f043 0320 	orr.w	r3, r3, #32
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	e003      	b.n	8002bd2 <_printf_i+0x86>
 8002bca:	2975      	cmp	r1, #117	; 0x75
 8002bcc:	d017      	beq.n	8002bfe <_printf_i+0xb2>
 8002bce:	2978      	cmp	r1, #120	; 0x78
 8002bd0:	d1d4      	bne.n	8002b7c <_printf_i+0x30>
 8002bd2:	2378      	movs	r3, #120	; 0x78
 8002bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bd8:	4864      	ldr	r0, [pc, #400]	; (8002d6c <_printf_i+0x220>)
 8002bda:	e055      	b.n	8002c88 <_printf_i+0x13c>
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	1d19      	adds	r1, r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6011      	str	r1, [r2, #0]
 8002be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bec:	2301      	movs	r3, #1
 8002bee:	e08c      	b.n	8002d0a <_printf_i+0x1be>
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6011      	str	r1, [r2, #0]
 8002bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bf8:	bf18      	it	ne
 8002bfa:	b21b      	sxthne	r3, r3
 8002bfc:	e7cf      	b.n	8002b9e <_printf_i+0x52>
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	6825      	ldr	r5, [r4, #0]
 8002c02:	1d18      	adds	r0, r3, #4
 8002c04:	6010      	str	r0, [r2, #0]
 8002c06:	0628      	lsls	r0, r5, #24
 8002c08:	d501      	bpl.n	8002c0e <_printf_i+0xc2>
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e002      	b.n	8002c14 <_printf_i+0xc8>
 8002c0e:	0668      	lsls	r0, r5, #25
 8002c10:	d5fb      	bpl.n	8002c0a <_printf_i+0xbe>
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	4854      	ldr	r0, [pc, #336]	; (8002d68 <_printf_i+0x21c>)
 8002c16:	296f      	cmp	r1, #111	; 0x6f
 8002c18:	bf14      	ite	ne
 8002c1a:	220a      	movne	r2, #10
 8002c1c:	2208      	moveq	r2, #8
 8002c1e:	2100      	movs	r1, #0
 8002c20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c24:	6865      	ldr	r5, [r4, #4]
 8002c26:	60a5      	str	r5, [r4, #8]
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	f2c0 8095 	blt.w	8002d58 <_printf_i+0x20c>
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	f021 0104 	bic.w	r1, r1, #4
 8002c34:	6021      	str	r1, [r4, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d13d      	bne.n	8002cb6 <_printf_i+0x16a>
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	f040 808e 	bne.w	8002d5c <_printf_i+0x210>
 8002c40:	4665      	mov	r5, ip
 8002c42:	2a08      	cmp	r2, #8
 8002c44:	d10b      	bne.n	8002c5e <_printf_i+0x112>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	07db      	lsls	r3, r3, #31
 8002c4a:	d508      	bpl.n	8002c5e <_printf_i+0x112>
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	6862      	ldr	r2, [r4, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	bfde      	ittt	le
 8002c54:	2330      	movle	r3, #48	; 0x30
 8002c56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c5e:	ebac 0305 	sub.w	r3, ip, r5
 8002c62:	6123      	str	r3, [r4, #16]
 8002c64:	f8cd 8000 	str.w	r8, [sp]
 8002c68:	463b      	mov	r3, r7
 8002c6a:	aa03      	add	r2, sp, #12
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7ff fef6 	bl	8002a60 <_printf_common>
 8002c74:	3001      	adds	r0, #1
 8002c76:	d14d      	bne.n	8002d14 <_printf_i+0x1c8>
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	b005      	add	sp, #20
 8002c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c82:	4839      	ldr	r0, [pc, #228]	; (8002d68 <_printf_i+0x21c>)
 8002c84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	6821      	ldr	r1, [r4, #0]
 8002c8c:	1d1d      	adds	r5, r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6015      	str	r5, [r2, #0]
 8002c92:	060a      	lsls	r2, r1, #24
 8002c94:	d50b      	bpl.n	8002cae <_printf_i+0x162>
 8002c96:	07ca      	lsls	r2, r1, #31
 8002c98:	bf44      	itt	mi
 8002c9a:	f041 0120 	orrmi.w	r1, r1, #32
 8002c9e:	6021      	strmi	r1, [r4, #0]
 8002ca0:	b91b      	cbnz	r3, 8002caa <_printf_i+0x15e>
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	f022 0220 	bic.w	r2, r2, #32
 8002ca8:	6022      	str	r2, [r4, #0]
 8002caa:	2210      	movs	r2, #16
 8002cac:	e7b7      	b.n	8002c1e <_printf_i+0xd2>
 8002cae:	064d      	lsls	r5, r1, #25
 8002cb0:	bf48      	it	mi
 8002cb2:	b29b      	uxthmi	r3, r3
 8002cb4:	e7ef      	b.n	8002c96 <_printf_i+0x14a>
 8002cb6:	4665      	mov	r5, ip
 8002cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cbc:	fb02 3311 	mls	r3, r2, r1, r3
 8002cc0:	5cc3      	ldrb	r3, [r0, r3]
 8002cc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d1f5      	bne.n	8002cb8 <_printf_i+0x16c>
 8002ccc:	e7b9      	b.n	8002c42 <_printf_i+0xf6>
 8002cce:	6813      	ldr	r3, [r2, #0]
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	6961      	ldr	r1, [r4, #20]
 8002cd4:	1d18      	adds	r0, r3, #4
 8002cd6:	6010      	str	r0, [r2, #0]
 8002cd8:	0628      	lsls	r0, r5, #24
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	d501      	bpl.n	8002ce2 <_printf_i+0x196>
 8002cde:	6019      	str	r1, [r3, #0]
 8002ce0:	e002      	b.n	8002ce8 <_printf_i+0x19c>
 8002ce2:	066a      	lsls	r2, r5, #25
 8002ce4:	d5fb      	bpl.n	8002cde <_printf_i+0x192>
 8002ce6:	8019      	strh	r1, [r3, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	4665      	mov	r5, ip
 8002cee:	e7b9      	b.n	8002c64 <_printf_i+0x118>
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	1d19      	adds	r1, r3, #4
 8002cf4:	6011      	str	r1, [r2, #0]
 8002cf6:	681d      	ldr	r5, [r3, #0]
 8002cf8:	6862      	ldr	r2, [r4, #4]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	f7fd fa97 	bl	8000230 <memchr>
 8002d02:	b108      	cbz	r0, 8002d08 <_printf_i+0x1bc>
 8002d04:	1b40      	subs	r0, r0, r5
 8002d06:	6060      	str	r0, [r4, #4]
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	6123      	str	r3, [r4, #16]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d12:	e7a7      	b.n	8002c64 <_printf_i+0x118>
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	462a      	mov	r2, r5
 8002d18:	4639      	mov	r1, r7
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	47c0      	blx	r8
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d0aa      	beq.n	8002c78 <_printf_i+0x12c>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	079b      	lsls	r3, r3, #30
 8002d26:	d413      	bmi.n	8002d50 <_printf_i+0x204>
 8002d28:	68e0      	ldr	r0, [r4, #12]
 8002d2a:	9b03      	ldr	r3, [sp, #12]
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	bfb8      	it	lt
 8002d30:	4618      	movlt	r0, r3
 8002d32:	e7a3      	b.n	8002c7c <_printf_i+0x130>
 8002d34:	2301      	movs	r3, #1
 8002d36:	464a      	mov	r2, r9
 8002d38:	4639      	mov	r1, r7
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	47c0      	blx	r8
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d09a      	beq.n	8002c78 <_printf_i+0x12c>
 8002d42:	3501      	adds	r5, #1
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	9a03      	ldr	r2, [sp, #12]
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	42ab      	cmp	r3, r5
 8002d4c:	dcf2      	bgt.n	8002d34 <_printf_i+0x1e8>
 8002d4e:	e7eb      	b.n	8002d28 <_printf_i+0x1dc>
 8002d50:	2500      	movs	r5, #0
 8002d52:	f104 0919 	add.w	r9, r4, #25
 8002d56:	e7f5      	b.n	8002d44 <_printf_i+0x1f8>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ac      	bne.n	8002cb6 <_printf_i+0x16a>
 8002d5c:	7803      	ldrb	r3, [r0, #0]
 8002d5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d66:	e76c      	b.n	8002c42 <_printf_i+0xf6>
 8002d68:	08002fd1 	.word	0x08002fd1
 8002d6c:	08002fe2 	.word	0x08002fe2

08002d70 <memcpy>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	1e43      	subs	r3, r0, #1
 8002d74:	440a      	add	r2, r1
 8002d76:	4291      	cmp	r1, r2
 8002d78:	d100      	bne.n	8002d7c <memcpy+0xc>
 8002d7a:	bd10      	pop	{r4, pc}
 8002d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d84:	e7f7      	b.n	8002d76 <memcpy+0x6>

08002d86 <memmove>:
 8002d86:	4288      	cmp	r0, r1
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	eb01 0302 	add.w	r3, r1, r2
 8002d8e:	d807      	bhi.n	8002da0 <memmove+0x1a>
 8002d90:	1e42      	subs	r2, r0, #1
 8002d92:	4299      	cmp	r1, r3
 8002d94:	d00a      	beq.n	8002dac <memmove+0x26>
 8002d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d9e:	e7f8      	b.n	8002d92 <memmove+0xc>
 8002da0:	4283      	cmp	r3, r0
 8002da2:	d9f5      	bls.n	8002d90 <memmove+0xa>
 8002da4:	1881      	adds	r1, r0, r2
 8002da6:	1ad2      	subs	r2, r2, r3
 8002da8:	42d3      	cmn	r3, r2
 8002daa:	d100      	bne.n	8002dae <memmove+0x28>
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002db2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002db6:	e7f7      	b.n	8002da8 <memmove+0x22>

08002db8 <_free_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	4605      	mov	r5, r0
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	d045      	beq.n	8002e4c <_free_r+0x94>
 8002dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc4:	1f0c      	subs	r4, r1, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bfb8      	it	lt
 8002dca:	18e4      	addlt	r4, r4, r3
 8002dcc:	f000 f8d2 	bl	8002f74 <__malloc_lock>
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <_free_r+0x98>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	b933      	cbnz	r3, 8002de6 <_free_r+0x2e>
 8002dd8:	6063      	str	r3, [r4, #4]
 8002dda:	6014      	str	r4, [r2, #0]
 8002ddc:	4628      	mov	r0, r5
 8002dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002de2:	f000 b8c8 	b.w	8002f76 <__malloc_unlock>
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	d90c      	bls.n	8002e04 <_free_r+0x4c>
 8002dea:	6821      	ldr	r1, [r4, #0]
 8002dec:	1862      	adds	r2, r4, r1
 8002dee:	4293      	cmp	r3, r2
 8002df0:	bf04      	itt	eq
 8002df2:	681a      	ldreq	r2, [r3, #0]
 8002df4:	685b      	ldreq	r3, [r3, #4]
 8002df6:	6063      	str	r3, [r4, #4]
 8002df8:	bf04      	itt	eq
 8002dfa:	1852      	addeq	r2, r2, r1
 8002dfc:	6022      	streq	r2, [r4, #0]
 8002dfe:	6004      	str	r4, [r0, #0]
 8002e00:	e7ec      	b.n	8002ddc <_free_r+0x24>
 8002e02:	4613      	mov	r3, r2
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	b10a      	cbz	r2, 8002e0c <_free_r+0x54>
 8002e08:	42a2      	cmp	r2, r4
 8002e0a:	d9fa      	bls.n	8002e02 <_free_r+0x4a>
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	1858      	adds	r0, r3, r1
 8002e10:	42a0      	cmp	r0, r4
 8002e12:	d10b      	bne.n	8002e2c <_free_r+0x74>
 8002e14:	6820      	ldr	r0, [r4, #0]
 8002e16:	4401      	add	r1, r0
 8002e18:	1858      	adds	r0, r3, r1
 8002e1a:	4282      	cmp	r2, r0
 8002e1c:	6019      	str	r1, [r3, #0]
 8002e1e:	d1dd      	bne.n	8002ddc <_free_r+0x24>
 8002e20:	6810      	ldr	r0, [r2, #0]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	4401      	add	r1, r0
 8002e28:	6019      	str	r1, [r3, #0]
 8002e2a:	e7d7      	b.n	8002ddc <_free_r+0x24>
 8002e2c:	d902      	bls.n	8002e34 <_free_r+0x7c>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	602b      	str	r3, [r5, #0]
 8002e32:	e7d3      	b.n	8002ddc <_free_r+0x24>
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	1821      	adds	r1, r4, r0
 8002e38:	428a      	cmp	r2, r1
 8002e3a:	bf04      	itt	eq
 8002e3c:	6811      	ldreq	r1, [r2, #0]
 8002e3e:	6852      	ldreq	r2, [r2, #4]
 8002e40:	6062      	str	r2, [r4, #4]
 8002e42:	bf04      	itt	eq
 8002e44:	1809      	addeq	r1, r1, r0
 8002e46:	6021      	streq	r1, [r4, #0]
 8002e48:	605c      	str	r4, [r3, #4]
 8002e4a:	e7c7      	b.n	8002ddc <_free_r+0x24>
 8002e4c:	bd38      	pop	{r3, r4, r5, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000090 	.word	0x20000090

08002e54 <_malloc_r>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	1ccd      	adds	r5, r1, #3
 8002e58:	f025 0503 	bic.w	r5, r5, #3
 8002e5c:	3508      	adds	r5, #8
 8002e5e:	2d0c      	cmp	r5, #12
 8002e60:	bf38      	it	cc
 8002e62:	250c      	movcc	r5, #12
 8002e64:	2d00      	cmp	r5, #0
 8002e66:	4606      	mov	r6, r0
 8002e68:	db01      	blt.n	8002e6e <_malloc_r+0x1a>
 8002e6a:	42a9      	cmp	r1, r5
 8002e6c:	d903      	bls.n	8002e76 <_malloc_r+0x22>
 8002e6e:	230c      	movs	r3, #12
 8002e70:	6033      	str	r3, [r6, #0]
 8002e72:	2000      	movs	r0, #0
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	f000 f87d 	bl	8002f74 <__malloc_lock>
 8002e7a:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <_malloc_r+0xac>)
 8002e7c:	6814      	ldr	r4, [r2, #0]
 8002e7e:	4621      	mov	r1, r4
 8002e80:	b991      	cbnz	r1, 8002ea8 <_malloc_r+0x54>
 8002e82:	4c20      	ldr	r4, [pc, #128]	; (8002f04 <_malloc_r+0xb0>)
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	b91b      	cbnz	r3, 8002e90 <_malloc_r+0x3c>
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f000 f863 	bl	8002f54 <_sbrk_r>
 8002e8e:	6020      	str	r0, [r4, #0]
 8002e90:	4629      	mov	r1, r5
 8002e92:	4630      	mov	r0, r6
 8002e94:	f000 f85e 	bl	8002f54 <_sbrk_r>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d124      	bne.n	8002ee6 <_malloc_r+0x92>
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	6033      	str	r3, [r6, #0]
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f000 f868 	bl	8002f76 <__malloc_unlock>
 8002ea6:	e7e4      	b.n	8002e72 <_malloc_r+0x1e>
 8002ea8:	680b      	ldr	r3, [r1, #0]
 8002eaa:	1b5b      	subs	r3, r3, r5
 8002eac:	d418      	bmi.n	8002ee0 <_malloc_r+0x8c>
 8002eae:	2b0b      	cmp	r3, #11
 8002eb0:	d90f      	bls.n	8002ed2 <_malloc_r+0x7e>
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	50cd      	str	r5, [r1, r3]
 8002eb6:	18cc      	adds	r4, r1, r3
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f000 f85c 	bl	8002f76 <__malloc_unlock>
 8002ebe:	f104 000b 	add.w	r0, r4, #11
 8002ec2:	1d23      	adds	r3, r4, #4
 8002ec4:	f020 0007 	bic.w	r0, r0, #7
 8002ec8:	1ac3      	subs	r3, r0, r3
 8002eca:	d0d3      	beq.n	8002e74 <_malloc_r+0x20>
 8002ecc:	425a      	negs	r2, r3
 8002ece:	50e2      	str	r2, [r4, r3]
 8002ed0:	e7d0      	b.n	8002e74 <_malloc_r+0x20>
 8002ed2:	428c      	cmp	r4, r1
 8002ed4:	684b      	ldr	r3, [r1, #4]
 8002ed6:	bf16      	itet	ne
 8002ed8:	6063      	strne	r3, [r4, #4]
 8002eda:	6013      	streq	r3, [r2, #0]
 8002edc:	460c      	movne	r4, r1
 8002ede:	e7eb      	b.n	8002eb8 <_malloc_r+0x64>
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	6849      	ldr	r1, [r1, #4]
 8002ee4:	e7cc      	b.n	8002e80 <_malloc_r+0x2c>
 8002ee6:	1cc4      	adds	r4, r0, #3
 8002ee8:	f024 0403 	bic.w	r4, r4, #3
 8002eec:	42a0      	cmp	r0, r4
 8002eee:	d005      	beq.n	8002efc <_malloc_r+0xa8>
 8002ef0:	1a21      	subs	r1, r4, r0
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f000 f82e 	bl	8002f54 <_sbrk_r>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d0cf      	beq.n	8002e9c <_malloc_r+0x48>
 8002efc:	6025      	str	r5, [r4, #0]
 8002efe:	e7db      	b.n	8002eb8 <_malloc_r+0x64>
 8002f00:	20000090 	.word	0x20000090
 8002f04:	20000094 	.word	0x20000094

08002f08 <_realloc_r>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	4607      	mov	r7, r0
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	460e      	mov	r6, r1
 8002f10:	b921      	cbnz	r1, 8002f1c <_realloc_r+0x14>
 8002f12:	4611      	mov	r1, r2
 8002f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f18:	f7ff bf9c 	b.w	8002e54 <_malloc_r>
 8002f1c:	b922      	cbnz	r2, 8002f28 <_realloc_r+0x20>
 8002f1e:	f7ff ff4b 	bl	8002db8 <_free_r>
 8002f22:	4625      	mov	r5, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f28:	f000 f826 	bl	8002f78 <_malloc_usable_size_r>
 8002f2c:	42a0      	cmp	r0, r4
 8002f2e:	d20f      	bcs.n	8002f50 <_realloc_r+0x48>
 8002f30:	4621      	mov	r1, r4
 8002f32:	4638      	mov	r0, r7
 8002f34:	f7ff ff8e 	bl	8002e54 <_malloc_r>
 8002f38:	4605      	mov	r5, r0
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d0f2      	beq.n	8002f24 <_realloc_r+0x1c>
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4622      	mov	r2, r4
 8002f42:	f7ff ff15 	bl	8002d70 <memcpy>
 8002f46:	4631      	mov	r1, r6
 8002f48:	4638      	mov	r0, r7
 8002f4a:	f7ff ff35 	bl	8002db8 <_free_r>
 8002f4e:	e7e9      	b.n	8002f24 <_realloc_r+0x1c>
 8002f50:	4635      	mov	r5, r6
 8002f52:	e7e7      	b.n	8002f24 <_realloc_r+0x1c>

08002f54 <_sbrk_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4c06      	ldr	r4, [pc, #24]	; (8002f70 <_sbrk_r+0x1c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	f7fd fd74 	bl	8000a4c <_sbrk>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_sbrk_r+0x1a>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_sbrk_r+0x1a>
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000128 	.word	0x20000128

08002f74 <__malloc_lock>:
 8002f74:	4770      	bx	lr

08002f76 <__malloc_unlock>:
 8002f76:	4770      	bx	lr

08002f78 <_malloc_usable_size_r>:
 8002f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f7c:	1f18      	subs	r0, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bfbc      	itt	lt
 8002f82:	580b      	ldrlt	r3, [r1, r0]
 8002f84:	18c0      	addlt	r0, r0, r3
 8002f86:	4770      	bx	lr

08002f88 <_init>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr

08002f94 <_fini>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr
