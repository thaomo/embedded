
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  20000010  08005074  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a00  08005074  00024a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175aa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c8e  00000000  00000000  000375ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  0003a278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  0003b558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002d8a  00000000  00000000  0003c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eeaf  00000000  00000000  0003f47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5337  00000000  00000000  0004e329  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  001236dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004ffc 	.word	0x08004ffc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004ffc 	.word	0x08004ffc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	; 0x48
 8000524:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fa9b 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f841 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8c7 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f89b 	bl	800066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000536:	f001 ffe9 	bl	800250c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  const osThreadAttr_t blink01_attributes = {
 800053a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053e:	2224      	movs	r2, #36	; 0x24
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fd51 	bl	8004fea <memset>
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <main+0x78>)
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000550:	2318      	movs	r3, #24
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "blink01",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000558:	461a      	mov	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	480f      	ldr	r0, [pc, #60]	; (800059c <main+0x7c>)
 800055e:	f002 f83f 	bl	80025e0 <osThreadNew>
 8000562:	4602      	mov	r2, r0
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <main+0x80>)
 8000566:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  const osThreadAttr_t blink02_attributes = {
 8000568:	463b      	mov	r3, r7
 800056a:	2224      	movs	r2, #36	; 0x24
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fd3b 	bl	8004fea <memset>
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <main+0x84>)
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	2310      	movs	r3, #16
 800057e:	61bb      	str	r3, [r7, #24]
    .name = "blink02",
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 128
  };
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000580:	463b      	mov	r3, r7
 8000582:	461a      	mov	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <main+0x88>)
 8000588:	f002 f82a 	bl	80025e0 <osThreadNew>
 800058c:	4602      	mov	r2, r0
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0x8c>)
 8000590:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f001 ffef 	bl	8002574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x76>
 8000598:	08005014 	.word	0x08005014
 800059c:	0800078d 	.word	0x0800078d
 80005a0:	20004974 	.word	0x20004974
 80005a4:	0800501c 	.word	0x0800501c
 80005a8:	080007ad 	.word	0x080007ad
 80005ac:	20004978 	.word	0x20004978

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fd13 	bl	8004fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xb4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xb4>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <SystemClock_Config+0xb8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <SystemClock_Config+0xb8>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f000 ff05 	bl	8001430 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800062c:	f000 f8e0 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fcf2 	bl	8001034 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000656:	f000 f8cb 	bl	80007f0 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f001 fb44 	bl	8001d30 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f89f 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20004934 	.word	0x20004934
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_GPIO_Init+0xc0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <MX_GPIO_Init+0xc0>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xc0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0xc0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_GPIO_Init+0xc0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xc0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_GPIO_Init+0xc0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <MX_GPIO_Init+0xc0>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xc0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2108      	movs	r1, #8
 800072e:	4815      	ldr	r0, [pc, #84]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000730:	f000 fc4c 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_GPIO_Init+0xc8>)
 800073a:	f000 fc47 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800073e:	2308      	movs	r3, #8
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0xc4>)
 8000756:	f000 faa7 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800075a:	2320      	movs	r3, #32
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_GPIO_Init+0xc8>)
 8000772:	f000 fa99 	bl	8000ca8 <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40021000 	.word	0x40021000
 8000788:	40020800 	.word	0x40020800

0800078c <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000794:	2120      	movs	r1, #32
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <StartBlink01+0x1c>)
 8000798:	f000 fc31 	bl	8000ffe <HAL_GPIO_TogglePin>
    osDelay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f001 ffc4 	bl	800272c <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007a4:	e7f6      	b.n	8000794 <StartBlink01+0x8>
 80007a6:	bf00      	nop
 80007a8:	40020000 	.word	0x40020000

080007ac <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b4:	2120      	movs	r1, #32
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <StartBlink02+0x1c>)
 80007b8:	f000 fc21 	bl	8000ffe <HAL_GPIO_TogglePin>
    osDelay(600);
 80007bc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80007c0:	f001 ffb4 	bl	800272c <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c4:	e7f6      	b.n	80007b4 <StartBlink02+0x8>
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 f961 	bl	8000aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40001000 	.word	0x40001000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fa05 	bl	8000c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x84>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d12b      	bne.n	80008d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_UART_MspInit+0x88>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_UART_MspInit+0x88>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 80008ce:	f000 f9eb 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f000 f9a9 	bl	8000c54 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000902:	2036      	movs	r0, #54	; 0x36
 8000904:	f000 f9c2 	bl	8000c8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_InitTick+0xa0>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <HAL_InitTick+0xa0>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_InitTick+0xa0>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fd4c 	bl	80013cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000934:	f000 fd22 	bl	800137c <HAL_RCC_GetPCLK1Freq>
 8000938:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093c:	4a13      	ldr	r2, [pc, #76]	; (800098c <HAL_InitTick+0xa4>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	3b01      	subs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_InitTick+0xa8>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <HAL_InitTick+0xac>)
 800094c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_InitTick+0xa8>)
 8000950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000954:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_InitTick+0xa8>)
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_InitTick+0xa8>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_InitTick+0xa8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <HAL_InitTick+0xa8>)
 800096a:	f000 ffa3 	bl	80018b4 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <HAL_InitTick+0xa8>)
 8000976:	f000 ffd2 	bl	800191e <HAL_TIM_Base_Start_IT>
 800097a:	4603      	mov	r3, r0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3730      	adds	r7, #48	; 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	431bde83 	.word	0x431bde83
 8000990:	2000497c 	.word	0x2000497c
 8000994:	40001000 	.word	0x40001000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM6_DAC_IRQHandler+0x10>)
 80009d2:	f000 ffc8 	bl	8001966 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000497c 	.word	0x2000497c

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemInit+0x28>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SystemInit+0x28>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SystemInit+0x28>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	609a      	str	r2, [r3, #8]
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
  ldr  r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd3 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f004 faa7 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fd6f 	bl	8000520 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a44:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000a48:	08005064 	.word	0x08005064
  ldr  r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a50:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a54:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a58:	20004a00 	.word	0x20004a00

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f8d8 	bl	8000c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff ff2a 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff feb4 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	200049bc 	.word	0x200049bc

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200049bc 	.word	0x200049bc

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <__NVIC_EnableIRQ+0x38>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff4c 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c66:	f7ff ff61 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	6978      	ldr	r0, [r7, #20]
 8000c72:	f7ff ffb1 	bl	8000bd8 <NVIC_EncodePriority>
 8000c76:	4602      	mov	r2, r0
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff80 	bl	8000b84 <__NVIC_SetPriority>
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff54 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e165      	b.n	8000f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f040 8154 	bne.w	8000f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d00b      	beq.n	8000d02 <HAL_GPIO_Init+0x5a>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d007      	beq.n	8000d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf6:	2b11      	cmp	r3, #17
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0xfc>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b12      	cmp	r3, #18
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	69b9      	ldr	r1, [r7, #24]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80ae 	beq.w	8000f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a5b      	ldr	r2, [pc, #364]	; (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4a:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <HAL_GPIO_Init+0x304>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x21a>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4d      	ldr	r2, [pc, #308]	; (8000fb0 <HAL_GPIO_Init+0x308>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x216>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x30c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x212>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4b      	ldr	r2, [pc, #300]	; (8000fb8 <HAL_GPIO_Init+0x310>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x20e>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x20a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x206>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x202>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x21c>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f30:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_GPIO_Init+0x320>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f ae96 	bls.w	8000cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3724      	adds	r7, #36	; 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	40013c00 	.word	0x40013c00

08000fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fdc:	787b      	ldrb	r3, [r7, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe8:	e003      	b.n	8000ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	041a      	lsls	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	401a      	ands	r2, r3
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	429a      	cmp	r2, r3
 8001016:	d104      	bne.n	8001022 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	041a      	lsls	r2, r3, #16
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001020:	e002      	b.n	8001028 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0cc      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001048:	4b68      	ldr	r3, [pc, #416]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d90c      	bls.n	8001070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b65      	ldr	r3, [pc, #404]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0b8      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	494d      	ldr	r1, [pc, #308]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d044      	beq.n	8001154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d107      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d119      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e07f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f2:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e06f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e067      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 0203 	bic.w	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	4313      	orrs	r3, r2
 8001122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001124:	f7ff fcd2 	bl	8000acc <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	e00a      	b.n	8001142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff fcce 	bl	8000acc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f241 3288 	movw	r2, #5000	; 0x1388
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e04f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 020c 	and.w	r2, r3, #12
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	429a      	cmp	r2, r3
 8001152:	d1eb      	bne.n	800112c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20c      	bcs.n	800117c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e032      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4916      	ldr	r1, [pc, #88]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ba:	f000 f821 	bl	8001200 <HAL_RCC_GetSysClockFreq>
 80011be:	4601      	mov	r1, r0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	fa21 f303 	lsr.w	r3, r1, r3
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fb84 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00
 80011f0:	40023800 	.word	0x40023800
 80011f4:	0800503c 	.word	0x0800503c
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b04      	cmp	r3, #4
 8001220:	d007      	beq.n	8001232 <HAL_RCC_GetSysClockFreq+0x32>
 8001222:	2b08      	cmp	r3, #8
 8001224:	d008      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x38>
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 808d 	bne.w	8001346 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_GetSysClockFreq+0x15c>)
 800122e:	60bb      	str	r3, [r7, #8]
       break;
 8001230:	e08c      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 8001234:	60bb      	str	r3, [r7, #8]
      break;
 8001236:	e089      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001238:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d023      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	099b      	lsrs	r3, r3, #6
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	ea03 0501 	and.w	r5, r3, r1
 8001264:	ea04 0602 	and.w	r6, r4, r2
 8001268:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 800126a:	fb02 f106 	mul.w	r1, r2, r6
 800126e:	2200      	movs	r2, #0
 8001270:	fb02 f205 	mul.w	r2, r2, r5
 8001274:	440a      	add	r2, r1
 8001276:	493a      	ldr	r1, [pc, #232]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 8001278:	fba5 0101 	umull	r0, r1, r5, r1
 800127c:	1853      	adds	r3, r2, r1
 800127e:	4619      	mov	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f04f 0400 	mov.w	r4, #0
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	f7fe ffc9 	bl	8000220 <__aeabi_uldivmod>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e049      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	099b      	lsrs	r3, r3, #6
 800129c:	f04f 0400 	mov.w	r4, #0
 80012a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	ea03 0501 	and.w	r5, r3, r1
 80012ac:	ea04 0602 	and.w	r6, r4, r2
 80012b0:	4629      	mov	r1, r5
 80012b2:	4632      	mov	r2, r6
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	0154      	lsls	r4, r2, #5
 80012be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012c2:	014b      	lsls	r3, r1, #5
 80012c4:	4619      	mov	r1, r3
 80012c6:	4622      	mov	r2, r4
 80012c8:	1b49      	subs	r1, r1, r5
 80012ca:	eb62 0206 	sbc.w	r2, r2, r6
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	f04f 0400 	mov.w	r4, #0
 80012d6:	0194      	lsls	r4, r2, #6
 80012d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012dc:	018b      	lsls	r3, r1, #6
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	eb64 0402 	sbc.w	r4, r4, r2
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	00e2      	lsls	r2, r4, #3
 80012ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012f2:	00d9      	lsls	r1, r3, #3
 80012f4:	460b      	mov	r3, r1
 80012f6:	4614      	mov	r4, r2
 80012f8:	195b      	adds	r3, r3, r5
 80012fa:	eb44 0406 	adc.w	r4, r4, r6
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	02a2      	lsls	r2, r4, #10
 8001308:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800130c:	0299      	lsls	r1, r3, #10
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	4618      	mov	r0, r3
 8001314:	4621      	mov	r1, r4
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f04f 0400 	mov.w	r4, #0
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	f7fe ff7e 	bl	8000220 <__aeabi_uldivmod>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	3301      	adds	r3, #1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	60bb      	str	r3, [r7, #8]
      break;
 8001344:	e002      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001348:	60bb      	str	r3, [r7, #8]
      break;
 800134a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800134c:	68bb      	ldr	r3, [r7, #8]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	00f42400 	.word	0x00f42400
 8001360:	017d7840 	.word	0x017d7840

08001364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_RCC_GetHCLKFreq+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000

0800137c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001380:	f7ff fff0 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 8001384:	4601      	mov	r1, r0
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	0a9b      	lsrs	r3, r3, #10
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	0800504c 	.word	0x0800504c

080013a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013a8:	f7ff ffdc 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 80013ac:	4601      	mov	r1, r0
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0b5b      	lsrs	r3, r3, #13
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	0800504c 	.word	0x0800504c

080013cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	220f      	movs	r2, #15
 80013da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_GetClockConfig+0x60>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 020f 	and.w	r2, r3, #15
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d075      	beq.n	8001534 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001448:	4ba2      	ldr	r3, [pc, #648]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001454:	4b9f      	ldr	r3, [pc, #636]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800145c:	2b08      	cmp	r3, #8
 800145e:	d112      	bne.n	8001486 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001460:	4b9c      	ldr	r3, [pc, #624]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d05b      	beq.n	8001532 <HAL_RCC_OscConfig+0x102>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d157      	bne.n	8001532 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e20b      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x6e>
 8001490:	4b90      	ldr	r3, [pc, #576]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a8f      	ldr	r2, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e01d      	b.n	80014da <HAL_RCC_OscConfig+0xaa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x92>
 80014a8:	4b8a      	ldr	r3, [pc, #552]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a89      	ldr	r2, [pc, #548]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a86      	ldr	r2, [pc, #536]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e00b      	b.n	80014da <HAL_RCC_OscConfig+0xaa>
 80014c2:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a83      	ldr	r2, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a80      	ldr	r2, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d013      	beq.n	800150a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff faf3 	bl	8000acc <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ea:	f7ff faef 	bl	8000acc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1d0      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0xba>
 8001508:	e014      	b.n	8001534 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fadf 	bl	8000acc <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001512:	f7ff fadb 	bl	8000acc <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1bc      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0xe2>
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d063      	beq.n	8001608 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001554:	2b08      	cmp	r3, #8
 8001556:	d11c      	bne.n	8001592 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001558:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d116      	bne.n	8001592 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001564:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x14c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e190      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4952      	ldr	r1, [pc, #328]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001590:	e03a      	b.n	8001608 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d020      	beq.n	80015dc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159a:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_RCC_OscConfig+0x2a8>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa94 	bl	8000acc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa90 	bl	8000acc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e171      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	493f      	ldr	r1, [pc, #252]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
 80015da:	e015      	b.n	8001608 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <HAL_RCC_OscConfig+0x2a8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa73 	bl	8000acc <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fa6f 	bl	8000acc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e150      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d030      	beq.n	8001676 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d016      	beq.n	800164a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fa53 	bl	8000acc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fa4f 	bl	8000acc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e130      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x1fa>
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7ff fa3c 	bl	8000acc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fa38 	bl	8000acc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e119      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800166c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 809f 	beq.w	80017c2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x2a4>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d120      	bne.n	8001702 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016cc:	f7ff f9fe 	bl	8000acc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	e010      	b.n	80016f6 <HAL_RCC_OscConfig+0x2c6>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	42470000 	.word	0x42470000
 80016dc:	42470e80 	.word	0x42470e80
 80016e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7ff f9f2 	bl	8000acc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0d3      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x478>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x2e8>
 800170a:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x322>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x30a>
 8001720:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6713      	str	r3, [r2, #112]	; 0x70
 800172c:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x322>
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f9b7 	bl	8000acc <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff f9b3 	bl	8000acc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e092      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x332>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff f9a1 	bl	8000acc <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff f99d 	bl	8000acc <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e07c      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d068      	beq.n	800189c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d060      	beq.n	8001898 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d145      	bne.n	800186a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x480>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f972 	bl	8000acc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f96e 	bl	8000acc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	071b      	lsls	r3, r3, #28
 8001836:	491d      	ldr	r1, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_RCC_OscConfig+0x480>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff f943 	bl	8000acc <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff f93f 	bl	8000acc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e020      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x41a>
 8001868:	e018      	b.n	800189c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x480>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f92c 	bl	8000acc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f928 	bl	8000acc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e009      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x47c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x448>
 8001896:	e001      	b.n	800189c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	42470060 	.word	0x42470060

080018b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01d      	b.n	8001902 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f815 	bl	800190a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 f968 	bl	8001bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b06      	cmp	r3, #6
 8001946:	d007      	beq.n	8001958 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b02      	cmp	r3, #2
 800197a:	d122      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d11b      	bne.n	80019c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 0202 	mvn.w	r2, #2
 8001992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f8ee 	bl	8001b8a <HAL_TIM_IC_CaptureCallback>
 80019ae:	e005      	b.n	80019bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8e0 	bl	8001b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f8f1 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d122      	bne.n	8001a16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d11b      	bne.n	8001a16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 0204 	mvn.w	r2, #4
 80019e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8c4 	bl	8001b8a <HAL_TIM_IC_CaptureCallback>
 8001a02:	e005      	b.n	8001a10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8b6 	bl	8001b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8c7 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d122      	bne.n	8001a6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d11b      	bne.n	8001a6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0208 	mvn.w	r2, #8
 8001a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f89a 	bl	8001b8a <HAL_TIM_IC_CaptureCallback>
 8001a56:	e005      	b.n	8001a64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f88c 	bl	8001b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f89d 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d122      	bne.n	8001abe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d11b      	bne.n	8001abe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0210 	mvn.w	r2, #16
 8001a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2208      	movs	r2, #8
 8001a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f870 	bl	8001b8a <HAL_TIM_IC_CaptureCallback>
 8001aaa:	e005      	b.n	8001ab8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f862 	bl	8001b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f873 	bl	8001b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d10e      	bne.n	8001aea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0201 	mvn.w	r2, #1
 8001ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7fe fe71 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d10e      	bne.n	8001b16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	d107      	bne.n	8001b16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f903 	bl	8001d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b20:	2b40      	cmp	r3, #64	; 0x40
 8001b22:	d10e      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d107      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f838 	bl	8001bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d10e      	bne.n	8001b6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d107      	bne.n	8001b6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0220 	mvn.w	r2, #32
 8001b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8cd 	bl	8001d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <TIM_Base_SetConfig+0x114>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <TIM_Base_SetConfig+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d00f      	beq.n	8001c08 <TIM_Base_SetConfig+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3d      	ldr	r2, [pc, #244]	; (8001ce0 <TIM_Base_SetConfig+0x118>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00b      	beq.n	8001c08 <TIM_Base_SetConfig+0x40>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <TIM_Base_SetConfig+0x11c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <TIM_Base_SetConfig+0x40>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	; (8001ce8 <TIM_Base_SetConfig+0x120>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <TIM_Base_SetConfig+0x40>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <TIM_Base_SetConfig+0x124>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d108      	bne.n	8001c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <TIM_Base_SetConfig+0x114>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c28:	d027      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ce0 <TIM_Base_SetConfig+0x118>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d023      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <TIM_Base_SetConfig+0x11c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <TIM_Base_SetConfig+0x120>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01b      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <TIM_Base_SetConfig+0x124>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d017      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <TIM_Base_SetConfig+0x128>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <TIM_Base_SetConfig+0x12c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00f      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <TIM_Base_SetConfig+0x130>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00b      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <TIM_Base_SetConfig+0x134>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <TIM_Base_SetConfig+0x138>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d003      	beq.n	8001c7a <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <TIM_Base_SetConfig+0x13c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d108      	bne.n	8001c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <TIM_Base_SetConfig+0x114>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0xf8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <TIM_Base_SetConfig+0x124>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d103      	bne.n	8001cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	615a      	str	r2, [r3, #20]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40000c00 	.word	0x40000c00
 8001cec:	40010400 	.word	0x40010400
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40014400 	.word	0x40014400
 8001cf8:	40014800 	.word	0x40014800
 8001cfc:	40001800 	.word	0x40001800
 8001d00:	40001c00 	.word	0x40001c00
 8001d04:	40002000 	.word	0x40002000

08001d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e03f      	b.n	8001dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fd7e 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f829 	bl	8001dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e0e:	f023 030c 	bic.w	r3, r3, #12
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3a:	f040 8199 	bne.w	8002170 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4ac6      	ldr	r2, [pc, #792]	; (800215c <UART_SetConfig+0x390>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00f      	beq.n	8001e68 <UART_SetConfig+0x9c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4ac4      	ldr	r2, [pc, #784]	; (8002160 <UART_SetConfig+0x394>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00a      	beq.n	8001e68 <UART_SetConfig+0x9c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4ac3      	ldr	r2, [pc, #780]	; (8002164 <UART_SetConfig+0x398>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d005      	beq.n	8001e68 <UART_SetConfig+0x9c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4ac1      	ldr	r2, [pc, #772]	; (8002168 <UART_SetConfig+0x39c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	f040 80bd 	bne.w	8001fe2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e68:	f7ff fa9c 	bl	80013a4 <HAL_RCC_GetPCLK2Freq>
 8001e6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	461d      	mov	r5, r3
 8001e72:	f04f 0600 	mov.w	r6, #0
 8001e76:	46a8      	mov	r8, r5
 8001e78:	46b1      	mov	r9, r6
 8001e7a:	eb18 0308 	adds.w	r3, r8, r8
 8001e7e:	eb49 0409 	adc.w	r4, r9, r9
 8001e82:	4698      	mov	r8, r3
 8001e84:	46a1      	mov	r9, r4
 8001e86:	eb18 0805 	adds.w	r8, r8, r5
 8001e8a:	eb49 0906 	adc.w	r9, r9, r6
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ea2:	4688      	mov	r8, r1
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	eb18 0005 	adds.w	r0, r8, r5
 8001eaa:	eb49 0106 	adc.w	r1, r9, r6
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	f04f 0600 	mov.w	r6, #0
 8001eb8:	196b      	adds	r3, r5, r5
 8001eba:	eb46 0406 	adc.w	r4, r6, r6
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	f7fe f9ad 	bl	8000220 <__aeabi_uldivmod>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4ba7      	ldr	r3, [pc, #668]	; (800216c <UART_SetConfig+0x3a0>)
 8001ece:	fba3 2302 	umull	r2, r3, r3, r2
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	461d      	mov	r5, r3
 8001edc:	f04f 0600 	mov.w	r6, #0
 8001ee0:	46a9      	mov	r9, r5
 8001ee2:	46b2      	mov	sl, r6
 8001ee4:	eb19 0309 	adds.w	r3, r9, r9
 8001ee8:	eb4a 040a 	adc.w	r4, sl, sl
 8001eec:	4699      	mov	r9, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	eb19 0905 	adds.w	r9, r9, r5
 8001ef4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f0c:	4689      	mov	r9, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	eb19 0005 	adds.w	r0, r9, r5
 8001f14:	eb4a 0106 	adc.w	r1, sl, r6
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	f04f 0600 	mov.w	r6, #0
 8001f22:	196b      	adds	r3, r5, r5
 8001f24:	eb46 0406 	adc.w	r4, r6, r6
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	f7fe f978 	bl	8000220 <__aeabi_uldivmod>
 8001f30:	4603      	mov	r3, r0
 8001f32:	460c      	mov	r4, r1
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <UART_SetConfig+0x3a0>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	2164      	movs	r1, #100	; 0x64
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	3332      	adds	r3, #50	; 0x32
 8001f4a:	4a88      	ldr	r2, [pc, #544]	; (800216c <UART_SetConfig+0x3a0>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f58:	4498      	add	r8, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	f04f 0600 	mov.w	r6, #0
 8001f62:	46a9      	mov	r9, r5
 8001f64:	46b2      	mov	sl, r6
 8001f66:	eb19 0309 	adds.w	r3, r9, r9
 8001f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f6e:	4699      	mov	r9, r3
 8001f70:	46a2      	mov	sl, r4
 8001f72:	eb19 0905 	adds.w	r9, r9, r5
 8001f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f8e:	4689      	mov	r9, r1
 8001f90:	4692      	mov	sl, r2
 8001f92:	eb19 0005 	adds.w	r0, r9, r5
 8001f96:	eb4a 0106 	adc.w	r1, sl, r6
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	f04f 0600 	mov.w	r6, #0
 8001fa4:	196b      	adds	r3, r5, r5
 8001fa6:	eb46 0406 	adc.w	r4, r6, r6
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	f7fe f937 	bl	8000220 <__aeabi_uldivmod>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <UART_SetConfig+0x3a0>)
 8001fba:	fba3 1302 	umull	r1, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2164      	movs	r1, #100	; 0x64
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	3332      	adds	r3, #50	; 0x32
 8001fcc:	4a67      	ldr	r2, [pc, #412]	; (800216c <UART_SetConfig+0x3a0>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 0207 	and.w	r2, r3, #7
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4442      	add	r2, r8
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	e27d      	b.n	80024de <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fe2:	f7ff f9cb 	bl	800137c <HAL_RCC_GetPCLK1Freq>
 8001fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	461d      	mov	r5, r3
 8001fec:	f04f 0600 	mov.w	r6, #0
 8001ff0:	46a8      	mov	r8, r5
 8001ff2:	46b1      	mov	r9, r6
 8001ff4:	eb18 0308 	adds.w	r3, r8, r8
 8001ff8:	eb49 0409 	adc.w	r4, r9, r9
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	46a1      	mov	r9, r4
 8002000:	eb18 0805 	adds.w	r8, r8, r5
 8002004:	eb49 0906 	adc.w	r9, r9, r6
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800201c:	4688      	mov	r8, r1
 800201e:	4691      	mov	r9, r2
 8002020:	eb18 0005 	adds.w	r0, r8, r5
 8002024:	eb49 0106 	adc.w	r1, r9, r6
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	461d      	mov	r5, r3
 800202e:	f04f 0600 	mov.w	r6, #0
 8002032:	196b      	adds	r3, r5, r5
 8002034:	eb46 0406 	adc.w	r4, r6, r6
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	f7fe f8f0 	bl	8000220 <__aeabi_uldivmod>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	461a      	mov	r2, r3
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <UART_SetConfig+0x3a0>)
 8002048:	fba3 2302 	umull	r2, r3, r3, r2
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	461d      	mov	r5, r3
 8002056:	f04f 0600 	mov.w	r6, #0
 800205a:	46a9      	mov	r9, r5
 800205c:	46b2      	mov	sl, r6
 800205e:	eb19 0309 	adds.w	r3, r9, r9
 8002062:	eb4a 040a 	adc.w	r4, sl, sl
 8002066:	4699      	mov	r9, r3
 8002068:	46a2      	mov	sl, r4
 800206a:	eb19 0905 	adds.w	r9, r9, r5
 800206e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800207e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002086:	4689      	mov	r9, r1
 8002088:	4692      	mov	sl, r2
 800208a:	eb19 0005 	adds.w	r0, r9, r5
 800208e:	eb4a 0106 	adc.w	r1, sl, r6
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	461d      	mov	r5, r3
 8002098:	f04f 0600 	mov.w	r6, #0
 800209c:	196b      	adds	r3, r5, r5
 800209e:	eb46 0406 	adc.w	r4, r6, r6
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	f7fe f8bb 	bl	8000220 <__aeabi_uldivmod>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <UART_SetConfig+0x3a0>)
 80020b2:	fba3 1302 	umull	r1, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <UART_SetConfig+0x3a0>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d2:	4498      	add	r8, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	461d      	mov	r5, r3
 80020d8:	f04f 0600 	mov.w	r6, #0
 80020dc:	46a9      	mov	r9, r5
 80020de:	46b2      	mov	sl, r6
 80020e0:	eb19 0309 	adds.w	r3, r9, r9
 80020e4:	eb4a 040a 	adc.w	r4, sl, sl
 80020e8:	4699      	mov	r9, r3
 80020ea:	46a2      	mov	sl, r4
 80020ec:	eb19 0905 	adds.w	r9, r9, r5
 80020f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002108:	4689      	mov	r9, r1
 800210a:	4692      	mov	sl, r2
 800210c:	eb19 0005 	adds.w	r0, r9, r5
 8002110:	eb4a 0106 	adc.w	r1, sl, r6
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	461d      	mov	r5, r3
 800211a:	f04f 0600 	mov.w	r6, #0
 800211e:	196b      	adds	r3, r5, r5
 8002120:	eb46 0406 	adc.w	r4, r6, r6
 8002124:	461a      	mov	r2, r3
 8002126:	4623      	mov	r3, r4
 8002128:	f7fe f87a 	bl	8000220 <__aeabi_uldivmod>
 800212c:	4603      	mov	r3, r0
 800212e:	460c      	mov	r4, r1
 8002130:	461a      	mov	r2, r3
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <UART_SetConfig+0x3a0>)
 8002134:	fba3 1302 	umull	r1, r3, r3, r2
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	2164      	movs	r1, #100	; 0x64
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	3332      	adds	r3, #50	; 0x32
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <UART_SetConfig+0x3a0>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4442      	add	r2, r8
 8002158:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800215a:	e1c0      	b.n	80024de <UART_SetConfig+0x712>
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	40011800 	.word	0x40011800
 8002168:	40011c00 	.word	0x40011c00
 800216c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4adc      	ldr	r2, [pc, #880]	; (80024e8 <UART_SetConfig+0x71c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00f      	beq.n	800219a <UART_SetConfig+0x3ce>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4adb      	ldr	r2, [pc, #876]	; (80024ec <UART_SetConfig+0x720>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00a      	beq.n	800219a <UART_SetConfig+0x3ce>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4ad9      	ldr	r2, [pc, #868]	; (80024f0 <UART_SetConfig+0x724>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d005      	beq.n	800219a <UART_SetConfig+0x3ce>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4ad8      	ldr	r2, [pc, #864]	; (80024f4 <UART_SetConfig+0x728>)
 8002194:	4293      	cmp	r3, r2
 8002196:	f040 80d1 	bne.w	800233c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800219a:	f7ff f903 	bl	80013a4 <HAL_RCC_GetPCLK2Freq>
 800219e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	469a      	mov	sl, r3
 80021a4:	f04f 0b00 	mov.w	fp, #0
 80021a8:	46d0      	mov	r8, sl
 80021aa:	46d9      	mov	r9, fp
 80021ac:	eb18 0308 	adds.w	r3, r8, r8
 80021b0:	eb49 0409 	adc.w	r4, r9, r9
 80021b4:	4698      	mov	r8, r3
 80021b6:	46a1      	mov	r9, r4
 80021b8:	eb18 080a 	adds.w	r8, r8, sl
 80021bc:	eb49 090b 	adc.w	r9, r9, fp
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021d4:	4688      	mov	r8, r1
 80021d6:	4691      	mov	r9, r2
 80021d8:	eb1a 0508 	adds.w	r5, sl, r8
 80021dc:	eb4b 0609 	adc.w	r6, fp, r9
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	f04f 0400 	mov.w	r4, #0
 80021f2:	0094      	lsls	r4, r2, #2
 80021f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021f8:	008b      	lsls	r3, r1, #2
 80021fa:	461a      	mov	r2, r3
 80021fc:	4623      	mov	r3, r4
 80021fe:	4628      	mov	r0, r5
 8002200:	4631      	mov	r1, r6
 8002202:	f7fe f80d 	bl	8000220 <__aeabi_uldivmod>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	461a      	mov	r2, r3
 800220c:	4bba      	ldr	r3, [pc, #744]	; (80024f8 <UART_SetConfig+0x72c>)
 800220e:	fba3 2302 	umull	r2, r3, r3, r2
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	469b      	mov	fp, r3
 800221c:	f04f 0c00 	mov.w	ip, #0
 8002220:	46d9      	mov	r9, fp
 8002222:	46e2      	mov	sl, ip
 8002224:	eb19 0309 	adds.w	r3, r9, r9
 8002228:	eb4a 040a 	adc.w	r4, sl, sl
 800222c:	4699      	mov	r9, r3
 800222e:	46a2      	mov	sl, r4
 8002230:	eb19 090b 	adds.w	r9, r9, fp
 8002234:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002244:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002248:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800224c:	4689      	mov	r9, r1
 800224e:	4692      	mov	sl, r2
 8002250:	eb1b 0509 	adds.w	r5, fp, r9
 8002254:	eb4c 060a 	adc.w	r6, ip, sl
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f04f 0400 	mov.w	r4, #0
 800226a:	0094      	lsls	r4, r2, #2
 800226c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002270:	008b      	lsls	r3, r1, #2
 8002272:	461a      	mov	r2, r3
 8002274:	4623      	mov	r3, r4
 8002276:	4628      	mov	r0, r5
 8002278:	4631      	mov	r1, r6
 800227a:	f7fd ffd1 	bl	8000220 <__aeabi_uldivmod>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	461a      	mov	r2, r3
 8002284:	4b9c      	ldr	r3, [pc, #624]	; (80024f8 <UART_SetConfig+0x72c>)
 8002286:	fba3 1302 	umull	r1, r3, r3, r2
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2164      	movs	r1, #100	; 0x64
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	3332      	adds	r3, #50	; 0x32
 8002298:	4a97      	ldr	r2, [pc, #604]	; (80024f8 <UART_SetConfig+0x72c>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	4498      	add	r8, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	469b      	mov	fp, r3
 80022aa:	f04f 0c00 	mov.w	ip, #0
 80022ae:	46d9      	mov	r9, fp
 80022b0:	46e2      	mov	sl, ip
 80022b2:	eb19 0309 	adds.w	r3, r9, r9
 80022b6:	eb4a 040a 	adc.w	r4, sl, sl
 80022ba:	4699      	mov	r9, r3
 80022bc:	46a2      	mov	sl, r4
 80022be:	eb19 090b 	adds.w	r9, r9, fp
 80022c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022da:	4689      	mov	r9, r1
 80022dc:	4692      	mov	sl, r2
 80022de:	eb1b 0509 	adds.w	r5, fp, r9
 80022e2:	eb4c 060a 	adc.w	r6, ip, sl
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	f04f 0400 	mov.w	r4, #0
 80022f8:	0094      	lsls	r4, r2, #2
 80022fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022fe:	008b      	lsls	r3, r1, #2
 8002300:	461a      	mov	r2, r3
 8002302:	4623      	mov	r3, r4
 8002304:	4628      	mov	r0, r5
 8002306:	4631      	mov	r1, r6
 8002308:	f7fd ff8a 	bl	8000220 <__aeabi_uldivmod>
 800230c:	4603      	mov	r3, r0
 800230e:	460c      	mov	r4, r1
 8002310:	461a      	mov	r2, r3
 8002312:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <UART_SetConfig+0x72c>)
 8002314:	fba3 1302 	umull	r1, r3, r3, r2
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	2164      	movs	r1, #100	; 0x64
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	3332      	adds	r3, #50	; 0x32
 8002326:	4a74      	ldr	r2, [pc, #464]	; (80024f8 <UART_SetConfig+0x72c>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	f003 020f 	and.w	r2, r3, #15
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4442      	add	r2, r8
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	e0d0      	b.n	80024de <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800233c:	f7ff f81e 	bl	800137c <HAL_RCC_GetPCLK1Freq>
 8002340:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	469a      	mov	sl, r3
 8002346:	f04f 0b00 	mov.w	fp, #0
 800234a:	46d0      	mov	r8, sl
 800234c:	46d9      	mov	r9, fp
 800234e:	eb18 0308 	adds.w	r3, r8, r8
 8002352:	eb49 0409 	adc.w	r4, r9, r9
 8002356:	4698      	mov	r8, r3
 8002358:	46a1      	mov	r9, r4
 800235a:	eb18 080a 	adds.w	r8, r8, sl
 800235e:	eb49 090b 	adc.w	r9, r9, fp
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800236e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002372:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002376:	4688      	mov	r8, r1
 8002378:	4691      	mov	r9, r2
 800237a:	eb1a 0508 	adds.w	r5, sl, r8
 800237e:	eb4b 0609 	adc.w	r6, fp, r9
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4619      	mov	r1, r3
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	f04f 0400 	mov.w	r4, #0
 8002394:	0094      	lsls	r4, r2, #2
 8002396:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800239a:	008b      	lsls	r3, r1, #2
 800239c:	461a      	mov	r2, r3
 800239e:	4623      	mov	r3, r4
 80023a0:	4628      	mov	r0, r5
 80023a2:	4631      	mov	r1, r6
 80023a4:	f7fd ff3c 	bl	8000220 <__aeabi_uldivmod>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <UART_SetConfig+0x72c>)
 80023b0:	fba3 2302 	umull	r2, r3, r3, r2
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	469b      	mov	fp, r3
 80023be:	f04f 0c00 	mov.w	ip, #0
 80023c2:	46d9      	mov	r9, fp
 80023c4:	46e2      	mov	sl, ip
 80023c6:	eb19 0309 	adds.w	r3, r9, r9
 80023ca:	eb4a 040a 	adc.w	r4, sl, sl
 80023ce:	4699      	mov	r9, r3
 80023d0:	46a2      	mov	sl, r4
 80023d2:	eb19 090b 	adds.w	r9, r9, fp
 80023d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ee:	4689      	mov	r9, r1
 80023f0:	4692      	mov	sl, r2
 80023f2:	eb1b 0509 	adds.w	r5, fp, r9
 80023f6:	eb4c 060a 	adc.w	r6, ip, sl
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f04f 0400 	mov.w	r4, #0
 800240c:	0094      	lsls	r4, r2, #2
 800240e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002412:	008b      	lsls	r3, r1, #2
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	4628      	mov	r0, r5
 800241a:	4631      	mov	r1, r6
 800241c:	f7fd ff00 	bl	8000220 <__aeabi_uldivmod>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	461a      	mov	r2, r3
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <UART_SetConfig+0x72c>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2164      	movs	r1, #100	; 0x64
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <UART_SetConfig+0x72c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002446:	4498      	add	r8, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	469b      	mov	fp, r3
 800244c:	f04f 0c00 	mov.w	ip, #0
 8002450:	46d9      	mov	r9, fp
 8002452:	46e2      	mov	sl, ip
 8002454:	eb19 0309 	adds.w	r3, r9, r9
 8002458:	eb4a 040a 	adc.w	r4, sl, sl
 800245c:	4699      	mov	r9, r3
 800245e:	46a2      	mov	sl, r4
 8002460:	eb19 090b 	adds.w	r9, r9, fp
 8002464:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002474:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002478:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800247c:	4689      	mov	r9, r1
 800247e:	4692      	mov	sl, r2
 8002480:	eb1b 0509 	adds.w	r5, fp, r9
 8002484:	eb4c 060a 	adc.w	r6, ip, sl
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	f04f 0400 	mov.w	r4, #0
 800249a:	0094      	lsls	r4, r2, #2
 800249c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024a0:	008b      	lsls	r3, r1, #2
 80024a2:	461a      	mov	r2, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	4631      	mov	r1, r6
 80024aa:	f7fd feb9 	bl	8000220 <__aeabi_uldivmod>
 80024ae:	4603      	mov	r3, r0
 80024b0:	460c      	mov	r4, r1
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <UART_SetConfig+0x72c>)
 80024b6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2164      	movs	r1, #100	; 0x64
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	3332      	adds	r3, #50	; 0x32
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <UART_SetConfig+0x72c>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4442      	add	r2, r8
 80024da:	609a      	str	r2, [r3, #8]
}
 80024dc:	e7ff      	b.n	80024de <UART_SetConfig+0x712>
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e8:	40011000 	.word	0x40011000
 80024ec:	40011400 	.word	0x40011400
 80024f0:	40011800 	.word	0x40011800
 80024f4:	40011c00 	.word	0x40011c00
 80024f8:	51eb851f 	.word	0x51eb851f

080024fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	60bb      	str	r3, [r7, #8]
  return(result);
 8002518:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8310 	mrs	r3, PRIMASK
 8002522:	607b      	str	r3, [r7, #4]
  return(result);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800252a:	f3ef 8311 	mrs	r3, BASEPRI
 800252e:	603b      	str	r3, [r7, #0]
  return(result);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <osKernelInitialize+0x3a>
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <osKernelInitialize+0x64>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800253e:	f06f 0305 	mvn.w	r3, #5
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e00c      	b.n	8002560 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <osKernelInitialize+0x64>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <osKernelInitialize+0x64>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e002      	b.n	8002560 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
 800255e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002560:	68fb      	ldr	r3, [r7, #12]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	2000002c 	.word	0x2000002c

08002574 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800257a:	f3ef 8305 	mrs	r3, IPSR
 800257e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8310 	mrs	r3, PRIMASK
 800258a:	607b      	str	r3, [r7, #4]
  return(result);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002592:	f3ef 8311 	mrs	r3, BASEPRI
 8002596:	603b      	str	r3, [r7, #0]
  return(result);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <osKernelStart+0x3a>
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <osKernelStart+0x68>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80025a6:	f06f 0305 	mvn.w	r3, #5
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e010      	b.n	80025d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <osKernelStart+0x68>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d109      	bne.n	80025ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025b6:	f7ff ffa1 	bl	80024fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <osKernelStart+0x68>)
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025c0:	f001 f870 	bl	80036a4 <vTaskStartScheduler>
      stat = osOK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e002      	b.n	80025d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000002c 	.word	0x2000002c

080025e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b090      	sub	sp, #64	; 0x40
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f0:	f3ef 8305 	mrs	r3, IPSR
 80025f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80025f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 808f 	bne.w	800271c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002602:	61bb      	str	r3, [r7, #24]
  return(result);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800260a:	f3ef 8311 	mrs	r3, BASEPRI
 800260e:	617b      	str	r3, [r7, #20]
  return(result);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <osThreadNew+0x3e>
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <osThreadNew+0x148>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d07e      	beq.n	800271c <osThreadNew+0x13c>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07b      	beq.n	800271c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002628:	2318      	movs	r3, #24
 800262a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d045      	beq.n	80026c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <osThreadNew+0x6a>
        name = attr->name;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <osThreadNew+0x90>
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b38      	cmp	r3, #56	; 0x38
 8002662:	d805      	bhi.n	8002670 <osThreadNew+0x90>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <osThreadNew+0x94>
        return (NULL);
 8002670:	2300      	movs	r3, #0
 8002672:	e054      	b.n	800271e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <osThreadNew+0xca>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b5b      	cmp	r3, #91	; 0x5b
 8002692:	d90a      	bls.n	80026aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <osThreadNew+0xca>
        mem = 1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	e010      	b.n	80026cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <osThreadNew+0xec>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <osThreadNew+0xec>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <osThreadNew+0xec>
          mem = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	e001      	b.n	80026cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d110      	bne.n	80026f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026da:	9202      	str	r2, [sp, #8]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fe09 	bl	8003300 <xTaskCreateStatic>
 80026ee:	4603      	mov	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	e013      	b.n	800271c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d110      	bne.n	800271c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fe51 	bl	80033b4 <xTaskCreate>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d001      	beq.n	800271c <osThreadNew+0x13c>
          hTask = NULL;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800271c:	693b      	ldr	r3, [r7, #16]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3730      	adds	r7, #48	; 0x30
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000002c 	.word	0x2000002c

0800272c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002734:	f3ef 8305 	mrs	r3, IPSR
 8002738:	613b      	str	r3, [r7, #16]
  return(result);
 800273a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	60fb      	str	r3, [r7, #12]
  return(result);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800274c:	f3ef 8311 	mrs	r3, BASEPRI
 8002750:	60bb      	str	r3, [r7, #8]
  return(result);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <osDelay+0x3c>
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <osDelay+0x58>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d103      	bne.n	8002768 <osDelay+0x3c>
    stat = osErrorISR;
 8002760:	f06f 0305 	mvn.w	r3, #5
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e007      	b.n	8002778 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 ff62 	bl	800363c <vTaskDelay>
    }
  }

  return (stat);
 8002778:	697b      	ldr	r3, [r7, #20]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000002c 	.word	0x2000002c

08002788 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <vApplicationGetIdleTaskMemory+0x30>)
 800279e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000030 	.word	0x20000030
 80027b8:	2000008c 	.word	0x2000008c

080027bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80027cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <vApplicationGetTimerTaskMemory+0x30>)
 80027d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	2000028c 	.word	0x2000028c
 80027ec:	200002e8 	.word	0x200002e8

080027f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f103 0208 	add.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f103 0208 	add.w	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0208 	add.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d103      	bne.n	80028b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e00c      	b.n	80028cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3308      	adds	r3, #8
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e002      	b.n	80028c0 <vListInsert+0x2e>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d2f6      	bcs.n	80028ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6852      	ldr	r2, [r2, #4]
 8002924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d103      	bne.n	8002938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	e7fe      	b.n	800297e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002980:	f002 f814 	bl	80049ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	441a      	add	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	3b01      	subs	r3, #1
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01a      	beq.n	8002a14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3310      	adds	r3, #16
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f8de 	bl	8003ba4 <xTaskRemoveFromEventList>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <xQueueGenericReset+0xcc>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	e009      	b.n	8002a14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3310      	adds	r3, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fef3 	bl	80027f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feee 	bl	80027f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a14:	f001 fff8 	bl	8004a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <xQueueGenericCreateStatic+0x28>
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4e:	e7fe      	b.n	8002a4e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <xQueueGenericCreateStatic+0x42>
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <xQueueGenericCreateStatic+0x4e>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <xQueueGenericCreateStatic+0x52>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <xQueueGenericCreateStatic+0x54>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <xQueueGenericCreateStatic+0x6c>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	e7fe      	b.n	8002a92 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <xQueueGenericCreateStatic+0x78>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <xQueueGenericCreateStatic+0x7c>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <xQueueGenericCreateStatic+0x7e>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <xQueueGenericCreateStatic+0x96>
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002abe:	2350      	movs	r3, #80	; 0x50
 8002ac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b50      	cmp	r3, #80	; 0x50
 8002ac6:	d009      	beq.n	8002adc <xQueueGenericCreateStatic+0xb4>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e7fe      	b.n	8002ada <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002adc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002af0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f805 	bl	8002b0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3730      	adds	r7, #48	; 0x30
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e002      	b.n	8002b30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	69b8      	ldr	r0, [r7, #24]
 8002b40:	f7ff ff0a 	bl	8002958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <xQueueGenericSend+0x30>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x3e>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <xQueueGenericSend+0x42>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueGenericSend+0x44>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <xQueueGenericSend+0x5c>
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSend+0x6a>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSend+0x6e>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSend+0x70>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <xQueueGenericSend+0x88>
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e7fe      	b.n	8002bda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bdc:	f001 f998 	bl	8003f10 <xTaskGetSchedulerState>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <xQueueGenericSend+0x98>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xQueueGenericSend+0x9c>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <xQueueGenericSend+0x9e>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <xQueueGenericSend+0xb6>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c0a:	f001 fecf 	bl	80049ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <xQueueGenericSend+0xcc>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d129      	bne.n	8002c74 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c26:	f000 f9ff 	bl	8003028 <prvCopyDataToQueue>
 8002c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 ffb3 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e00a      	b.n	8002c6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c6c:	f001 fecc 	bl	8004a08 <vPortExitCritical>
				return pdPASS;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e063      	b.n	8002d3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c7a:	f001 fec5 	bl	8004a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e05c      	b.n	8002d3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 ffeb 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c96:	f001 feb7 	bl	8004a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c9a:	f000 fd67 	bl	800376c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9e:	f001 fe85 	bl	80049ac <vPortEnterCritical>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d103      	bne.n	8002cb8 <xQueueGenericSend+0x164>
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d103      	bne.n	8002cce <xQueueGenericSend+0x17a>
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cce:	f001 fe9b 	bl	8004a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd2:	1d3a      	adds	r2, r7, #4
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 ffda 	bl	8003c94 <xTaskCheckForTimeOut>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d124      	bne.n	8002d30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce8:	f000 fa96 	bl	8003218 <prvIsQueueFull>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 ff04 	bl	8003b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d02:	f000 fa21 	bl	8003148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d06:	f000 fd3f 	bl	8003788 <xTaskResumeAll>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f af7c 	bne.w	8002c0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <xQueueGenericSend+0x1f0>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	e772      	b.n	8002c0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d26:	f000 fa0f 	bl	8003148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d2a:	f000 fd2d 	bl	8003788 <xTaskResumeAll>
 8002d2e:	e76c      	b.n	8002c0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 fa09 	bl	8003148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d36:	f000 fd27 	bl	8003788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08e      	sub	sp, #56	; 0x38
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <xQueueGenericSendFromISR+0x2c>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSendFromISR+0x3a>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSendFromISR+0x3e>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSendFromISR+0x40>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <xQueueGenericSendFromISR+0x58>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e7fe      	b.n	8002d9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSendFromISR+0x66>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSendFromISR+0x6a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSendFromISR+0x6c>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <xQueueGenericSendFromISR+0x84>
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e7fe      	b.n	8002dca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dcc:	f001 feca 	bl	8004b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dd0:	f3ef 8211 	mrs	r2, BASEPRI
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	61ba      	str	r2, [r7, #24]
 8002de6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002de8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <xQueueGenericSendFromISR+0xb6>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d12c      	bne.n	8002e58 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0e:	f000 f90b 	bl	8003028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d112      	bne.n	8002e42 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d016      	beq.n	8002e52 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 febb 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e007      	b.n	8002e52 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	b25a      	sxtb	r2, r3
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e52:	2301      	movs	r3, #1
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e56:	e001      	b.n	8002e5c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3738      	adds	r7, #56	; 0x38
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <xQueueReceive+0x2e>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	e7fe      	b.n	8002e9c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <xQueueReceive+0x3c>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <xQueueReceive+0x40>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <xQueueReceive+0x42>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <xQueueReceive+0x5a>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eca:	f001 f821 	bl	8003f10 <xTaskGetSchedulerState>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <xQueueReceive+0x6a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <xQueueReceive+0x6e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <xQueueReceive+0x70>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <xQueueReceive+0x88>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef8:	f001 fd58 	bl	80049ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01f      	beq.n	8002f48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0c:	f000 f8f6 	bl	80030fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00f      	beq.n	8002f40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	3310      	adds	r3, #16
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fe3d 	bl	8003ba4 <xTaskRemoveFromEventList>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f30:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <xQueueReceive+0x1b4>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f40:	f001 fd62 	bl	8004a08 <vPortExitCritical>
				return pdPASS;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e069      	b.n	800301c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f4e:	f001 fd5b 	bl	8004a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e062      	b.n	800301c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe81 	bl	8003c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f6a:	f001 fd4d 	bl	8004a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f6e:	f000 fbfd 	bl	800376c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f72:	f001 fd1b 	bl	80049ac <vPortEnterCritical>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d103      	bne.n	8002f8c <xQueueReceive+0x11c>
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f98:	d103      	bne.n	8002fa2 <xQueueReceive+0x132>
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa2:	f001 fd31 	bl	8004a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa6:	1d3a      	adds	r2, r7, #4
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fe70 	bl	8003c94 <xTaskCheckForTimeOut>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d123      	bne.n	8003002 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fbc:	f000 f916 	bl	80031ec <prvIsQueueEmpty>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d017      	beq.n	8002ff6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	3324      	adds	r3, #36	; 0x24
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fd9a 	bl	8003b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd6:	f000 f8b7 	bl	8003148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fda:	f000 fbd5 	bl	8003788 <xTaskResumeAll>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d189      	bne.n	8002ef8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <xQueueReceive+0x1b4>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	e780      	b.n	8002ef8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff8:	f000 f8a6 	bl	8003148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ffc:	f000 fbc4 	bl	8003788 <xTaskResumeAll>
 8003000:	e77a      	b.n	8002ef8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003004:	f000 f8a0 	bl	8003148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003008:	f000 fbbe 	bl	8003788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800300c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800300e:	f000 f8ed 	bl	80031ec <prvIsQueueEmpty>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f43f af6f 	beq.w	8002ef8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800301a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800301c:	4618      	mov	r0, r3
 800301e:	3730      	adds	r7, #48	; 0x30
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d14d      	bne.n	80030ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ff7a 	bl	8003f4c <xTaskPriorityDisinherit>
 8003058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e043      	b.n	80030ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d119      	bne.n	800309c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6858      	ldr	r0, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	461a      	mov	r2, r3
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	f001 ffae 	bl	8004fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d32b      	bcc.n	80030ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e026      	b.n	80030ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68d8      	ldr	r0, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	461a      	mov	r2, r3
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	f001 ff94 	bl	8004fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	425b      	negs	r3, r3
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d207      	bcs.n	80030d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	425b      	negs	r3, r3
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d105      	bne.n	80030ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030f2:	697b      	ldr	r3, [r7, #20]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	441a      	add	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d303      	bcc.n	8003130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68d9      	ldr	r1, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	461a      	mov	r2, r3
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f001 ff4a 	bl	8004fd4 <memcpy>
	}
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003150:	f001 fc2c 	bl	80049ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800315c:	e011      	b.n	8003182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3324      	adds	r3, #36	; 0x24
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fd1a 	bl	8003ba4 <xTaskRemoveFromEventList>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003176:	f000 fded 	bl	8003d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3b01      	subs	r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	dce9      	bgt.n	800315e <prvUnlockQueue+0x16>
 800318a:	e000      	b.n	800318e <prvUnlockQueue+0x46>
					break;
 800318c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003196:	f001 fc37 	bl	8004a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800319a:	f001 fc07 	bl	80049ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a6:	e011      	b.n	80031cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d012      	beq.n	80031d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3310      	adds	r3, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fcf5 	bl	8003ba4 <xTaskRemoveFromEventList>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031c0:	f000 fdc8 	bl	8003d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dce9      	bgt.n	80031a8 <prvUnlockQueue+0x60>
 80031d4:	e000      	b.n	80031d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031e0:	f001 fc12 	bl	8004a08 <vPortExitCritical>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031f4:	f001 fbda 	bl	80049ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e001      	b.n	800320a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800320a:	f001 fbfd 	bl	8004a08 <vPortExitCritical>

	return xReturn;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003220:	f001 fbc4 	bl	80049ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	429a      	cmp	r2, r3
 800322e:	d102      	bne.n	8003236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	e001      	b.n	800323a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800323a:	f001 fbe5 	bl	8004a08 <vPortExitCritical>

	return xReturn;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e014      	b.n	8003282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <vQueueAddToRegistry+0x4c>)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <vQueueAddToRegistry+0x4c>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <vQueueAddToRegistry+0x4c>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800327a:	e005      	b.n	8003288 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b07      	cmp	r3, #7
 8003286:	d9e7      	bls.n	8003258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	200049c0 	.word	0x200049c0

08003298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032a8:	f001 fb80 	bl	80049ac <vPortEnterCritical>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d103      	bne.n	80032c2 <vQueueWaitForMessageRestricted+0x2a>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d103      	bne.n	80032d8 <vQueueWaitForMessageRestricted+0x40>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d8:	f001 fb96 	bl	8004a08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3324      	adds	r3, #36	; 0x24
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fc2f 	bl	8003b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff28 	bl	8003148 <prvUnlockQueue>
	}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08e      	sub	sp, #56	; 0x38
 8003304:	af04      	add	r7, sp, #16
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <xTaskCreateStatic+0x28>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	e7fe      	b.n	8003326 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <xTaskCreateStatic+0x42>
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	e7fe      	b.n	8003340 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003342:	235c      	movs	r3, #92	; 0x5c
 8003344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b5c      	cmp	r3, #92	; 0x5c
 800334a:	d009      	beq.n	8003360 <xTaskCreateStatic+0x60>
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e7fe      	b.n	800335e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003360:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01e      	beq.n	80033a6 <xTaskCreateStatic+0xa6>
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01b      	beq.n	80033a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003376:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003380:	2300      	movs	r3, #0
 8003382:	9303      	str	r3, [sp, #12]
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9302      	str	r3, [sp, #8]
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f850 	bl	800343e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800339e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033a0:	f000 f8dc 	bl	800355c <prvAddNewTaskToReadyList>
 80033a4:	e001      	b.n	80033aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033aa:	697b      	ldr	r3, [r7, #20]
	}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af04      	add	r7, sp, #16
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fc09 	bl	8004be0 <pvPortMalloc>
 80033ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033d6:	205c      	movs	r0, #92	; 0x5c
 80033d8:	f001 fc02 	bl	8004be0 <pvPortMalloc>
 80033dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ea:	e005      	b.n	80033f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033ec:	6978      	ldr	r0, [r7, #20]
 80033ee:	f001 fcb9 	bl	8004d64 <vPortFree>
 80033f2:	e001      	b.n	80033f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d017      	beq.n	800342e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	2300      	movs	r3, #0
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f80e 	bl	800343e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003422:	69f8      	ldr	r0, [r7, #28]
 8003424:	f000 f89a 	bl	800355c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003428:	2301      	movs	r3, #1
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e002      	b.n	8003434 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003434:	69bb      	ldr	r3, [r7, #24]
	}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b088      	sub	sp, #32
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	461a      	mov	r2, r3
 8003456:	21a5      	movs	r1, #165	; 0xa5
 8003458:	f001 fdc7 	bl	8004fea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003466:	3b01      	subs	r3, #1
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f023 0307 	bic.w	r3, r3, #7
 8003474:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <prvInitialiseNewTask+0x56>
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e7fe      	b.n	8003492 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01f      	beq.n	80034da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e012      	b.n	80034c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4413      	add	r3, r2
 80034a6:	7819      	ldrb	r1, [r3, #0]
 80034a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	3334      	adds	r3, #52	; 0x34
 80034b0:	460a      	mov	r2, r1
 80034b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3301      	adds	r3, #1
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d9e9      	bls.n	80034a0 <prvInitialiseNewTask+0x62>
 80034cc:	e000      	b.n	80034d0 <prvInitialiseNewTask+0x92>
			{
				break;
 80034ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d8:	e003      	b.n	80034e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	2b37      	cmp	r3, #55	; 0x37
 80034e6:	d901      	bls.n	80034ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034e8:	2337      	movs	r3, #55	; 0x37
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2200      	movs	r2, #0
 80034fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f994 	bl	8002830 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	3318      	adds	r3, #24
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f98f 	bl	8002830 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	f001 f90c 	bl	8004758 <pxPortInitialiseStack>
 8003540:	4602      	mov	r2, r0
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003552:	bf00      	nop
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003564:	f001 fa22 	bl	80049ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003568:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <prvAddNewTaskToReadyList+0xc4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <prvAddNewTaskToReadyList+0xc4>)
 8003570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003572:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800357a:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <prvAddNewTaskToReadyList+0xc4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d110      	bne.n	80035aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003588:	f000 fc08 	bl	8003d9c <prvInitialiseTaskLists>
 800358c:	e00d      	b.n	80035aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <prvAddNewTaskToReadyList+0xcc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d802      	bhi.n	80035aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035a4:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <prvAddNewTaskToReadyList+0xd0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a1e      	ldr	r2, [pc, #120]	; (800362c <prvAddNewTaskToReadyList+0xd0>)
 80035b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <prvAddNewTaskToReadyList+0xd0>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <prvAddNewTaskToReadyList+0xd4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d903      	bls.n	80035d0 <prvAddNewTaskToReadyList+0x74>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <prvAddNewTaskToReadyList+0xd4>)
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <prvAddNewTaskToReadyList+0xd8>)
 80035de:	441a      	add	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7ff f92f 	bl	800284a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035ec:	f001 fa0c 	bl	8004a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035f0:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <prvAddNewTaskToReadyList+0xcc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	429a      	cmp	r2, r3
 8003604:	d207      	bcs.n	8003616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <prvAddNewTaskToReadyList+0xdc>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000bbc 	.word	0x20000bbc
 8003624:	200006e8 	.word	0x200006e8
 8003628:	20000bc8 	.word	0x20000bc8
 800362c:	20000bd8 	.word	0x20000bd8
 8003630:	20000bc4 	.word	0x20000bc4
 8003634:	200006ec 	.word	0x200006ec
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <vTaskDelay+0x60>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <vTaskDelay+0x2e>
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	e7fe      	b.n	8003668 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800366a:	f000 f87f 	bl	800376c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fcd7 	bl	8004024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003676:	f000 f887 	bl	8003788 <xTaskResumeAll>
 800367a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <vTaskDelay+0x64>)
 8003684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000be4 	.word	0x20000be4
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036b2:	463a      	mov	r2, r7
 80036b4:	1d39      	adds	r1, r7, #4
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f864 	bl	8002788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	9202      	str	r2, [sp, #8]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	460a      	mov	r2, r1
 80036d2:	4920      	ldr	r1, [pc, #128]	; (8003754 <vTaskStartScheduler+0xb0>)
 80036d4:	4820      	ldr	r0, [pc, #128]	; (8003758 <vTaskStartScheduler+0xb4>)
 80036d6:	f7ff fe13 	bl	8003300 <xTaskCreateStatic>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b1f      	ldr	r3, [pc, #124]	; (800375c <vTaskStartScheduler+0xb8>)
 80036de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <vTaskStartScheduler+0xb8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e001      	b.n	80036f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d102      	bne.n	80036fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036f8:	f000 fce8 	bl	80040cc <xTimerCreateTimerTask>
 80036fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d115      	bne.n	8003730 <vTaskStartScheduler+0x8c>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <vTaskStartScheduler+0xbc>)
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <vTaskStartScheduler+0xc0>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <vTaskStartScheduler+0xc4>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800372a:	f001 f8a1 	bl	8004870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800372e:	e00d      	b.n	800374c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d109      	bne.n	800374c <vTaskStartScheduler+0xa8>
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e7fe      	b.n	800374a <vTaskStartScheduler+0xa6>
}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08005024 	.word	0x08005024
 8003758:	08003d6d 	.word	0x08003d6d
 800375c:	20000be0 	.word	0x20000be0
 8003760:	20000bdc 	.word	0x20000bdc
 8003764:	20000bc8 	.word	0x20000bc8
 8003768:	20000bc0 	.word	0x20000bc0

0800376c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <vTaskSuspendAll+0x18>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a03      	ldr	r2, [pc, #12]	; (8003784 <vTaskSuspendAll+0x18>)
 8003778:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	20000be4 	.word	0x20000be4

08003788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <xTaskResumeAll+0x114>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <xTaskResumeAll+0x2a>
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	e7fe      	b.n	80037b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037b2:	f001 f8fb 	bl	80049ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <xTaskResumeAll+0x114>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	4a37      	ldr	r2, [pc, #220]	; (800389c <xTaskResumeAll+0x114>)
 80037be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <xTaskResumeAll+0x114>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d162      	bne.n	800388e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <xTaskResumeAll+0x118>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05e      	beq.n	800388e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037d0:	e02f      	b.n	8003832 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d2:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <xTaskResumeAll+0x11c>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3318      	adds	r3, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f890 	bl	8002904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff f88b 	bl	8002904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <xTaskResumeAll+0x120>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d903      	bls.n	8003802 <xTaskResumeAll+0x7a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <xTaskResumeAll+0x120>)
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4a27      	ldr	r2, [pc, #156]	; (80038ac <xTaskResumeAll+0x124>)
 8003810:	441a      	add	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f7ff f816 	bl	800284a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <xTaskResumeAll+0x128>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <xTaskResumeAll+0x12c>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <xTaskResumeAll+0x11c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1cb      	bne.n	80037d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003840:	f000 fb46 	bl	8003ed0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xTaskResumeAll+0x130>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003850:	f000 f846 	bl	80038e0 <xTaskIncrementTick>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <xTaskResumeAll+0x12c>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f1      	bne.n	8003850 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <xTaskResumeAll+0x130>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <xTaskResumeAll+0x12c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <xTaskResumeAll+0x134>)
 8003880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800388e:	f001 f8bb 	bl	8004a08 <vPortExitCritical>

	return xAlreadyYielded;
 8003892:	68bb      	ldr	r3, [r7, #8]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000be4 	.word	0x20000be4
 80038a0:	20000bbc 	.word	0x20000bbc
 80038a4:	20000b7c 	.word	0x20000b7c
 80038a8:	20000bc4 	.word	0x20000bc4
 80038ac:	200006ec 	.word	0x200006ec
 80038b0:	200006e8 	.word	0x200006e8
 80038b4:	20000bd0 	.word	0x20000bd0
 80038b8:	20000bcc 	.word	0x20000bcc
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <xTaskGetTickCount+0x1c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038cc:	687b      	ldr	r3, [r7, #4]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000bc0 	.word	0x20000bc0

080038e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ea:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <xTaskIncrementTick+0x144>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 8088 	bne.w	8003a04 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038f4:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <xTaskIncrementTick+0x148>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038fc:	4a4a      	ldr	r2, [pc, #296]	; (8003a28 <xTaskIncrementTick+0x148>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11f      	bne.n	8003948 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003908:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <xTaskIncrementTick+0x14c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <xTaskIncrementTick+0x46>
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e7fe      	b.n	8003924 <xTaskIncrementTick+0x44>
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <xTaskIncrementTick+0x14c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <xTaskIncrementTick+0x150>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <xTaskIncrementTick+0x14c>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4a3e      	ldr	r2, [pc, #248]	; (8003a30 <xTaskIncrementTick+0x150>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <xTaskIncrementTick+0x154>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	4a3c      	ldr	r2, [pc, #240]	; (8003a34 <xTaskIncrementTick+0x154>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	f000 fac4 	bl	8003ed0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003948:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <xTaskIncrementTick+0x158>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d349      	bcc.n	80039e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <xTaskIncrementTick+0x14c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <xTaskIncrementTick+0x158>)
 800395e:	f04f 32ff 	mov.w	r2, #4294967295
 8003962:	601a      	str	r2, [r3, #0]
					break;
 8003964:	e03f      	b.n	80039e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <xTaskIncrementTick+0x14c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d203      	bcs.n	8003986 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800397e:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <xTaskIncrementTick+0x158>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003984:	e02f      	b.n	80039e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe ffba 	bl	8002904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3318      	adds	r3, #24
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe ffb1 	bl	8002904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <xTaskIncrementTick+0x15c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d903      	bls.n	80039b6 <xTaskIncrementTick+0xd6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <xTaskIncrementTick+0x15c>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <xTaskIncrementTick+0x160>)
 80039c4:	441a      	add	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe ff3c 	bl	800284a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <xTaskIncrementTick+0x164>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d3b8      	bcc.n	8003952 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e4:	e7b5      	b.n	8003952 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <xTaskIncrementTick+0x164>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4914      	ldr	r1, [pc, #80]	; (8003a40 <xTaskIncrementTick+0x160>)
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d907      	bls.n	8003a0e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80039fe:	2301      	movs	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e004      	b.n	8003a0e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <xTaskIncrementTick+0x168>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <xTaskIncrementTick+0x168>)
 8003a0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <xTaskIncrementTick+0x16c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a1a:	697b      	ldr	r3, [r7, #20]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000be4 	.word	0x20000be4
 8003a28:	20000bc0 	.word	0x20000bc0
 8003a2c:	20000b74 	.word	0x20000b74
 8003a30:	20000b78 	.word	0x20000b78
 8003a34:	20000bd4 	.word	0x20000bd4
 8003a38:	20000bdc 	.word	0x20000bdc
 8003a3c:	20000bc4 	.word	0x20000bc4
 8003a40:	200006ec 	.word	0x200006ec
 8003a44:	200006e8 	.word	0x200006e8
 8003a48:	20000bcc 	.word	0x20000bcc
 8003a4c:	20000bd0 	.word	0x20000bd0

08003a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <vTaskSwitchContext+0xa4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <vTaskSwitchContext+0xa8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a64:	e040      	b.n	8003ae8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <vTaskSwitchContext+0xa8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a6c:	4b23      	ldr	r3, [pc, #140]	; (8003afc <vTaskSwitchContext+0xac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e00f      	b.n	8003a94 <vTaskSwitchContext+0x44>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <vTaskSwitchContext+0x3e>
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	e7fe      	b.n	8003a8c <vTaskSwitchContext+0x3c>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	491a      	ldr	r1, [pc, #104]	; (8003b00 <vTaskSwitchContext+0xb0>)
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e5      	beq.n	8003a74 <vTaskSwitchContext+0x24>
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <vTaskSwitchContext+0xb0>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d104      	bne.n	8003ad8 <vTaskSwitchContext+0x88>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <vTaskSwitchContext+0xb4>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4a06      	ldr	r2, [pc, #24]	; (8003afc <vTaskSwitchContext+0xac>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	20000be4 	.word	0x20000be4
 8003af8:	20000bd0 	.word	0x20000bd0
 8003afc:	20000bc4 	.word	0x20000bc4
 8003b00:	200006ec 	.word	0x200006ec
 8003b04:	200006e8 	.word	0x200006e8

08003b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <vTaskPlaceOnEventList+0x24>
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e7fe      	b.n	8003b2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <vTaskPlaceOnEventList+0x44>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3318      	adds	r3, #24
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fe feac 	bl	8002892 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f000 fa71 	bl	8004024 <prvAddCurrentTaskToDelayedList>
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200006e8 	.word	0x200006e8

08003b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <vTaskPlaceOnEventListRestricted+0x26>
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e7fe      	b.n	8003b74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3318      	adds	r3, #24
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7fe fe63 	bl	800284a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68b8      	ldr	r0, [r7, #8]
 8003b94:	f000 fa46 	bl	8004024 <prvAddCurrentTaskToDelayedList>
	}
 8003b98:	bf00      	nop
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	200006e8 	.word	0x200006e8

08003ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <xTaskRemoveFromEventList+0x2a>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e7fe      	b.n	8003bcc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3318      	adds	r3, #24
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fe96 	bl	8002904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <xTaskRemoveFromEventList+0xac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fe8d 	bl	8002904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <xTaskRemoveFromEventList+0xb0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d903      	bls.n	8003bfe <xTaskRemoveFromEventList+0x5a>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <xTaskRemoveFromEventList+0xb0>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <xTaskRemoveFromEventList+0xb4>)
 8003c0c:	441a      	add	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fe18 	bl	800284a <vListInsertEnd>
 8003c1a:	e005      	b.n	8003c28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	480e      	ldr	r0, [pc, #56]	; (8003c5c <xTaskRemoveFromEventList+0xb8>)
 8003c24:	f7fe fe11 	bl	800284a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <xTaskRemoveFromEventList+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d905      	bls.n	8003c42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <xTaskRemoveFromEventList+0xc0>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e001      	b.n	8003c46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000be4 	.word	0x20000be4
 8003c54:	20000bc4 	.word	0x20000bc4
 8003c58:	200006ec 	.word	0x200006ec
 8003c5c:	20000b7c 	.word	0x20000b7c
 8003c60:	200006e8 	.word	0x200006e8
 8003c64:	20000bd0 	.word	0x20000bd0

08003c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <vTaskInternalSetTimeOutState+0x24>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <vTaskInternalSetTimeOutState+0x28>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000bd4 	.word	0x20000bd4
 8003c90:	20000bc0 	.word	0x20000bc0

08003c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d109      	bne.n	8003cb8 <xTaskCheckForTimeOut+0x24>
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <xTaskCheckForTimeOut+0x3e>
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e7fe      	b.n	8003cd0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003cd2:	f000 fe6b 	bl	80049ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <xTaskCheckForTimeOut+0xb8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d102      	bne.n	8003cf6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e023      	b.n	8003d3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <xTaskCheckForTimeOut+0xbc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d007      	beq.n	8003d12 <xTaskCheckForTimeOut+0x7e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	e015      	b.n	8003d3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d20b      	bcs.n	8003d34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad2      	subs	r2, r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff9d 	bl	8003c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	e004      	b.n	8003d3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f000 fe63 	bl	8004a08 <vPortExitCritical>

	return xReturn;
 8003d42:	69fb      	ldr	r3, [r7, #28]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000bc0 	.word	0x20000bc0
 8003d50:	20000bd4 	.word	0x20000bd4

08003d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <vTaskMissedYield+0x14>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000bd0 	.word	0x20000bd0

08003d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d74:	f000 f852 	bl	8003e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <prvIdleTask+0x28>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d9f9      	bls.n	8003d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <prvIdleTask+0x2c>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d90:	e7f0      	b.n	8003d74 <prvIdleTask+0x8>
 8003d92:	bf00      	nop
 8003d94:	200006ec 	.word	0x200006ec
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e00c      	b.n	8003dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <prvInitialiseTaskLists+0x60>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fd1a 	bl	80027f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b37      	cmp	r3, #55	; 0x37
 8003dc6:	d9ef      	bls.n	8003da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc8:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dca:	f7fe fd11 	bl	80027f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dce:	480d      	ldr	r0, [pc, #52]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003dd0:	f7fe fd0e 	bl	80027f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd4:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x6c>)
 8003dd6:	f7fe fd0b 	bl	80027f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dda:	480c      	ldr	r0, [pc, #48]	; (8003e0c <prvInitialiseTaskLists+0x70>)
 8003ddc:	f7fe fd08 	bl	80027f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de0:	480b      	ldr	r0, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x74>)
 8003de2:	f7fe fd05 	bl	80027f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <prvInitialiseTaskLists+0x78>)
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x64>)
 8003dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvInitialiseTaskLists+0x7c>)
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <prvInitialiseTaskLists+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200006ec 	.word	0x200006ec
 8003e00:	20000b4c 	.word	0x20000b4c
 8003e04:	20000b60 	.word	0x20000b60
 8003e08:	20000b7c 	.word	0x20000b7c
 8003e0c:	20000b90 	.word	0x20000b90
 8003e10:	20000ba8 	.word	0x20000ba8
 8003e14:	20000b74 	.word	0x20000b74
 8003e18:	20000b78 	.word	0x20000b78

08003e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e22:	e019      	b.n	8003e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e24:	f000 fdc2 	bl	80049ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <prvCheckTasksWaitingTermination+0x4c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fd65 	bl	8002904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <prvCheckTasksWaitingTermination+0x50>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <prvCheckTasksWaitingTermination+0x50>)
 8003e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4e:	f000 fddb 	bl	8004a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f80e 	bl	8003e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <prvCheckTasksWaitingTermination+0x54>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e1      	bne.n	8003e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000b90 	.word	0x20000b90
 8003e6c:	20000bbc 	.word	0x20000bbc
 8003e70:	20000ba4 	.word	0x20000ba4

08003e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 ff6a 	bl	8004d64 <vPortFree>
				vPortFree( pxTCB );
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ff67 	bl	8004d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e96:	e017      	b.n	8003ec8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d103      	bne.n	8003eaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 ff5e 	bl	8004d64 <vPortFree>
	}
 8003ea8:	e00e      	b.n	8003ec8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d009      	beq.n	8003ec8 <prvDeleteTCB+0x54>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e7fe      	b.n	8003ec6 <prvDeleteTCB+0x52>
	}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <prvResetNextTaskUnblockTime+0x38>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvResetNextTaskUnblockTime+0x3c>)
 8003ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ee8:	e008      	b.n	8003efc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <prvResetNextTaskUnblockTime+0x38>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <prvResetNextTaskUnblockTime+0x3c>)
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000b74 	.word	0x20000b74
 8003f0c:	20000bdc 	.word	0x20000bdc

08003f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <xTaskGetSchedulerState+0x34>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e008      	b.n	8003f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <xTaskGetSchedulerState+0x38>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e001      	b.n	8003f36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f36:	687b      	ldr	r3, [r7, #4]
	}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20000bc8 	.word	0x20000bc8
 8003f48:	20000be4 	.word	0x20000be4

08003f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d054      	beq.n	800400c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <xTaskPriorityDisinherit+0xcc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d009      	beq.n	8003f80 <xTaskPriorityDisinherit+0x34>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e7fe      	b.n	8003f7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <xTaskPriorityDisinherit+0x50>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	e7fe      	b.n	8003f9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d02c      	beq.n	800400c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d128      	bne.n	800400c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fca0 	bl	8002904 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <xTaskPriorityDisinherit+0xd0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d903      	bls.n	8003fec <xTaskPriorityDisinherit+0xa0>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a0c      	ldr	r2, [pc, #48]	; (800401c <xTaskPriorityDisinherit+0xd0>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <xTaskPriorityDisinherit+0xd4>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fc21 	bl	800284a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800400c:	697b      	ldr	r3, [r7, #20]
	}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200006e8 	.word	0x200006e8
 800401c:	20000bc4 	.word	0x20000bc4
 8004020:	200006ec 	.word	0x200006ec

08004024 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fc62 	bl	8002904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d10a      	bne.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4819      	ldr	r0, [pc, #100]	; (80040bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004058:	f7fe fbf7 	bl	800284a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800405c:	e026      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	429a      	cmp	r2, r3
 8004074:	d209      	bcs.n	800408a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7fe fc05 	bl	8002892 <vListInsert>
}
 8004088:	e010      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7fe fbfb 	bl	8002892 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d202      	bcs.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000bc0 	.word	0x20000bc0
 80040b8:	200006e8 	.word	0x200006e8
 80040bc:	20000ba8 	.word	0x20000ba8
 80040c0:	20000b78 	.word	0x20000b78
 80040c4:	20000b74 	.word	0x20000b74
 80040c8:	20000bdc 	.word	0x20000bdc

080040cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040d6:	f000 faff 	bl	80046d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <xTimerCreateTimerTask+0x80>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d021      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040ea:	1d3a      	adds	r2, r7, #4
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fb61 	bl	80027bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	9202      	str	r2, [sp, #8]
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2302      	movs	r3, #2
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	460a      	mov	r2, r1
 800410c:	4910      	ldr	r1, [pc, #64]	; (8004150 <xTimerCreateTimerTask+0x84>)
 800410e:	4811      	ldr	r0, [pc, #68]	; (8004154 <xTimerCreateTimerTask+0x88>)
 8004110:	f7ff f8f6 	bl	8003300 <xTaskCreateStatic>
 8004114:	4602      	mov	r2, r0
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 8004118:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <xTimerCreateTimerTask+0x74>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e7fe      	b.n	800413e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000c18 	.word	0x20000c18
 8004150:	0800502c 	.word	0x0800502c
 8004154:	0800428d 	.word	0x0800428d
 8004158:	20000c1c 	.word	0x20000c1c

0800415c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <xTimerGenericCommand+0x2c>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	e7fe      	b.n	8004186 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <xTimerGenericCommand+0x94>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02a      	beq.n	80041e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	dc18      	bgt.n	80041d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041a2:	f7ff feb5 	bl	8003f10 <xTaskGetSchedulerState>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d109      	bne.n	80041c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	f107 0110 	add.w	r1, r7, #16
 80041b4:	2300      	movs	r3, #0
 80041b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b8:	f7fe fccc 	bl	8002b54 <xQueueGenericSend>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24
 80041be:	e012      	b.n	80041e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f107 0110 	add.w	r1, r7, #16
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	f7fe fcc2 	bl	8002b54 <xQueueGenericSend>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24
 80041d2:	e008      	b.n	80041e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	f107 0110 	add.w	r1, r7, #16
 80041dc:	2300      	movs	r3, #0
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	f7fe fdb2 	bl	8002d48 <xQueueGenericSendFromISR>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000c18 	.word	0x20000c18

080041f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <prvProcessExpiredTimer+0x94>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fb79 	bl	8002904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	18d1      	adds	r1, r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f000 f8d1 	bl	80043d4 <prvInsertTimerInActiveList>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004238:	2300      	movs	r3, #0
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	2100      	movs	r1, #0
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7ff ff8a 	bl	800415c <xTimerGenericCommand>
 8004248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d112      	bne.n	8004276 <prvProcessExpiredTimer+0x82>
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e7fe      	b.n	8004262 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	4798      	blx	r3
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000c10 	.word	0x20000c10

0800428c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f857 	bl	800434c <prvGetNextExpireTime>
 800429e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4619      	mov	r1, r3
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f803 	bl	80042b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042aa:	f000 f8d5 	bl	8004458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ae:	e7f1      	b.n	8004294 <prvTimerTask+0x8>

080042b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042ba:	f7ff fa57 	bl	800376c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f866 	bl	8004394 <prvSampleTimeNow>
 80042c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d130      	bne.n	8004332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <prvProcessTimerOrBlockTask+0x3c>
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d806      	bhi.n	80042ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042de:	f7ff fa53 	bl	8003788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff85 	bl	80041f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042ea:	e024      	b.n	8004336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <prvProcessTimerOrBlockTask+0x90>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <prvProcessTimerOrBlockTask+0x50>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <prvProcessTimerOrBlockTask+0x52>
 8004300:	2300      	movs	r3, #0
 8004302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <prvProcessTimerOrBlockTask+0x94>)
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	f7fe ffc1 	bl	8003298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004316:	f7ff fa37 	bl	8003788 <xTaskResumeAll>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <prvProcessTimerOrBlockTask+0x98>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
}
 8004330:	e001      	b.n	8004336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004332:	f7ff fa29 	bl	8003788 <xTaskResumeAll>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000c14 	.word	0x20000c14
 8004344:	20000c18 	.word	0x20000c18
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <prvGetNextExpireTime+0x44>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <prvGetNextExpireTime+0x16>
 800435e:	2201      	movs	r2, #1
 8004360:	e000      	b.n	8004364 <prvGetNextExpireTime+0x18>
 8004362:	2200      	movs	r2, #0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <prvGetNextExpireTime+0x44>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e001      	b.n	8004380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000c10 	.word	0x20000c10

08004394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800439c:	f7ff fa90 	bl	80038c0 <xTaskGetTickCount>
 80043a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <prvSampleTimeNow+0x3c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d205      	bcs.n	80043b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043ac:	f000 f930 	bl	8004610 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e002      	b.n	80043be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <prvSampleTimeNow+0x3c>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000c20 	.word	0x20000c20

080043d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d812      	bhi.n	8004420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e01b      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <prvInsertTimerInActiveList+0x7c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f7fe fa3a 	bl	8002892 <vListInsert>
 800441e:	e012      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d206      	bcs.n	8004436 <prvInsertTimerInActiveList+0x62>
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e007      	b.n	8004446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <prvInsertTimerInActiveList+0x80>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3304      	adds	r3, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f7fe fa26 	bl	8002892 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000c14 	.word	0x20000c14
 8004454:	20000c10 	.word	0x20000c10

08004458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08e      	sub	sp, #56	; 0x38
 800445c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800445e:	e0c6      	b.n	80045ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	da17      	bge.n	8004496 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	3304      	adds	r3, #4
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <prvProcessReceivedCommands+0x2e>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	e7fe      	b.n	8004484 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448c:	6850      	ldr	r0, [r2, #4]
 800448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	4611      	mov	r1, r2
 8004494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f2c0 80a7 	blt.w	80045ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fa28 	bl	8002904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044b4:	463b      	mov	r3, r7
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff6c 	bl	8004394 <prvSampleTimeNow>
 80044bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	f200 8094 	bhi.w	80045ee <prvProcessReceivedCommands+0x196>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <prvProcessReceivedCommands+0x74>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044f5 	.word	0x080044f5
 80044d8:	08004567 	.word	0x08004567
 80044dc:	0800457b 	.word	0x0800457b
 80044e0:	080045c3 	.word	0x080045c3
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	080044f5 	.word	0x080044f5
 80044ec:	08004567 	.word	0x08004567
 80044f0:	0800457b 	.word	0x0800457b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	18d1      	adds	r1, r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004514:	f7ff ff5e 	bl	80043d4 <prvInsertTimerInActiveList>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d067      	beq.n	80045ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05c      	beq.n	80045ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	441a      	add	r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	2100      	movs	r1, #0
 8004544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004546:	f7ff fe09 	bl	800415c <xTimerGenericCommand>
 800454a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d14d      	bne.n	80045ee <prvProcessReceivedCommands+0x196>
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e7fe      	b.n	8004564 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	b2da      	uxtb	r2, r3
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004578:	e039      	b.n	80045ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <prvProcessReceivedCommands+0x156>
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e7fe      	b.n	80045ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	18d1      	adds	r1, r2, r3
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045bc:	f7ff ff0a 	bl	80043d4 <prvInsertTimerInActiveList>
					break;
 80045c0:	e015      	b.n	80045ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80045d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d2:	f000 fbc7 	bl	8004d64 <vPortFree>
 80045d6:	e00a      	b.n	80045ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045ea:	e000      	b.n	80045ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80045ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <prvProcessReceivedCommands+0x1b4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1d39      	adds	r1, r7, #4
 80045f4:	2200      	movs	r2, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fc3a 	bl	8002e70 <xQueueReceive>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f47f af2e 	bne.w	8004460 <prvProcessReceivedCommands+0x8>
	}
}
 8004604:	bf00      	nop
 8004606:	3730      	adds	r7, #48	; 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000c18 	.word	0x20000c18

08004610 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004616:	e047      	b.n	80046a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004618:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3304      	adds	r3, #4
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe f967 	bl	8002904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02d      	beq.n	80046a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d90e      	bls.n	800467c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800466a:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f7fe f90c 	bl	8002892 <vListInsert>
 800467a:	e015      	b.n	80046a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2300      	movs	r3, #0
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	2100      	movs	r1, #0
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fd68 	bl	800415c <xTimerGenericCommand>
 800468c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <prvSwitchTimerLists+0x98>
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	e7fe      	b.n	80046a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1b2      	bne.n	8004618 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <prvSwitchTimerLists+0xc4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <prvSwitchTimerLists+0xc0>)
 80046be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <prvSwitchTimerLists+0xc4>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6013      	str	r3, [r2, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000c10 	.word	0x20000c10
 80046d4:	20000c14 	.word	0x20000c14

080046d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046de:	f000 f965 	bl	80049ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <prvCheckForValidListAndQueue+0x60>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d120      	bne.n	800472c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046ea:	4814      	ldr	r0, [pc, #80]	; (800473c <prvCheckForValidListAndQueue+0x64>)
 80046ec:	f7fe f880 	bl	80027f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046f0:	4813      	ldr	r0, [pc, #76]	; (8004740 <prvCheckForValidListAndQueue+0x68>)
 80046f2:	f7fe f87d 	bl	80027f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <prvCheckForValidListAndQueue+0x6c>)
 80046f8:	4a10      	ldr	r2, [pc, #64]	; (800473c <prvCheckForValidListAndQueue+0x64>)
 80046fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <prvCheckForValidListAndQueue+0x70>)
 80046fe:	4a10      	ldr	r2, [pc, #64]	; (8004740 <prvCheckForValidListAndQueue+0x68>)
 8004700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004702:	2300      	movs	r3, #0
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <prvCheckForValidListAndQueue+0x74>)
 8004708:	4a11      	ldr	r2, [pc, #68]	; (8004750 <prvCheckForValidListAndQueue+0x78>)
 800470a:	2110      	movs	r1, #16
 800470c:	200a      	movs	r0, #10
 800470e:	f7fe f98b 	bl	8002a28 <xQueueGenericCreateStatic>
 8004712:	4602      	mov	r2, r0
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <prvCheckForValidListAndQueue+0x60>)
 8004716:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <prvCheckForValidListAndQueue+0x60>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <prvCheckForValidListAndQueue+0x60>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	490b      	ldr	r1, [pc, #44]	; (8004754 <prvCheckForValidListAndQueue+0x7c>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fd8e 	bl	8003248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800472c:	f000 f96c 	bl	8004a08 <vPortExitCritical>
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000c18 	.word	0x20000c18
 800473c:	20000be8 	.word	0x20000be8
 8004740:	20000bfc 	.word	0x20000bfc
 8004744:	20000c10 	.word	0x20000c10
 8004748:	20000c14 	.word	0x20000c14
 800474c:	20000cc4 	.word	0x20000cc4
 8004750:	20000c24 	.word	0x20000c24
 8004754:	08005034 	.word	0x08005034

08004758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3b04      	subs	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b04      	subs	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0201 	bic.w	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3b04      	subs	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004788:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <pxPortInitialiseStack+0x64>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b14      	subs	r3, #20
 8004792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3b04      	subs	r3, #4
 800479e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f06f 0202 	mvn.w	r2, #2
 80047a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b20      	subs	r3, #32
 80047ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	080047c1 	.word	0x080047c1

080047c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <prvTaskExitError+0x50>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d009      	beq.n	80047e8 <prvTaskExitError+0x28>
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e7fe      	b.n	80047e6 <prvTaskExitError+0x26>
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047fa:	bf00      	nop
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0fc      	beq.n	80047fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c
	...

08004820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <pxCurrentTCBConst2>)
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	6808      	ldr	r0, [r1, #0]
 8004826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	f380 8809 	msr	PSP, r0
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f380 8811 	msr	BASEPRI, r0
 800483a:	4770      	bx	lr
 800483c:	f3af 8000 	nop.w

08004840 <pxCurrentTCBConst2>:
 8004840:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop

08004848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004848:	4808      	ldr	r0, [pc, #32]	; (800486c <prvPortStartFirstTask+0x24>)
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f380 8808 	msr	MSP, r0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f380 8814 	msr	CONTROL, r0
 800485a:	b662      	cpsie	i
 800485c:	b661      	cpsie	f
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	df00      	svc	0
 8004868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800486a:	bf00      	nop
 800486c:	e000ed08 	.word	0xe000ed08

08004870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004876:	4b44      	ldr	r3, [pc, #272]	; (8004988 <xPortStartScheduler+0x118>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a44      	ldr	r2, [pc, #272]	; (800498c <xPortStartScheduler+0x11c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <xPortStartScheduler+0x24>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e7fe      	b.n	8004892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004894:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <xPortStartScheduler+0x118>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <xPortStartScheduler+0x120>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d109      	bne.n	80048b2 <xPortStartScheduler+0x42>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e7fe      	b.n	80048b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048b2:	4b38      	ldr	r3, [pc, #224]	; (8004994 <xPortStartScheduler+0x124>)
 80048b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	22ff      	movs	r2, #255	; 0xff
 80048c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <xPortStartScheduler+0x128>)
 80048d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <xPortStartScheduler+0x12c>)
 80048dc:	2207      	movs	r2, #7
 80048de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048e0:	e009      	b.n	80048f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80048e2:	4b2e      	ldr	r3, [pc, #184]	; (800499c <xPortStartScheduler+0x12c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <xPortStartScheduler+0x12c>)
 80048ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d0ef      	beq.n	80048e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004902:	4b26      	ldr	r3, [pc, #152]	; (800499c <xPortStartScheduler+0x12c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1c3 0307 	rsb	r3, r3, #7
 800490a:	2b04      	cmp	r3, #4
 800490c:	d009      	beq.n	8004922 <xPortStartScheduler+0xb2>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	e7fe      	b.n	8004920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <xPortStartScheduler+0x12c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	4a1c      	ldr	r2, [pc, #112]	; (800499c <xPortStartScheduler+0x12c>)
 800492a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800492c:	4b1b      	ldr	r3, [pc, #108]	; (800499c <xPortStartScheduler+0x12c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <xPortStartScheduler+0x12c>)
 8004936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004940:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <xPortStartScheduler+0x130>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a16      	ldr	r2, [pc, #88]	; (80049a0 <xPortStartScheduler+0x130>)
 8004946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800494a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <xPortStartScheduler+0x130>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <xPortStartScheduler+0x130>)
 8004952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004958:	f000 f8d6 	bl	8004b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <xPortStartScheduler+0x134>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004962:	f000 f8f5 	bl	8004b50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <xPortStartScheduler+0x138>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <xPortStartScheduler+0x138>)
 800496c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004972:	f7ff ff69 	bl	8004848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004976:	f7ff f86b 	bl	8003a50 <vTaskSwitchContext>
	prvTaskExitError();
 800497a:	f7ff ff21 	bl	80047c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	e000ed00 	.word	0xe000ed00
 800498c:	410fc271 	.word	0x410fc271
 8004990:	410fc270 	.word	0x410fc270
 8004994:	e000e400 	.word	0xe000e400
 8004998:	20000d14 	.word	0x20000d14
 800499c:	20000d18 	.word	0x20000d18
 80049a0:	e000ed20 	.word	0xe000ed20
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	e000ef34 	.word	0xe000ef34

080049ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <vPortEnterCritical+0x54>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	4a0d      	ldr	r2, [pc, #52]	; (8004a00 <vPortEnterCritical+0x54>)
 80049cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <vPortEnterCritical+0x54>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d10e      	bne.n	80049f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <vPortEnterCritical+0x58>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <vPortEnterCritical+0x48>
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	e7fe      	b.n	80049f2 <vPortEnterCritical+0x46>
	}
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	2000000c 	.word	0x2000000c
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <vPortExitCritical+0x4c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <vPortExitCritical+0x22>
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	e7fe      	b.n	8004a28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <vPortExitCritical+0x4c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <vPortExitCritical+0x4c>)
 8004a32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <vPortExitCritical+0x4c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <vPortExitCritical+0x3e>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c
	...

08004a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a60:	f3ef 8009 	mrs	r0, PSP
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <pxCurrentTCBConst>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f01e 0f10 	tst.w	lr, #16
 8004a70:	bf08      	it	eq
 8004a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a84:	f380 8811 	msr	BASEPRI, r0
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f7fe ffde 	bl	8003a50 <vTaskSwitchContext>
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f380 8811 	msr	BASEPRI, r0
 8004a9c:	bc09      	pop	{r0, r3}
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa6:	f01e 0f10 	tst.w	lr, #16
 8004aaa:	bf08      	it	eq
 8004aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ab0:	f380 8809 	msr	PSP, r0
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w

08004ac0 <pxCurrentTCBConst>:
 8004ac0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ae0:	f7fe fefe 	bl	80038e0 <xTaskIncrementTick>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <SysTick_Handler+0x3c>)
 8004aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	e000ed04 	.word	0xe000ed04

08004b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <vPortSetupTimerInterrupt+0x34>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortSetupTimerInterrupt+0x38>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <vPortSetupTimerInterrupt+0x3c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <vPortSetupTimerInterrupt+0x40>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <vPortSetupTimerInterrupt+0x44>)
 8004b26:	3b01      	subs	r3, #1
 8004b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <vPortSetupTimerInterrupt+0x34>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010
 8004b40:	e000e018 	.word	0xe000e018
 8004b44:	20000000 	.word	0x20000000
 8004b48:	10624dd3 	.word	0x10624dd3
 8004b4c:	e000e014 	.word	0xe000e014

08004b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b60 <vPortEnableVFP+0x10>
 8004b54:	6801      	ldr	r1, [r0, #0]
 8004b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b5a:	6001      	str	r1, [r0, #0]
 8004b5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b5e:	bf00      	nop
 8004b60:	e000ed88 	.word	0xe000ed88

08004b64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d913      	bls.n	8004b9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b76:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <vPortValidateInterruptPriority+0x6c>)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <vPortValidateInterruptPriority+0x70>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	7afa      	ldrb	r2, [r7, #11]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d209      	bcs.n	8004b9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	e7fe      	b.n	8004b9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <vPortValidateInterruptPriority+0x74>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <vPortValidateInterruptPriority+0x78>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d909      	bls.n	8004bc2 <vPortValidateInterruptPriority+0x5e>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	e7fe      	b.n	8004bc0 <vPortValidateInterruptPriority+0x5c>
	}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e3f0 	.word	0xe000e3f0
 8004bd4:	20000d14 	.word	0x20000d14
 8004bd8:	e000ed0c 	.word	0xe000ed0c
 8004bdc:	20000d18 	.word	0x20000d18

08004be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bec:	f7fe fdbe 	bl	800376c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <pvPortMalloc+0x170>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bf8:	f000 f90c 	bl	8004e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bfc:	4b55      	ldr	r3, [pc, #340]	; (8004d54 <pvPortMalloc+0x174>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 808c 	bne.w	8004d22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01c      	beq.n	8004c4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c10:	2208      	movs	r2, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d013      	beq.n	8004c4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f023 0307 	bic.w	r3, r3, #7
 8004c28:	3308      	adds	r3, #8
 8004c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <pvPortMalloc+0x6a>
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e7fe      	b.n	8004c48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d068      	beq.n	8004d22 <pvPortMalloc+0x142>
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <pvPortMalloc+0x178>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d863      	bhi.n	8004d22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c5a:	4b40      	ldr	r3, [pc, #256]	; (8004d5c <pvPortMalloc+0x17c>)
 8004c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <pvPortMalloc+0x17c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c64:	e004      	b.n	8004c70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d903      	bls.n	8004c82 <pvPortMalloc+0xa2>
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f1      	bne.n	8004c66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c82:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <pvPortMalloc+0x170>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d04a      	beq.n	8004d22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2208      	movs	r2, #8
 8004c92:	4413      	add	r3, r2
 8004c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1ad2      	subs	r2, r2, r3
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d91e      	bls.n	8004cec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <pvPortMalloc+0xf4>
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e7fe      	b.n	8004cd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ce6:	69b8      	ldr	r0, [r7, #24]
 8004ce8:	f000 f8f6 	bl	8004ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <pvPortMalloc+0x178>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <pvPortMalloc+0x178>)
 8004cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <pvPortMalloc+0x178>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <pvPortMalloc+0x180>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d203      	bcs.n	8004d0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <pvPortMalloc+0x178>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <pvPortMalloc+0x180>)
 8004d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <pvPortMalloc+0x174>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d22:	f7fe fd31 	bl	8003788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <pvPortMalloc+0x164>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e7fe      	b.n	8004d42 <pvPortMalloc+0x162>
	return pvReturn;
 8004d44:	69fb      	ldr	r3, [r7, #28]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3728      	adds	r7, #40	; 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20004924 	.word	0x20004924
 8004d54:	20004930 	.word	0x20004930
 8004d58:	20004928 	.word	0x20004928
 8004d5c:	2000491c 	.word	0x2000491c
 8004d60:	2000492c 	.word	0x2000492c

08004d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d046      	beq.n	8004e04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d76:	2308      	movs	r3, #8
 8004d78:	425b      	negs	r3, r3
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <vPortFree+0xa8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <vPortFree+0x42>
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e7fe      	b.n	8004da4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <vPortFree+0x5e>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	e7fe      	b.n	8004dc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <vPortFree+0xa8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d019      	beq.n	8004e04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d115      	bne.n	8004e04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <vPortFree+0xa8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004de8:	f7fe fcc0 	bl	800376c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <vPortFree+0xac>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4413      	add	r3, r2
 8004df6:	4a06      	ldr	r2, [pc, #24]	; (8004e10 <vPortFree+0xac>)
 8004df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dfa:	6938      	ldr	r0, [r7, #16]
 8004dfc:	f000 f86c 	bl	8004ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e00:	f7fe fcc2 	bl	8003788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e04:	bf00      	nop
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20004930 	.word	0x20004930
 8004e10:	20004928 	.word	0x20004928

08004e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <prvHeapInit+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <prvHeapInit+0xac>)
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	; (8004ec4 <prvHeapInit+0xb0>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e60:	2208      	movs	r2, #8
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvHeapInit+0xb4>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <prvHeapInit+0xb8>)
 8004ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <prvHeapInit+0xbc>)
 8004eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <prvHeapInit+0xc0>)
 8004eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	20000d1c 	.word	0x20000d1c
 8004ec4:	2000491c 	.word	0x2000491c
 8004ec8:	20004924 	.word	0x20004924
 8004ecc:	2000492c 	.word	0x2000492c
 8004ed0:	20004928 	.word	0x20004928
 8004ed4:	20004930 	.word	0x20004930

08004ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <prvInsertBlockIntoFreeList+0xac>)
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <prvInsertBlockIntoFreeList+0x14>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d8f7      	bhi.n	8004ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d108      	bne.n	8004f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d118      	bne.n	8004f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d00d      	beq.n	8004f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e008      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <prvInsertBlockIntoFreeList+0xb0>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e003      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d002      	beq.n	8004f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000491c 	.word	0x2000491c
 8004f88:	20004924 	.word	0x20004924

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0d      	ldr	r6, [pc, #52]	; (8004fc4 <__libc_init_array+0x38>)
 8004f90:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f92:	1ba4      	subs	r4, r4, r6
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	2500      	movs	r5, #0
 8004f98:	42a5      	cmp	r5, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	4e0b      	ldr	r6, [pc, #44]	; (8004fcc <__libc_init_array+0x40>)
 8004f9e:	4c0c      	ldr	r4, [pc, #48]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa0:	f000 f82c 	bl	8004ffc <_init>
 8004fa4:	1ba4      	subs	r4, r4, r6
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	2500      	movs	r5, #0
 8004faa:	42a5      	cmp	r5, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fb4:	4798      	blx	r3
 8004fb6:	3501      	adds	r5, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fbe:	4798      	blx	r3
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	0800505c 	.word	0x0800505c
 8004fc8:	0800505c 	.word	0x0800505c
 8004fcc:	0800505c 	.word	0x0800505c
 8004fd0:	08005060 	.word	0x08005060

08004fd4 <memcpy>:
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	1e43      	subs	r3, r0, #1
 8004fd8:	440a      	add	r2, r1
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	d100      	bne.n	8004fe0 <memcpy+0xc>
 8004fde:	bd10      	pop	{r4, pc}
 8004fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe8:	e7f7      	b.n	8004fda <memcpy+0x6>

08004fea <memset>:
 8004fea:	4402      	add	r2, r0
 8004fec:	4603      	mov	r3, r0
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d100      	bne.n	8004ff4 <memset+0xa>
 8004ff2:	4770      	bx	lr
 8004ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff8:	e7f9      	b.n	8004fee <memset+0x4>
	...

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
